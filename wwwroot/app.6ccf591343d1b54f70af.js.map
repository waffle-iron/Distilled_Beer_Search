{"version":3,"sources":["webpack:///app.6ccf591343d1b54f70af.js","webpack:///./main.ts","webpack:///./styles/main.css","webpack:///./app/app.module.ts","webpack:///../~/@angular/forms/bundles/forms.umd.js","webpack:///../~/angular-in-memory-web-api/bundles/in-memory-web-api.umd.js","webpack:///./app/app.component.ts","webpack:///./app/app.component.html","webpack:///./app/app.component.css","webpack:///./app/entries/index.ts","webpack:///./app/entries/shared/entry.service.ts","webpack:///./app/entries/entry-list/entry-list.component.ts","webpack:///./app/entries/entry-list/entry-list.component.html","webpack:///./app/entries/entry-list/entry-list.component.css","webpack:///./app/entries/entry/entry.component.ts","webpack:///./app/entries/shared/entry.model.ts","webpack:///./app/entries/entry/entry.component.html","webpack:///./app/entries/entry/entry.component.css","webpack:///./app/entries/entry/entry-comment-form.component.ts","webpack:///./app/entries/entry/entry-comment-form.component.html","webpack:///./app/backend.ts","webpack:///../photos/Burning-sundown-behind-trees.jpg","webpack:///../photos/Water-lilies-and-algas.jpg","webpack:///../photos/German-steam-engine-No.4.jpg","webpack:///../photos/Red-sun-stripe-at-horizon.jpg","webpack:///../photos/Sundown-behind-fields.jpg"],"names":["webpackJsonp","module","exports","__webpack_require__","platform_browser_dynamic_1","app_module_1","platformBrowserDynamic","bootstrapModule","AppModule","__decorate","this","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","core_1","platform_browser_1","http_1","forms_1","angular_in_memory_web_api_1","app_component_1","entries_1","backend_1","NgModule","imports","BrowserModule","HttpModule","FormsModule","InMemoryWebApiModule","forRoot","InMemoryEntryService","providers","EntryService","declarations","AppComponent","EntryComponent","EntryListComponent","EntryCommentFormComponent","bootstrap","global","factory","_angular_core","rxjs_operator_toPromise","rxjs_Subject","rxjs_Observable","rxjs_observable_fromPromise","isPresent","obj","isBlank","looseIdentical","a","b","isNaN","isJsObject","o","isPrimitive","isEmptyInputValue","value","_convertToPromise","isPromise","toPromise","call","_executeValidators","control","validators","map","_executeAsyncValidators","_mergeErrors","arrayOfErrors","res","reduce","errors","StringMapWrapper","merge","keys","normalizeValidator","validator","validate","normalizeAsyncValidator","unimplemented","Error","_buildValueString","id","slice","_extractId","valueString","split","_buildValueString$1","_extractId$1","controlPath","name","parent","path","concat","setUpControl","dir","_throwError","valueAccessor","Validators","compose","asyncValidator","composeAsync","writeValue","registerOnChange","newValue","viewToModelUpdate","markAsDirty","setValue","emitModelToViewChange","registerOnTouched","markAsTouched","emitModelEvent","setDisabledState","registerOnDisabledChange","isDisabled","_rawValidators","forEach","registerOnValidatorChange","updateValueAndValidity","_rawAsyncValidators","cleanUpControl","_noControlError","_clearChangeFns","setUpFormContainer","message","messageEnd","join","composeValidators","composeAsyncValidators","isPropertyUpdated","changes","viewModel","hasOwnProperty","change","isFirstChange","currentValue","isBuiltInAccessor","BUILTIN_ACCESSORS","some","constructor","selectValueAccessor","valueAccessors","defaultAccessor","builtinAccessor","customAccessor","DefaultValueAccessor","_find","delimiter","Array","FormGroup","controls","FormArray","at","toObservable","fromPromise","coerceToValidator","isArray","coerceToAsyncValidator","_hasInvalidParent","FormGroupName","FormGroupDirective","FormArrayName","AbstractControlDirective","prototype","get","enumerable","configurable","valid","invalid","pending","pristine","dirty","touched","untouched","disabled","enabled","statusChanges","valueChanges","reset","undefined","hasError","errorCode","getError","__extends$1","__extends","__","p","create","ControlContainer","_super","apply","m1","m2","m","_i","_a","_b","_c","equals","k1","k2","ListWrapper","findLast","arr","condition","removeAll","list","items","index","indexOf","splice","remove","el","flatten","flat","item","flatItem","__core_private__","NG_VALIDATORS","OpaqueToken","NG_ASYNC_VALIDATORS","required","requiredTrue","minLength","minlength","requiredLength","actualLength","maxLength","maxlength","pattern","nullValidator","regex","regexStr","RegExp","toString","test","requiredPattern","actualValue","presentValidators","filter","promises","Promise","all","then","NG_VALUE_ACCESSOR","CHECKBOX_VALUE_ACCESSOR","provide","useExisting","forwardRef","CheckboxControlValueAccessor","multi","_renderer","_elementRef","onChange","_","onTouched","setElementProperty","nativeElement","fn","type","Directive","args","selector","host","(change)","(blur)","ctorParameters","Renderer","ElementRef","DEFAULT_VALUE_ACCESSOR","normalizedValue","(input)","NUMBER_VALUE_ACCESSOR","NumberValueAccessor","parseFloat","__extends$2","NgControl","_parent","RADIO_VALUE_ACCESSOR","RadioControlValueAccessor","RadioControlRegistry","_accessors","add","accessor","push","select","_this","_isSameGroup","fireUncheck","controlPair","_control","Injectable","_registry","_injector","ngOnInit","_checkName","ngOnDestroy","_state","_fn","formControlName","_throwNameError","Injector","propDecorators","Input","RANGE_VALUE_ACCESSOR","RangeValueAccessor","SELECT_VALUE_ACCESSOR","SelectControlValueAccessor","_optionMap","Map","_idCounter","_getOptionId","_getOptionValue","_registerOption","from","has","NgSelectOption","_element","_select","set","_setElementValue","delete","Optional","Host","ngValue","SELECT_MULTIPLE_VALUE_ACCESSOR","SelectMultipleControlValueAccessor","optionSelectedStateSetter","ids_1","opt","_setSelected","selected","options","selectedOptions","val","_value","NgSelectMultipleOption","AbstractFormGroupDirective","_checkParentType","formDirective","addFormGroup","removeFormGroup","getFormGroup","_validators","_asyncValidators","__extends$3","AbstractControlStatus","cd","_cd","ngControlStatusHost","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","NgControlStatus","Self","NgControlStatusGroup","__extends$5","EventEmitter","isAsync","__isAsync","emit","next","subscribe","generatorOrNext","error","complete","schedulerFn","errorFn","err","completeFn","setTimeout","Subject","__extends$6","VALID","INVALID","PENDING","DISABLED","AbstractControl","_onCollectionChange","_pristine","_touched","_onDisabledChange","_status","_errors","_valueChanges","_statusChanges","setValidators","newValidator","setAsyncValidators","clearValidators","clearAsyncValidators","onlySelf","markAsUntouched","_forEachChild","_updateTouched","markAsPristine","_updatePristine","markAsPending","disable","emitEvent","_updateValue","_updateAncestors","changeFn","enable","setParent","patchValue","_setInitialStatus","_runValidator","_calculateStatus","_runAsyncValidator","_updateTreeValidity","ctrl","_allControlsDisabled","_cancelExistingSubscription","obs","_asyncValidationSubscription","setErrors","unsubscribe","_updateControlsErrors","x","_initObservables","_anyControlsHaveStatus","cb","_anyControls","status","_anyControlsDirty","_anyControlsTouched","_isBoxedValue","formState","_registerOnCollectionChange","FormControl","_onChange","_applyFormState","emitViewToModelChange","_setUpControls","registerControl","addControl","removeControl","setControl","contains","controlName","_checkAllValuesPresent","_throwIfControlMissing","getRawValue","_reduceChildren","acc","_reduceValue","initValue","_registerControl","insert","removeAt","__extends$4","formDirectiveProvider","NgForm","resolvedPromise","resolve","asyncValidators","_submitted","ngSubmit","form","container","_findContainer","getControl","group","updateModel","onSubmit","$event","onReset","resetForm","pop","(submit)","(reset)","outputs","exportAs","Inject","Examples","formGroupName","formArrayName","ngModelGroup","ngModelWithFormGroup","TemplateDrivenErrors","modelParentException","formGroupNameException","missingNameException","modelGroupParentException","__extends$8","modelGroupProvider","NgModelGroup","SkipSelf","__extends$7","formControlBinding","NgModel","resolvedPromise$1","_registered","update","ngOnChanges","_checkForErrors","_setUpControl","_updateDisabled","model","_isStandalone","_setUpStandalone","standalone","disabledValue","Output","ReactiveErrors","controlParentException","ngModelGroupException","missingFormException","groupParentException","arrayParentException","disabledAttrWarning","console","warn","__extends$9","formControlBinding$1","FormControlDirective","_isControlChanged","__extends$11","formDirectiveProvider$1","directives","_checkFormPresent","_updateValidators","_updateDomValue","_updateRegistrations","addFormArray","removeFormArray","getFormArray","newCtrl","_oldForm","sync","async","__extends$12","formGroupNameProvider","formArrayNameProvider","__extends$10","controlNameBinding","FormControlName","_added","__extends$13","REQUIRED_VALIDATOR","RequiredValidator","CHECKBOX_REQUIRED_VALIDATOR","CheckboxRequiredValidator","_required","[attr.required]","MIN_LENGTH_VALIDATOR","MinLengthValidator","_createValidator","_validator","parseInt","[attr.minlength]","MAX_LENGTH_VALIDATOR","MaxLengthValidator","[attr.maxlength]","PATTERN_VALIDATOR","PatternValidator","[attr.pattern]","FormBuilder","controlsConfig","extra","_reduceControls","array","_createControl","controlConfig","VERSION","Version","SHARED_FORM_DIRECTIVES","TEMPLATE_DRIVEN_DIRECTIVES","REACTIVE_DRIVEN_DIRECTIVES","InternalFormsSharedModule","ReactiveFormsModule","_angular_http","rxjs_add_operator_delay","createErrorResponse","req","ResponseOptions","body","url","headers","Headers","Content-Type","createObservableResponse","resOptions","Observable","responseObserver","emitResponse","setStatusText","Response","isSuccess","removeTrailingSlash","replace","statusCode","STATUS_CODE_INFO","text","STATUS","INTERNAL_SERVER_ERROR","statusText","inMemoryBackendServiceFactory","injector","dbService","backend","InMemoryBackendService","CONTINUE","SWITCHING_PROTOCOLS","OK","CREATED","ACCEPTED","NON_AUTHORITATIVE_INFORMATION","NO_CONTENT","RESET_CONTENT","PARTIAL_CONTENT","MULTIPLE_CHOICES","MOVED_PERMANTENTLY","FOUND","SEE_OTHER","NOT_MODIFIED","USE_PROXY","TEMPORARY_REDIRECT","BAD_REQUEST","UNAUTHORIZED","PAYMENT_REQUIRED","FORBIDDEN","NOT_FOUND","METHOD_NOT_ALLOWED","NOT_ACCEPTABLE","PROXY_AUTHENTICATION_REQUIRED","REQUEST_TIMEOUT","CONFLICT","GONE","LENGTH_REQUIRED","PRECONDITION_FAILED","PAYLOAD_TO_LARGE","URI_TOO_LONG","UNSUPPORTED_MEDIA_TYPE","RANGE_NOT_SATISFIABLE","EXPECTATION_FAILED","IM_A_TEAPOT","UPGRADE_REQUIRED","NOT_IMPLEMENTED","BAD_GATEWAY","SERVICE_UNAVAILABLE","GATEWAY_TIMEOUT","HTTP_VERSION_NOT_SUPPORTED","PROCESSING","MULTI_STATUS","IM_USED","PERMANENT_REDIRECT","UNPROCESSABLE_ENTRY","LOCKED","FAILED_DEPENDENCY","PRECONDITION_REQUIRED","TOO_MANY_REQUESTS","REQUEST_HEADER_FIELDS_TOO_LARGE","UNAVAILABLE_FOR_LEGAL_REASONS","VARIANT_ALSO_NEGOTIATES","INSUFFICIENT_STORAGE","NETWORK_AUTHENTICATION_REQUIRED","100","code","description","spec_title","spec_href","101","200","201","202","203","204","205","206","300","301","302","303","304","305","307","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","426","500","501","502","503","504","505","102","207","226","308","422","423","424","428","429","431","451","506","507","511","InMemoryDbService","InMemoryBackendConfigArgs","InMemoryBackendConfig","config","assign","caseSensitiveSearch","defaultResponseOptions","BaseResponseOptions","delay","delete404","passThruUnknownUrl","post204","put204","apiBase","rootPath","inMemDbService","resetDb","loc","getLocation","pathname","setPassThruBackend","createConnection","response","handleRequest","addDelay","readyState","ReadyState","Done","request","parsed","parseUrl","base","collectionName","query","resourceUrl","collection","db","reqInfo","parseId","reqMethodName","RequestMethod","method","toLowerCase","commands","interceptorArgs","requestInfo","passThruBackend","interceptorResponse","collectionHandler","applyQuery","conditions","caseSensitive","paramsMap","rx","decodeURI","len","row","ok","cond","clone","data","JSON","parse","stringify","Get","Post","post","Put","put","Delete","command","exists","removeById","findById","find","genId","maxId","prev","Math","max","href","l","document","createElement","findIndex","isNumberId","idNum","drop","urlRoot","protocol","substring","pathSegments","segmentIx","trim","search","URLSearchParams","substr","msg","existingIx","ix","createDb","browserXhr","BrowserXhr","baseResponseOptions","xsrfStrategy","XSRFStrategy","XHRBackend","ex","dbCreator","ngModule","useClass","useValue","useFactory","deps","emoji","changeEmoji","activeEmoji","floor","random","Component","template","styles","__export","http","addComment","entryId","comment","getEntries","json","Http","entry_service_1","entryService","entries","entry_model_1","onCommentAdded","entry","comments","Entry","commentForm","Number","ViewChild","title","photo"],"mappings":"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","file":"app.6ccf591343d1b54f70af.js","sourcesContent":["webpackJsonp([0],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t// Import global stylesheet\r\n\t__webpack_require__(1);\r\n\tvar platform_browser_dynamic_1 = __webpack_require__(2);\r\n\tvar app_module_1 = __webpack_require__(24);\r\n\tplatform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(app_module_1.AppModule);\r\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"// removed by extract-text-webpack-plugin\"\n\n/***/ },\n/* 2 */,\n/* 3 */,\n/* 4 */,\n/* 5 */,\n/* 6 */,\n/* 7 */,\n/* 8 */,\n/* 9 */,\n/* 10 */,\n/* 11 */,\n/* 12 */,\n/* 13 */,\n/* 14 */,\n/* 15 */,\n/* 16 */,\n/* 17 */,\n/* 18 */,\n/* 19 */,\n/* 20 */,\n/* 21 */,\n/* 22 */,\n/* 23 */,\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(4);\r\n\tvar platform_browser_1 = __webpack_require__(22);\r\n\tvar http_1 = __webpack_require__(25);\r\n\tvar forms_1 = __webpack_require__(26);\r\n\tvar angular_in_memory_web_api_1 = __webpack_require__(30);\r\n\tvar app_component_1 = __webpack_require__(40);\r\n\tvar entries_1 = __webpack_require__(43);\r\n\tvar backend_1 = __webpack_require__(54);\r\n\tvar AppModule = (function () {\r\n\t    function AppModule() {\r\n\t    }\r\n\t    return AppModule;\r\n\t}());\r\n\tAppModule = __decorate([\r\n\t    core_1.NgModule({\r\n\t        imports: [\r\n\t            platform_browser_1.BrowserModule,\r\n\t            http_1.HttpModule,\r\n\t            forms_1.FormsModule,\r\n\t            angular_in_memory_web_api_1.InMemoryWebApiModule.forRoot(backend_1.InMemoryEntryService)\r\n\t        ],\r\n\t        providers: [entries_1.EntryService],\r\n\t        declarations: [\r\n\t            app_component_1.AppComponent,\r\n\t            entries_1.EntryComponent,\r\n\t            entries_1.EntryListComponent,\r\n\t            entries_1.EntryCommentFormComponent\r\n\t        ],\r\n\t        bootstrap: [app_component_1.AppComponent]\r\n\t    }),\r\n\t    __metadata(\"design:paramtypes\", [])\r\n\t], AppModule);\r\n\texports.AppModule = AppModule;\r\n\n\n/***/ },\n/* 25 */,\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @license Angular v2.4.2\n\t * (c) 2010-2016 Google, Inc. https://angular.io/\n\t * License: MIT\n\t */\n\t(function (global, factory) {\n\t     true ? factory(exports, __webpack_require__(4), __webpack_require__(27), __webpack_require__(5), __webpack_require__(6), __webpack_require__(28)) :\n\t    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/operator/toPromise', 'rxjs/Subject', 'rxjs/Observable', 'rxjs/observable/fromPromise'], factory) :\n\t    (factory((global.ng = global.ng || {}, global.ng.forms = global.ng.forms || {}),global.ng.core,global.Rx.Observable.prototype,global.Rx,global.Rx,global.Rx.Observable));\n\t}(this, function (exports,_angular_core,rxjs_operator_toPromise,rxjs_Subject,rxjs_Observable,rxjs_observable_fromPromise) { 'use strict';\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    /**\n\t     *  Base class for control directives.\n\t      * *\n\t      * Only used internally in the forms module.\n\t      * *\n\t     * @abstract\n\t     */\n\t    var AbstractControlDirective = (function () {\n\t        function AbstractControlDirective() {\n\t        }\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"control\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { throw new Error('unimplemented'); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"value\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.value : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"valid\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.valid : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"invalid\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.invalid : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"pending\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.pending : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"errors\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.errors : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"pristine\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.pristine : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"dirty\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.dirty : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"touched\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.touched : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"untouched\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.untouched : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"disabled\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.disabled : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"enabled\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.enabled : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"statusChanges\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.statusChanges : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"valueChanges\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.control ? this.control.valueChanges : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"path\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?=} value\n\t         * @return {?}\n\t         */\n\t        AbstractControlDirective.prototype.reset = function (value) {\n\t            if (value === void 0) { value = undefined; }\n\t            if (this.control)\n\t                this.control.reset(value);\n\t        };\n\t        /**\n\t         * @param {?} errorCode\n\t         * @param {?=} path\n\t         * @return {?}\n\t         */\n\t        AbstractControlDirective.prototype.hasError = function (errorCode, path) {\n\t            if (path === void 0) { path = null; }\n\t            return this.control ? this.control.hasError(errorCode, path) : false;\n\t        };\n\t        /**\n\t         * @param {?} errorCode\n\t         * @param {?=} path\n\t         * @return {?}\n\t         */\n\t        AbstractControlDirective.prototype.getError = function (errorCode, path) {\n\t            if (path === void 0) { path = null; }\n\t            return this.control ? this.control.getError(errorCode, path) : null;\n\t        };\n\t        return AbstractControlDirective;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$1 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     *  A directive that contains multiple {@link NgControl}s.\n\t      * *\n\t      * Only used by the forms module.\n\t      * *\n\t     */\n\t    var ControlContainer = (function (_super) {\n\t        __extends$1(ControlContainer, _super);\n\t        function ControlContainer() {\n\t            _super.apply(this, arguments);\n\t        }\n\t        Object.defineProperty(ControlContainer.prototype, \"formDirective\", {\n\t            /**\n\t             *  Get the form to which this container belongs.\n\t             * @return {?}\n\t             */\n\t            get: function () { return null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ControlContainer.prototype, \"path\", {\n\t            /**\n\t             *  Get the path to this container.\n\t             * @return {?}\n\t             */\n\t            get: function () { return null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return ControlContainer;\n\t    }(AbstractControlDirective));\n\t\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function isPresent(obj) {\n\t        return obj != null;\n\t    }\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function isBlank(obj) {\n\t        return obj == null;\n\t    }\n\t    /**\n\t     * @param {?} a\n\t     * @param {?} b\n\t     * @return {?}\n\t     */\n\t    function looseIdentical(a, b) {\n\t        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n\t    }\n\t    /**\n\t     * @param {?} o\n\t     * @return {?}\n\t     */\n\t    function isJsObject(o) {\n\t        return o !== null && (typeof o === 'function' || typeof o === 'object');\n\t    }\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function isPrimitive(obj) {\n\t        return !isJsObject(obj);\n\t    }\n\t\n\t    /**\n\t     *  Wraps Javascript Objects\n\t     */\n\t    var StringMapWrapper = (function () {\n\t        function StringMapWrapper() {\n\t        }\n\t        /**\n\t         * @param {?} m1\n\t         * @param {?} m2\n\t         * @return {?}\n\t         */\n\t        StringMapWrapper.merge = function (m1, m2) {\n\t            var /** @type {?} */ m = {};\n\t            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {\n\t                var k = _a[_i];\n\t                m[k] = m1[k];\n\t            }\n\t            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {\n\t                var k = _c[_b];\n\t                m[k] = m2[k];\n\t            }\n\t            return m;\n\t        };\n\t        /**\n\t         * @param {?} m1\n\t         * @param {?} m2\n\t         * @return {?}\n\t         */\n\t        StringMapWrapper.equals = function (m1, m2) {\n\t            var /** @type {?} */ k1 = Object.keys(m1);\n\t            var /** @type {?} */ k2 = Object.keys(m2);\n\t            if (k1.length != k2.length) {\n\t                return false;\n\t            }\n\t            for (var /** @type {?} */ i = 0; i < k1.length; i++) {\n\t                var /** @type {?} */ key = k1[i];\n\t                if (m1[key] !== m2[key]) {\n\t                    return false;\n\t                }\n\t            }\n\t            return true;\n\t        };\n\t        return StringMapWrapper;\n\t    }());\n\t    var ListWrapper = (function () {\n\t        function ListWrapper() {\n\t        }\n\t        /**\n\t         * @param {?} arr\n\t         * @param {?} condition\n\t         * @return {?}\n\t         */\n\t        ListWrapper.findLast = function (arr, condition) {\n\t            for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {\n\t                if (condition(arr[i])) {\n\t                    return arr[i];\n\t                }\n\t            }\n\t            return null;\n\t        };\n\t        /**\n\t         * @param {?} list\n\t         * @param {?} items\n\t         * @return {?}\n\t         */\n\t        ListWrapper.removeAll = function (list, items) {\n\t            for (var /** @type {?} */ i = 0; i < items.length; ++i) {\n\t                var /** @type {?} */ index = list.indexOf(items[i]);\n\t                if (index > -1) {\n\t                    list.splice(index, 1);\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} list\n\t         * @param {?} el\n\t         * @return {?}\n\t         */\n\t        ListWrapper.remove = function (list, el) {\n\t            var /** @type {?} */ index = list.indexOf(el);\n\t            if (index > -1) {\n\t                list.splice(index, 1);\n\t                return true;\n\t            }\n\t            return false;\n\t        };\n\t        /**\n\t         * @param {?} a\n\t         * @param {?} b\n\t         * @return {?}\n\t         */\n\t        ListWrapper.equals = function (a, b) {\n\t            if (a.length != b.length)\n\t                return false;\n\t            for (var /** @type {?} */ i = 0; i < a.length; ++i) {\n\t                if (a[i] !== b[i])\n\t                    return false;\n\t            }\n\t            return true;\n\t        };\n\t        /**\n\t         * @param {?} list\n\t         * @return {?}\n\t         */\n\t        ListWrapper.flatten = function (list) {\n\t            return list.reduce(function (flat, item) {\n\t                var /** @type {?} */ flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;\n\t                return ((flat)).concat(flatItem);\n\t            }, []);\n\t        };\n\t        return ListWrapper;\n\t    }());\n\t\n\t    var /** @type {?} */ isPromise = _angular_core.__core_private__.isPromise;\n\t\n\t    /**\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    function isEmptyInputValue(value) {\n\t        // we don't check for string here so it also works with arrays\n\t        return value == null || value.length === 0;\n\t    }\n\t    /**\n\t     * Providers for validators to be used for {@link FormControl}s in a form.\n\t     *\n\t     * Provide this using `multi: true` to add validators.\n\t     *\n\t     * ### Example\n\t     *\n\t     * {@example core/forms/ts/ng_validators/ng_validators.ts region='ng_validators'}\n\t     * @stable\n\t     */\n\t    var /** @type {?} */ NG_VALIDATORS = new _angular_core.OpaqueToken('NgValidators');\n\t    /**\n\t     * Providers for asynchronous validators to be used for {@link FormControl}s\n\t     * in a form.\n\t     *\n\t     * Provide this using `multi: true` to add validators.\n\t     *\n\t     * See {@link NG_VALIDATORS} for more details.\n\t     *\n\t     * @stable\n\t     */\n\t    var /** @type {?} */ NG_ASYNC_VALIDATORS = new _angular_core.OpaqueToken('NgAsyncValidators');\n\t    /**\n\t     *  Provides a set of validators used by form controls.\n\t      * *\n\t      * A validator is a function that processes a {@link FormControl} or collection of\n\t      * controls and returns a map of errors. A null map means that validation has passed.\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * ```typescript\n\t      * var loginControl = new FormControl(\"\", Validators.required)\n\t      * ```\n\t      * *\n\t     */\n\t    var Validators = (function () {\n\t        function Validators() {\n\t        }\n\t        /**\n\t         *  Validator that requires controls to have a non-empty value.\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        Validators.required = function (control) {\n\t            return isEmptyInputValue(control.value) ? { 'required': true } : null;\n\t        };\n\t        /**\n\t         *  Validator that requires control value to be true.\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        Validators.requiredTrue = function (control) {\n\t            return control.value === true ? null : { 'required': true };\n\t        };\n\t        /**\n\t         *  Validator that requires controls to have a value of a minimum length.\n\t         * @param {?} minLength\n\t         * @return {?}\n\t         */\n\t        Validators.minLength = function (minLength) {\n\t            return function (control) {\n\t                if (isEmptyInputValue(control.value)) {\n\t                    return null; // don't validate empty values to allow optional controls\n\t                }\n\t                var /** @type {?} */ length = control.value ? control.value.length : 0;\n\t                return length < minLength ?\n\t                    { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :\n\t                    null;\n\t            };\n\t        };\n\t        /**\n\t         *  Validator that requires controls to have a value of a maximum length.\n\t         * @param {?} maxLength\n\t         * @return {?}\n\t         */\n\t        Validators.maxLength = function (maxLength) {\n\t            return function (control) {\n\t                var /** @type {?} */ length = control.value ? control.value.length : 0;\n\t                return length > maxLength ?\n\t                    { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :\n\t                    null;\n\t            };\n\t        };\n\t        /**\n\t         *  Validator that requires a control to match a regex to its value.\n\t         * @param {?} pattern\n\t         * @return {?}\n\t         */\n\t        Validators.pattern = function (pattern) {\n\t            if (!pattern)\n\t                return Validators.nullValidator;\n\t            var /** @type {?} */ regex;\n\t            var /** @type {?} */ regexStr;\n\t            if (typeof pattern === 'string') {\n\t                regexStr = \"^\" + pattern + \"$\";\n\t                regex = new RegExp(regexStr);\n\t            }\n\t            else {\n\t                regexStr = pattern.toString();\n\t                regex = pattern;\n\t            }\n\t            return function (control) {\n\t                if (isEmptyInputValue(control.value)) {\n\t                    return null; // don't validate empty values to allow optional controls\n\t                }\n\t                var /** @type {?} */ value = control.value;\n\t                return regex.test(value) ? null :\n\t                    { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };\n\t            };\n\t        };\n\t        /**\n\t         *  No-op validator.\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        Validators.nullValidator = function (c) { return null; };\n\t        /**\n\t         *  Compose multiple validators into a single function that returns the union\n\t          * of the individual error maps.\n\t         * @param {?} validators\n\t         * @return {?}\n\t         */\n\t        Validators.compose = function (validators) {\n\t            if (!validators)\n\t                return null;\n\t            var /** @type {?} */ presentValidators = validators.filter(isPresent);\n\t            if (presentValidators.length == 0)\n\t                return null;\n\t            return function (control) {\n\t                return _mergeErrors(_executeValidators(control, presentValidators));\n\t            };\n\t        };\n\t        /**\n\t         * @param {?} validators\n\t         * @return {?}\n\t         */\n\t        Validators.composeAsync = function (validators) {\n\t            if (!validators)\n\t                return null;\n\t            var /** @type {?} */ presentValidators = validators.filter(isPresent);\n\t            if (presentValidators.length == 0)\n\t                return null;\n\t            return function (control) {\n\t                var /** @type {?} */ promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);\n\t                return Promise.all(promises).then(_mergeErrors);\n\t            };\n\t        };\n\t        return Validators;\n\t    }());\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function _convertToPromise(obj) {\n\t        return isPromise(obj) ? obj : rxjs_operator_toPromise.toPromise.call(obj);\n\t    }\n\t    /**\n\t     * @param {?} control\n\t     * @param {?} validators\n\t     * @return {?}\n\t     */\n\t    function _executeValidators(control, validators) {\n\t        return validators.map(function (v) { return v(control); });\n\t    }\n\t    /**\n\t     * @param {?} control\n\t     * @param {?} validators\n\t     * @return {?}\n\t     */\n\t    function _executeAsyncValidators(control, validators) {\n\t        return validators.map(function (v) { return v(control); });\n\t    }\n\t    /**\n\t     * @param {?} arrayOfErrors\n\t     * @return {?}\n\t     */\n\t    function _mergeErrors(arrayOfErrors) {\n\t        var /** @type {?} */ res = arrayOfErrors.reduce(function (res, errors) {\n\t            return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;\n\t        }, {});\n\t        return Object.keys(res).length === 0 ? null : res;\n\t    }\n\t\n\t    /**\n\t     * Used to provide a {@link ControlValueAccessor} for form controls.\n\t     *\n\t     * See {@link DefaultValueAccessor} for how to implement one.\n\t     * @stable\n\t     */\n\t    var /** @type {?} */ NG_VALUE_ACCESSOR = new _angular_core.OpaqueToken('NgValueAccessor');\n\t\n\t    var /** @type {?} */ CHECKBOX_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return CheckboxControlValueAccessor; }),\n\t        multi: true,\n\t    };\n\t    /**\n\t     *  The accessor for writing a value and listening to changes on a checkbox input element.\n\t      * *\n\t      * ### Example\n\t      * ```\n\t      * <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n\t      * ```\n\t      * *\n\t      * @stable\n\t     */\n\t    var CheckboxControlValueAccessor = (function () {\n\t        /**\n\t         * @param {?} _renderer\n\t         * @param {?} _elementRef\n\t         */\n\t        function CheckboxControlValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        CheckboxControlValueAccessor.prototype.writeValue = function (value) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        /**\n\t         * @param {?} isDisabled\n\t         * @return {?}\n\t         */\n\t        CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        CheckboxControlValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n\t                        host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n\t                        providers: [CHECKBOX_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        CheckboxControlValueAccessor.ctorParameters = function () { return [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ]; };\n\t        return CheckboxControlValueAccessor;\n\t    }());\n\t\n\t    var /** @type {?} */ DEFAULT_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return DefaultValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     *  The default accessor for writing a value and listening to changes that is used by the\n\t      * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n\t      * *\n\t      * ### Example\n\t      * ```\n\t      * <input type=\"text\" name=\"searchQuery\" ngModel>\n\t      * ```\n\t      * *\n\t      * @stable\n\t     */\n\t    var DefaultValueAccessor = (function () {\n\t        /**\n\t         * @param {?} _renderer\n\t         * @param {?} _elementRef\n\t         */\n\t        function DefaultValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        DefaultValueAccessor.prototype.writeValue = function (value) {\n\t            var /** @type {?} */ normalizedValue = value == null ? '' : value;\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        /**\n\t         * @param {?} isDisabled\n\t         * @return {?}\n\t         */\n\t        DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        DefaultValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n\t                        // TODO: vsavkin replace the above selector with the one below it once\n\t                        // https://github.com/angular/angular/issues/3011 is implemented\n\t                        // selector: '[ngControl],[ngModel],[ngFormControl]',\n\t                        host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n\t                        providers: [DEFAULT_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        DefaultValueAccessor.ctorParameters = function () { return [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ]; };\n\t        return DefaultValueAccessor;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    /**\n\t     * @param {?} validator\n\t     * @return {?}\n\t     */\n\t    function normalizeValidator(validator) {\n\t        if (((validator)).validate) {\n\t            return function (c) { return ((validator)).validate(c); };\n\t        }\n\t        else {\n\t            return (validator);\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} validator\n\t     * @return {?}\n\t     */\n\t    function normalizeAsyncValidator(validator) {\n\t        if (((validator)).validate) {\n\t            return function (c) { return ((validator)).validate(c); };\n\t        }\n\t        else {\n\t            return (validator);\n\t        }\n\t    }\n\t\n\t    var /** @type {?} */ NUMBER_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return NumberValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     *  The accessor for writing a number value and listening to changes that is used by the\n\t      * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n\t      * *\n\t      * ### Example\n\t      * ```\n\t      * <input type=\"number\" [(ngModel)]=\"age\">\n\t      * ```\n\t     */\n\t    var NumberValueAccessor = (function () {\n\t        /**\n\t         * @param {?} _renderer\n\t         * @param {?} _elementRef\n\t         */\n\t        function NumberValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        NumberValueAccessor.prototype.writeValue = function (value) {\n\t            // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n\t            var /** @type {?} */ normalizedValue = value == null ? '' : value;\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        NumberValueAccessor.prototype.registerOnChange = function (fn) {\n\t            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        /**\n\t         * @param {?} isDisabled\n\t         * @return {?}\n\t         */\n\t        NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        NumberValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n\t                        host: {\n\t                            '(change)': 'onChange($event.target.value)',\n\t                            '(input)': 'onChange($event.target.value)',\n\t                            '(blur)': 'onTouched()'\n\t                        },\n\t                        providers: [NUMBER_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NumberValueAccessor.ctorParameters = function () { return [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ]; };\n\t        return NumberValueAccessor;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$2 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function unimplemented() {\n\t        throw new Error('unimplemented');\n\t    }\n\t    /**\n\t     *  A base class that all control directive extend.\n\t      * It binds a {@link FormControl} object to a DOM element.\n\t      * *\n\t      * Used internally by Angular forms.\n\t      * *\n\t     * @abstract\n\t     */\n\t    var NgControl = (function (_super) {\n\t        __extends$2(NgControl, _super);\n\t        function NgControl() {\n\t            _super.apply(this, arguments);\n\t            /** @internal */\n\t            this._parent = null;\n\t            this.name = null;\n\t            this.valueAccessor = null;\n\t            /** @internal */\n\t            this._rawValidators = [];\n\t            /** @internal */\n\t            this._rawAsyncValidators = [];\n\t        }\n\t        Object.defineProperty(NgControl.prototype, \"validator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return (unimplemented()); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgControl.prototype, \"asyncValidator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return (unimplemented()); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @abstract\n\t         * @param {?} newValue\n\t         * @return {?}\n\t         */\n\t        NgControl.prototype.viewToModelUpdate = function (newValue) { };\n\t        return NgControl;\n\t    }(AbstractControlDirective));\n\t\n\t    var /** @type {?} */ RADIO_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return RadioControlValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     *  Internal class used by Angular to uncheck radio buttons with the matching name.\n\t     */\n\t    var RadioControlRegistry = (function () {\n\t        function RadioControlRegistry() {\n\t            this._accessors = [];\n\t        }\n\t        /**\n\t         * @param {?} control\n\t         * @param {?} accessor\n\t         * @return {?}\n\t         */\n\t        RadioControlRegistry.prototype.add = function (control, accessor) {\n\t            this._accessors.push([control, accessor]);\n\t        };\n\t        /**\n\t         * @param {?} accessor\n\t         * @return {?}\n\t         */\n\t        RadioControlRegistry.prototype.remove = function (accessor) {\n\t            for (var /** @type {?} */ i = this._accessors.length - 1; i >= 0; --i) {\n\t                if (this._accessors[i][1] === accessor) {\n\t                    this._accessors.splice(i, 1);\n\t                    return;\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} accessor\n\t         * @return {?}\n\t         */\n\t        RadioControlRegistry.prototype.select = function (accessor) {\n\t            var _this = this;\n\t            this._accessors.forEach(function (c) {\n\t                if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {\n\t                    c[1].fireUncheck(accessor.value);\n\t                }\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} controlPair\n\t         * @param {?} accessor\n\t         * @return {?}\n\t         */\n\t        RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {\n\t            if (!controlPair[0].control)\n\t                return false;\n\t            return controlPair[0]._parent === accessor._control._parent &&\n\t                controlPair[1].name === accessor.name;\n\t        };\n\t        RadioControlRegistry.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        RadioControlRegistry.ctorParameters = function () { return []; };\n\t        return RadioControlRegistry;\n\t    }());\n\t    /**\n\t     *  *\n\t      * Used by {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName}\n\t      * to keep the view synced with the {@link FormControl} model.\n\t      * *\n\t      * *\n\t      * If you have imported the {@link FormsModule} or the {@link ReactiveFormsModule}, this\n\t      * value accessor will be active on any radio control that has a form directive. You do\n\t      * **not** need to add a special selector to activate it.\n\t      * *\n\t      * ### How to use radio buttons with form directives\n\t      * *\n\t      * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons\n\t      * in the same group have the same `name` attribute.  Radio buttons with different `name`\n\t      * attributes do not affect each other.\n\t      * *\n\t      * {@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}\n\t      * *\n\t      * When using radio buttons in a reactive form, radio buttons in the same group should have the\n\t      * same `formControlName`. You can also add a `name` attribute, but it's optional.\n\t      * *\n\t      * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n\t      * *\n\t      * * **npm package**: `@angular/forms`\n\t      * *\n\t      * @stable\n\t     */\n\t    var RadioControlValueAccessor = (function () {\n\t        /**\n\t         * @param {?} _renderer\n\t         * @param {?} _elementRef\n\t         * @param {?} _registry\n\t         * @param {?} _injector\n\t         */\n\t        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            this._registry = _registry;\n\t            this._injector = _injector;\n\t            this.onChange = function () { };\n\t            this.onTouched = function () { };\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype.ngOnInit = function () {\n\t            this._control = this._injector.get(NgControl);\n\t            this._checkName();\n\t            this._registry.add(this._control, this);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype.writeValue = function (value) {\n\t            this._state = value === this.value;\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype.registerOnChange = function (fn) {\n\t            var _this = this;\n\t            this._fn = fn;\n\t            this.onChange = function () {\n\t                fn(_this.value);\n\t                _this._registry.select(_this);\n\t            };\n\t        };\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype.fireUncheck = function (value) { this.writeValue(value); };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        /**\n\t         * @param {?} isDisabled\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype._checkName = function () {\n\t            if (this.name && this.formControlName && this.name !== this.formControlName) {\n\t                this._throwNameError();\n\t            }\n\t            if (!this.name && this.formControlName)\n\t                this.name = this.formControlName;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        RadioControlValueAccessor.prototype._throwNameError = function () {\n\t            throw new Error(\"\\n      If you define both a name and a formControlName attribute on your radio button, their values\\n      must match. Ex: <input type=\\\"radio\\\" formControlName=\\\"food\\\" name=\\\"food\\\">\\n    \");\n\t        };\n\t        RadioControlValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n\t                        host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n\t                        providers: [RADIO_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        RadioControlValueAccessor.ctorParameters = function () { return [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t            { type: RadioControlRegistry, },\n\t            { type: _angular_core.Injector, },\n\t        ]; };\n\t        RadioControlValueAccessor.propDecorators = {\n\t            'name': [{ type: _angular_core.Input },],\n\t            'formControlName': [{ type: _angular_core.Input },],\n\t            'value': [{ type: _angular_core.Input },],\n\t        };\n\t        return RadioControlValueAccessor;\n\t    }());\n\t\n\t    var /** @type {?} */ RANGE_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return RangeValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     *  The accessor for writing a range value and listening to changes that is used by the\n\t      * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n\t      * *\n\t      * ### Example\n\t      * ```\n\t      * <input type=\"range\" [(ngModel)]=\"age\" >\n\t      * ```\n\t     */\n\t    var RangeValueAccessor = (function () {\n\t        /**\n\t         * @param {?} _renderer\n\t         * @param {?} _elementRef\n\t         */\n\t        function RangeValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        RangeValueAccessor.prototype.writeValue = function (value) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        RangeValueAccessor.prototype.registerOnChange = function (fn) {\n\t            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        RangeValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        /**\n\t         * @param {?} isDisabled\n\t         * @return {?}\n\t         */\n\t        RangeValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        RangeValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n\t                        host: {\n\t                            '(change)': 'onChange($event.target.value)',\n\t                            '(input)': 'onChange($event.target.value)',\n\t                            '(blur)': 'onTouched()'\n\t                        },\n\t                        providers: [RANGE_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        RangeValueAccessor.ctorParameters = function () { return [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ]; };\n\t        return RangeValueAccessor;\n\t    }());\n\t\n\t    var /** @type {?} */ SELECT_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return SelectControlValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * @param {?} id\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    function _buildValueString(id, value) {\n\t        if (id == null)\n\t            return \"\" + value;\n\t        if (!isPrimitive(value))\n\t            value = 'Object';\n\t        return (id + \": \" + value).slice(0, 50);\n\t    }\n\t    /**\n\t     * @param {?} valueString\n\t     * @return {?}\n\t     */\n\t    function _extractId(valueString) {\n\t        return valueString.split(':')[0];\n\t    }\n\t    /**\n\t     *  *\n\t      * Used by {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName}\n\t      * to keep the view synced with the {@link FormControl} model.\n\t      * *\n\t      * *\n\t      * If you have imported the {@link FormsModule} or the {@link ReactiveFormsModule}, this\n\t      * value accessor will be active on any select control that has a form directive. You do\n\t      * **not** need to add a special selector to activate it.\n\t      * *\n\t      * ### How to use select controls with form directives\n\t      * *\n\t      * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n\t      * attribute to the main `<select>` tag.\n\t      * *\n\t      * If your option values are simple strings, you can bind to the normal `value` property\n\t      * on the option.  If your option values happen to be objects (and you'd like to save the\n\t      * selection in your form as an object), use `ngValue` instead:\n\t      * *\n\t      * {@example forms/ts/selectControl/select_control_example.ts region='Component'}\n\t      * *\n\t      * In reactive forms, you'll also want to add your form directive (`formControlName` or\n\t      * `formControl`) on the main `<select>` tag. Like in the former example, you have the\n\t      * choice of binding to the  `value` or `ngValue` property on the select's options.\n\t      * *\n\t      * {@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n\t      * *\n\t      * Note: We listen to the 'change' event because 'input' events aren't fired\n\t      * for selects in Firefox and IE:\n\t      * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n\t      * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n\t      * *\n\t      * * **npm package**: `@angular/forms`\n\t      * *\n\t     */\n\t    var SelectControlValueAccessor = (function () {\n\t        /**\n\t         * @param {?} _renderer\n\t         * @param {?} _elementRef\n\t         */\n\t        function SelectControlValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            /** @internal */\n\t            this._optionMap = new Map();\n\t            /** @internal */\n\t            this._idCounter = 0;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        SelectControlValueAccessor.prototype.writeValue = function (value) {\n\t            this.value = value;\n\t            var /** @type {?} */ valueString = _buildValueString(this._getOptionId(value), value);\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        SelectControlValueAccessor.prototype.registerOnChange = function (fn) {\n\t            var _this = this;\n\t            this.onChange = function (valueString) {\n\t                _this.value = valueString;\n\t                fn(_this._getOptionValue(valueString));\n\t            };\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        /**\n\t         * @param {?} isDisabled\n\t         * @return {?}\n\t         */\n\t        SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        SelectControlValueAccessor.prototype._registerOption = function () { return (this._idCounter++).toString(); };\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        SelectControlValueAccessor.prototype._getOptionId = function (value) {\n\t            for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n\t                var id = _a[_i];\n\t                if (looseIdentical(this._optionMap.get(id), value))\n\t                    return id;\n\t            }\n\t            return null;\n\t        };\n\t        /**\n\t         * @param {?} valueString\n\t         * @return {?}\n\t         */\n\t        SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {\n\t            var /** @type {?} */ id = _extractId(valueString);\n\t            return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n\t        };\n\t        SelectControlValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n\t                        host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n\t                        providers: [SELECT_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        SelectControlValueAccessor.ctorParameters = function () { return [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ]; };\n\t        return SelectControlValueAccessor;\n\t    }());\n\t    /**\n\t     *  *\n\t      * *\n\t      * See docs for {@link SelectControlValueAccessor} for usage examples.\n\t      * *\n\t     */\n\t    var NgSelectOption = (function () {\n\t        /**\n\t         * @param {?} _element\n\t         * @param {?} _renderer\n\t         * @param {?} _select\n\t         */\n\t        function NgSelectOption(_element, _renderer, _select) {\n\t            this._element = _element;\n\t            this._renderer = _renderer;\n\t            this._select = _select;\n\t            if (this._select)\n\t                this.id = this._select._registerOption();\n\t        }\n\t        Object.defineProperty(NgSelectOption.prototype, \"ngValue\", {\n\t            /**\n\t             * @param {?} value\n\t             * @return {?}\n\t             */\n\t            set: function (value) {\n\t                if (this._select == null)\n\t                    return;\n\t                this._select._optionMap.set(this.id, value);\n\t                this._setElementValue(_buildValueString(this.id, value));\n\t                this._select.writeValue(this._select.value);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgSelectOption.prototype, \"value\", {\n\t            /**\n\t             * @param {?} value\n\t             * @return {?}\n\t             */\n\t            set: function (value) {\n\t                this._setElementValue(value);\n\t                if (this._select)\n\t                    this._select.writeValue(this._select.value);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        NgSelectOption.prototype._setElementValue = function (value) {\n\t            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgSelectOption.prototype.ngOnDestroy = function () {\n\t            if (this._select) {\n\t                this._select._optionMap.delete(this.id);\n\t                this._select.writeValue(this._select.value);\n\t            }\n\t        };\n\t        NgSelectOption.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgSelectOption.ctorParameters = function () { return [\n\t            { type: _angular_core.ElementRef, },\n\t            { type: _angular_core.Renderer, },\n\t            { type: SelectControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n\t        ]; };\n\t        NgSelectOption.propDecorators = {\n\t            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n\t            'value': [{ type: _angular_core.Input, args: ['value',] },],\n\t        };\n\t        return NgSelectOption;\n\t    }());\n\t\n\t    var /** @type {?} */ SELECT_MULTIPLE_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return SelectMultipleControlValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * @param {?} id\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    function _buildValueString$1(id, value) {\n\t        if (id == null)\n\t            return \"\" + value;\n\t        if (typeof value === 'string')\n\t            value = \"'\" + value + \"'\";\n\t        if (!isPrimitive(value))\n\t            value = 'Object';\n\t        return (id + \": \" + value).slice(0, 50);\n\t    }\n\t    /**\n\t     * @param {?} valueString\n\t     * @return {?}\n\t     */\n\t    function _extractId$1(valueString) {\n\t        return valueString.split(':')[0];\n\t    }\n\t    /**\n\t     *  The accessor for writing a value and listening to changes on a select element.\n\t      * *\n\t     */\n\t    var SelectMultipleControlValueAccessor = (function () {\n\t        /**\n\t         * @param {?} _renderer\n\t         * @param {?} _elementRef\n\t         */\n\t        function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            /** @internal */\n\t            this._optionMap = new Map();\n\t            /** @internal */\n\t            this._idCounter = 0;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {\n\t            var _this = this;\n\t            this.value = value;\n\t            var /** @type {?} */ optionSelectedStateSetter;\n\t            if (Array.isArray(value)) {\n\t                // convert values to ids\n\t                var /** @type {?} */ ids_1 = value.map(function (v) { return _this._getOptionId(v); });\n\t                optionSelectedStateSetter = function (opt, o) { opt._setSelected(ids_1.indexOf(o.toString()) > -1); };\n\t            }\n\t            else {\n\t                optionSelectedStateSetter = function (opt, o) { opt._setSelected(false); };\n\t            }\n\t            this._optionMap.forEach(optionSelectedStateSetter);\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {\n\t            var _this = this;\n\t            this.onChange = function (_) {\n\t                var /** @type {?} */ selected = [];\n\t                if (_.hasOwnProperty('selectedOptions')) {\n\t                    var /** @type {?} */ options = _.selectedOptions;\n\t                    for (var /** @type {?} */ i = 0; i < options.length; i++) {\n\t                        var /** @type {?} */ opt = options.item(i);\n\t                        var /** @type {?} */ val = _this._getOptionValue(opt.value);\n\t                        selected.push(val);\n\t                    }\n\t                }\n\t                else {\n\t                    var /** @type {?} */ options = (_.options);\n\t                    for (var /** @type {?} */ i = 0; i < options.length; i++) {\n\t                        var /** @type {?} */ opt = options.item(i);\n\t                        if (opt.selected) {\n\t                            var /** @type {?} */ val = _this._getOptionValue(opt.value);\n\t                            selected.push(val);\n\t                        }\n\t                    }\n\t                }\n\t                _this.value = selected;\n\t                fn(selected);\n\t            };\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        /**\n\t         * @param {?} isDisabled\n\t         * @return {?}\n\t         */\n\t        SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {\n\t            var /** @type {?} */ id = (this._idCounter++).toString();\n\t            this._optionMap.set(id, value);\n\t            return id;\n\t        };\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {\n\t            for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n\t                var id = _a[_i];\n\t                if (looseIdentical(this._optionMap.get(id)._value, value))\n\t                    return id;\n\t            }\n\t            return null;\n\t        };\n\t        /**\n\t         * @param {?} valueString\n\t         * @return {?}\n\t         */\n\t        SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {\n\t            var /** @type {?} */ id = _extractId$1(valueString);\n\t            return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;\n\t        };\n\t        SelectMultipleControlValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n\t                        host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n\t                        providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        SelectMultipleControlValueAccessor.ctorParameters = function () { return [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ]; };\n\t        return SelectMultipleControlValueAccessor;\n\t    }());\n\t    /**\n\t     *  Marks `<option>` as dynamic, so Angular can be notified when options change.\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * ```\n\t      * <select multiple name=\"city\" ngModel>\n\t      * <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n\t      * </select>\n\t      * ```\n\t     */\n\t    var NgSelectMultipleOption = (function () {\n\t        /**\n\t         * @param {?} _element\n\t         * @param {?} _renderer\n\t         * @param {?} _select\n\t         */\n\t        function NgSelectMultipleOption(_element, _renderer, _select) {\n\t            this._element = _element;\n\t            this._renderer = _renderer;\n\t            this._select = _select;\n\t            if (this._select) {\n\t                this.id = this._select._registerOption(this);\n\t            }\n\t        }\n\t        Object.defineProperty(NgSelectMultipleOption.prototype, \"ngValue\", {\n\t            /**\n\t             * @param {?} value\n\t             * @return {?}\n\t             */\n\t            set: function (value) {\n\t                if (this._select == null)\n\t                    return;\n\t                this._value = value;\n\t                this._setElementValue(_buildValueString$1(this.id, value));\n\t                this._select.writeValue(this._select.value);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgSelectMultipleOption.prototype, \"value\", {\n\t            /**\n\t             * @param {?} value\n\t             * @return {?}\n\t             */\n\t            set: function (value) {\n\t                if (this._select) {\n\t                    this._value = value;\n\t                    this._setElementValue(_buildValueString$1(this.id, value));\n\t                    this._select.writeValue(this._select.value);\n\t                }\n\t                else {\n\t                    this._setElementValue(value);\n\t                }\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        NgSelectMultipleOption.prototype._setElementValue = function (value) {\n\t            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n\t        };\n\t        /**\n\t         * @param {?} selected\n\t         * @return {?}\n\t         */\n\t        NgSelectMultipleOption.prototype._setSelected = function (selected) {\n\t            this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgSelectMultipleOption.prototype.ngOnDestroy = function () {\n\t            if (this._select) {\n\t                this._select._optionMap.delete(this.id);\n\t                this._select.writeValue(this._select.value);\n\t            }\n\t        };\n\t        NgSelectMultipleOption.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgSelectMultipleOption.ctorParameters = function () { return [\n\t            { type: _angular_core.ElementRef, },\n\t            { type: _angular_core.Renderer, },\n\t            { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n\t        ]; };\n\t        NgSelectMultipleOption.propDecorators = {\n\t            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n\t            'value': [{ type: _angular_core.Input, args: ['value',] },],\n\t        };\n\t        return NgSelectMultipleOption;\n\t    }());\n\t\n\t    /**\n\t     * @param {?} name\n\t     * @param {?} parent\n\t     * @return {?}\n\t     */\n\t    function controlPath(name, parent) {\n\t        return parent.path.concat([name]);\n\t    }\n\t    /**\n\t     * @param {?} control\n\t     * @param {?} dir\n\t     * @return {?}\n\t     */\n\t    function setUpControl(control, dir) {\n\t        if (!control)\n\t            _throwError(dir, 'Cannot find control with');\n\t        if (!dir.valueAccessor)\n\t            _throwError(dir, 'No value accessor for form control with');\n\t        control.validator = Validators.compose([control.validator, dir.validator]);\n\t        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n\t        dir.valueAccessor.writeValue(control.value);\n\t        // view -> model\n\t        dir.valueAccessor.registerOnChange(function (newValue) {\n\t            dir.viewToModelUpdate(newValue);\n\t            control.markAsDirty();\n\t            control.setValue(newValue, { emitModelToViewChange: false });\n\t        });\n\t        // touched\n\t        dir.valueAccessor.registerOnTouched(function () { return control.markAsTouched(); });\n\t        control.registerOnChange(function (newValue, emitModelEvent) {\n\t            // control -> view\n\t            dir.valueAccessor.writeValue(newValue);\n\t            // control -> ngModel\n\t            if (emitModelEvent)\n\t                dir.viewToModelUpdate(newValue);\n\t        });\n\t        if (dir.valueAccessor.setDisabledState) {\n\t            control.registerOnDisabledChange(function (isDisabled) { dir.valueAccessor.setDisabledState(isDisabled); });\n\t        }\n\t        // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n\t        dir._rawValidators.forEach(function (validator) {\n\t            if (((validator)).registerOnValidatorChange)\n\t                ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n\t        });\n\t        dir._rawAsyncValidators.forEach(function (validator) {\n\t            if (((validator)).registerOnValidatorChange)\n\t                ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n\t        });\n\t    }\n\t    /**\n\t     * @param {?} control\n\t     * @param {?} dir\n\t     * @return {?}\n\t     */\n\t    function cleanUpControl(control, dir) {\n\t        dir.valueAccessor.registerOnChange(function () { return _noControlError(dir); });\n\t        dir.valueAccessor.registerOnTouched(function () { return _noControlError(dir); });\n\t        dir._rawValidators.forEach(function (validator) {\n\t            if (validator.registerOnValidatorChange) {\n\t                validator.registerOnValidatorChange(null);\n\t            }\n\t        });\n\t        dir._rawAsyncValidators.forEach(function (validator) {\n\t            if (validator.registerOnValidatorChange) {\n\t                validator.registerOnValidatorChange(null);\n\t            }\n\t        });\n\t        if (control)\n\t            control._clearChangeFns();\n\t    }\n\t    /**\n\t     * @param {?} control\n\t     * @param {?} dir\n\t     * @return {?}\n\t     */\n\t    function setUpFormContainer(control, dir) {\n\t        if (isBlank(control))\n\t            _throwError(dir, 'Cannot find control with');\n\t        control.validator = Validators.compose([control.validator, dir.validator]);\n\t        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n\t    }\n\t    /**\n\t     * @param {?} dir\n\t     * @return {?}\n\t     */\n\t    function _noControlError(dir) {\n\t        return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n\t    }\n\t    /**\n\t     * @param {?} dir\n\t     * @param {?} message\n\t     * @return {?}\n\t     */\n\t    function _throwError(dir, message) {\n\t        var /** @type {?} */ messageEnd;\n\t        if (dir.path.length > 1) {\n\t            messageEnd = \"path: '\" + dir.path.join(' -> ') + \"'\";\n\t        }\n\t        else if (dir.path[0]) {\n\t            messageEnd = \"name: '\" + dir.path + \"'\";\n\t        }\n\t        else {\n\t            messageEnd = 'unspecified name attribute';\n\t        }\n\t        throw new Error(message + \" \" + messageEnd);\n\t    }\n\t    /**\n\t     * @param {?} validators\n\t     * @return {?}\n\t     */\n\t    function composeValidators(validators) {\n\t        return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;\n\t    }\n\t    /**\n\t     * @param {?} validators\n\t     * @return {?}\n\t     */\n\t    function composeAsyncValidators(validators) {\n\t        return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n\t            null;\n\t    }\n\t    /**\n\t     * @param {?} changes\n\t     * @param {?} viewModel\n\t     * @return {?}\n\t     */\n\t    function isPropertyUpdated(changes, viewModel) {\n\t        if (!changes.hasOwnProperty('model'))\n\t            return false;\n\t        var /** @type {?} */ change = changes['model'];\n\t        if (change.isFirstChange())\n\t            return true;\n\t        return !looseIdentical(viewModel, change.currentValue);\n\t    }\n\t    var /** @type {?} */ BUILTIN_ACCESSORS = [\n\t        CheckboxControlValueAccessor,\n\t        RangeValueAccessor,\n\t        NumberValueAccessor,\n\t        SelectControlValueAccessor,\n\t        SelectMultipleControlValueAccessor,\n\t        RadioControlValueAccessor,\n\t    ];\n\t    /**\n\t     * @param {?} valueAccessor\n\t     * @return {?}\n\t     */\n\t    function isBuiltInAccessor(valueAccessor) {\n\t        return BUILTIN_ACCESSORS.some(function (a) { return valueAccessor.constructor === a; });\n\t    }\n\t    /**\n\t     * @param {?} dir\n\t     * @param {?} valueAccessors\n\t     * @return {?}\n\t     */\n\t    function selectValueAccessor(dir, valueAccessors) {\n\t        if (!valueAccessors)\n\t            return null;\n\t        var /** @type {?} */ defaultAccessor;\n\t        var /** @type {?} */ builtinAccessor;\n\t        var /** @type {?} */ customAccessor;\n\t        valueAccessors.forEach(function (v) {\n\t            if (v.constructor === DefaultValueAccessor) {\n\t                defaultAccessor = v;\n\t            }\n\t            else if (isBuiltInAccessor(v)) {\n\t                if (builtinAccessor)\n\t                    _throwError(dir, 'More than one built-in value accessor matches form control with');\n\t                builtinAccessor = v;\n\t            }\n\t            else {\n\t                if (customAccessor)\n\t                    _throwError(dir, 'More than one custom value accessor matches form control with');\n\t                customAccessor = v;\n\t            }\n\t        });\n\t        if (customAccessor)\n\t            return customAccessor;\n\t        if (builtinAccessor)\n\t            return builtinAccessor;\n\t        if (defaultAccessor)\n\t            return defaultAccessor;\n\t        _throwError(dir, 'No valid value accessor for form control with');\n\t        return null;\n\t    }\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     *  This is a base class for code shared between {@link NgModelGroup} and {@link FormGroupName}.\n\t      * *\n\t     */\n\t    var AbstractFormGroupDirective = (function (_super) {\n\t        __extends(AbstractFormGroupDirective, _super);\n\t        function AbstractFormGroupDirective() {\n\t            _super.apply(this, arguments);\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractFormGroupDirective.prototype.ngOnInit = function () {\n\t            this._checkParentType();\n\t            this.formDirective.addFormGroup(this);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractFormGroupDirective.prototype.ngOnDestroy = function () {\n\t            if (this.formDirective) {\n\t                this.formDirective.removeFormGroup(this);\n\t            }\n\t        };\n\t        Object.defineProperty(AbstractFormGroupDirective.prototype, \"control\", {\n\t            /**\n\t             *  Get the {@link FormGroup} backing this binding.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.formDirective.getFormGroup(this); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractFormGroupDirective.prototype, \"path\", {\n\t            /**\n\t             *  Get the path to this control group.\n\t             * @return {?}\n\t             */\n\t            get: function () { return controlPath(this.name, this._parent); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractFormGroupDirective.prototype, \"formDirective\", {\n\t            /**\n\t             *  Get the {@link Form} to which this group belongs.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._parent ? this._parent.formDirective : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractFormGroupDirective.prototype, \"validator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return composeValidators(this._validators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractFormGroupDirective.prototype, \"asyncValidator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return composeAsyncValidators(this._asyncValidators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractFormGroupDirective.prototype._checkParentType = function () { };\n\t        return AbstractFormGroupDirective;\n\t    }(ControlContainer));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$3 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var AbstractControlStatus = (function () {\n\t        /**\n\t         * @param {?} cd\n\t         */\n\t        function AbstractControlStatus(cd) {\n\t            this._cd = cd;\n\t        }\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassUntouched\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._cd.control ? this._cd.control.untouched : false; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassTouched\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._cd.control ? this._cd.control.touched : false; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPristine\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._cd.control ? this._cd.control.pristine : false; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassDirty\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._cd.control ? this._cd.control.dirty : false; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassValid\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._cd.control ? this._cd.control.valid : false; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassInvalid\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._cd.control ? this._cd.control.invalid : false; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPending\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._cd.control ? this._cd.control.pending : false; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return AbstractControlStatus;\n\t    }());\n\t    var /** @type {?} */ ngControlStatusHost = {\n\t        '[class.ng-untouched]': 'ngClassUntouched',\n\t        '[class.ng-touched]': 'ngClassTouched',\n\t        '[class.ng-pristine]': 'ngClassPristine',\n\t        '[class.ng-dirty]': 'ngClassDirty',\n\t        '[class.ng-valid]': 'ngClassValid',\n\t        '[class.ng-invalid]': 'ngClassInvalid',\n\t        '[class.ng-pending]': 'ngClassPending',\n\t    };\n\t    /**\n\t     *  Directive automatically applied to Angular form controls that sets CSS classes\n\t      * based on control status (valid/invalid/dirty/etc).\n\t      * *\n\t     */\n\t    var NgControlStatus = (function (_super) {\n\t        __extends$3(NgControlStatus, _super);\n\t        /**\n\t         * @param {?} cd\n\t         */\n\t        function NgControlStatus(cd) {\n\t            _super.call(this, cd);\n\t        }\n\t        NgControlStatus.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgControlStatus.ctorParameters = function () { return [\n\t            { type: NgControl, decorators: [{ type: _angular_core.Self },] },\n\t        ]; };\n\t        return NgControlStatus;\n\t    }(AbstractControlStatus));\n\t    /**\n\t     *  Directive automatically applied to Angular form groups that sets CSS classes\n\t      * based on control status (valid/invalid/dirty/etc).\n\t      * *\n\t     */\n\t    var NgControlStatusGroup = (function (_super) {\n\t        __extends$3(NgControlStatusGroup, _super);\n\t        /**\n\t         * @param {?} cd\n\t         */\n\t        function NgControlStatusGroup(cd) {\n\t            _super.call(this, cd);\n\t        }\n\t        NgControlStatusGroup.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n\t                        host: ngControlStatusHost\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgControlStatusGroup.ctorParameters = function () { return [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Self },] },\n\t        ]; };\n\t        return NgControlStatusGroup;\n\t    }(AbstractControlStatus));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$5 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     *  Use by directives and components to emit custom Events.\n\t      * *\n\t      * ### Examples\n\t      * *\n\t      * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n\t      * title gets clicked:\n\t      * *\n\t      * ```\n\t      * selector: 'zippy',\n\t      * template: `\n\t      * <div class=\"zippy\">\n\t      * <div (click)=\"toggle()\">Toggle</div>\n\t      * <div [hidden]=\"!visible\">\n\t      * <ng-content></ng-content>\n\t      * </div>\n\t      * </div>`})\n\t      * export class Zippy {\n\t      * visible: boolean = true;\n\t      * @Output() open: EventEmitter<any> = new EventEmitter();\n\t      * @Output() close: EventEmitter<any> = new EventEmitter();\n\t      * *\n\t      * toggle() {\n\t      * this.visible = !this.visible;\n\t      * if (this.visible) {\n\t      * this.open.emit(null);\n\t      * } else {\n\t      * this.close.emit(null);\n\t      * }\n\t      * }\n\t      * }\n\t      * ```\n\t      * *\n\t      * The events payload can be accessed by the parameter `$event` on the components output event\n\t      * handler:\n\t      * *\n\t      * ```\n\t      * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n\t      * ```\n\t      * *\n\t      * Uses Rx.Observable but provides an adapter to make it work as specified here:\n\t      * https://github.com/jhusain/observable-spec\n\t      * *\n\t      * Once a reference implementation of the spec is available, switch to it.\n\t     */\n\t    var EventEmitter = (function (_super) {\n\t        __extends$5(EventEmitter, _super);\n\t        /**\n\t         *  Creates an instance of [EventEmitter], which depending on [isAsync],\n\t          * delivers events synchronously or asynchronously.\n\t         * @param {?=} isAsync\n\t         */\n\t        function EventEmitter(isAsync) {\n\t            if (isAsync === void 0) { isAsync = false; }\n\t            _super.call(this);\n\t            this.__isAsync = isAsync;\n\t        }\n\t        /**\n\t         * @param {?=} value\n\t         * @return {?}\n\t         */\n\t        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n\t        /**\n\t         * @param {?=} generatorOrNext\n\t         * @param {?=} error\n\t         * @param {?=} complete\n\t         * @return {?}\n\t         */\n\t        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n\t            var /** @type {?} */ schedulerFn;\n\t            var /** @type {?} */ errorFn = function (err) { return null; };\n\t            var /** @type {?} */ completeFn = function () { return null; };\n\t            if (generatorOrNext && typeof generatorOrNext === 'object') {\n\t                schedulerFn = this.__isAsync ? function (value) {\n\t                    setTimeout(function () { return generatorOrNext.next(value); });\n\t                } : function (value) { generatorOrNext.next(value); };\n\t                if (generatorOrNext.error) {\n\t                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n\t                        function (err) { generatorOrNext.error(err); };\n\t                }\n\t                if (generatorOrNext.complete) {\n\t                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n\t                        function () { generatorOrNext.complete(); };\n\t                }\n\t            }\n\t            else {\n\t                schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n\t                    function (value) { generatorOrNext(value); };\n\t                if (error) {\n\t                    errorFn =\n\t                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n\t                }\n\t                if (complete) {\n\t                    completeFn =\n\t                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n\t                }\n\t            }\n\t            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n\t        };\n\t        return EventEmitter;\n\t    }(rxjs_Subject.Subject));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$6 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n\t     */\n\t    var /** @type {?} */ VALID = 'VALID';\n\t    /**\n\t     * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n\t     */\n\t    var /** @type {?} */ INVALID = 'INVALID';\n\t    /**\n\t     * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n\t     * errors are not yet available for the input value.\n\t     */\n\t    var /** @type {?} */ PENDING = 'PENDING';\n\t    /**\n\t     * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n\t     * calculations of validity or value.\n\t     */\n\t    var /** @type {?} */ DISABLED = 'DISABLED';\n\t    /**\n\t     * @param {?} control\n\t     * @param {?} path\n\t     * @param {?} delimiter\n\t     * @return {?}\n\t     */\n\t    function _find(control, path, delimiter) {\n\t        if (path == null)\n\t            return null;\n\t        if (!(path instanceof Array)) {\n\t            path = ((path)).split(delimiter);\n\t        }\n\t        if (path instanceof Array && (path.length === 0))\n\t            return null;\n\t        return ((path)).reduce(function (v, name) {\n\t            if (v instanceof FormGroup) {\n\t                return v.controls[name] || null;\n\t            }\n\t            if (v instanceof FormArray) {\n\t                return v.at(/** @type {?} */ (name)) || null;\n\t            }\n\t            return null;\n\t        }, control);\n\t    }\n\t    /**\n\t     * @param {?} r\n\t     * @return {?}\n\t     */\n\t    function toObservable(r) {\n\t        return isPromise(r) ? rxjs_observable_fromPromise.fromPromise(r) : r;\n\t    }\n\t    /**\n\t     * @param {?} validator\n\t     * @return {?}\n\t     */\n\t    function coerceToValidator(validator) {\n\t        return Array.isArray(validator) ? composeValidators(validator) : validator;\n\t    }\n\t    /**\n\t     * @param {?} asyncValidator\n\t     * @return {?}\n\t     */\n\t    function coerceToAsyncValidator(asyncValidator) {\n\t        return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;\n\t    }\n\t    /**\n\t     *  {@link FormArray}.\n\t      * *\n\t      * It provides some of the shared behavior that all controls and groups of controls have, like\n\t      * running validators, calculating status, and resetting state. It also defines the properties\n\t      * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n\t      * instantiated directly.\n\t      * *\n\t     * @abstract\n\t     */\n\t    var AbstractControl = (function () {\n\t        /**\n\t         * @param {?} validator\n\t         * @param {?} asyncValidator\n\t         */\n\t        function AbstractControl(validator, asyncValidator) {\n\t            this.validator = validator;\n\t            this.asyncValidator = asyncValidator;\n\t            /** @internal */\n\t            this._onCollectionChange = function () { };\n\t            this._pristine = true;\n\t            this._touched = false;\n\t            /** @internal */\n\t            this._onDisabledChange = [];\n\t        }\n\t        Object.defineProperty(AbstractControl.prototype, \"value\", {\n\t            /**\n\t             *  The value of the control.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._value; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"parent\", {\n\t            /**\n\t             *  The parent control.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._parent; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"status\", {\n\t            /**\n\t             *  The validation status of the control. There are four possible\n\t              * validation statuses:\n\t              * *\n\t              * * **VALID**:  control has passed all validation checks\n\t              * * **INVALID**: control has failed at least one validation check\n\t              * * **PENDING**: control is in the midst of conducting a validation check\n\t              * * **DISABLED**: control is exempt from validation checks\n\t              * *\n\t              * These statuses are mutually exclusive, so a control cannot be\n\t              * both valid AND invalid or invalid AND disabled.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._status; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"valid\", {\n\t            /**\n\t             *  A control is `valid` when its `status === VALID`.\n\t              * *\n\t              * In order to have this status, the control must have passed all its\n\t              * validation checks.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._status === VALID; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"invalid\", {\n\t            /**\n\t             *  A control is `invalid` when its `status === INVALID`.\n\t              * *\n\t              * In order to have this status, the control must have failed\n\t              * at least one of its validation checks.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._status === INVALID; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"pending\", {\n\t            /**\n\t             *  A control is `pending` when its `status === PENDING`.\n\t              * *\n\t              * In order to have this status, the control must be in the\n\t              * middle of conducting a validation check.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._status == PENDING; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"disabled\", {\n\t            /**\n\t             *  A control is `disabled` when its `status === DISABLED`.\n\t              * *\n\t              * Disabled controls are exempt from validation checks and\n\t              * are not included in the aggregate value of their ancestor\n\t              * controls.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._status === DISABLED; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"enabled\", {\n\t            /**\n\t             *  A control is `enabled` as long as its `status !== DISABLED`.\n\t              * *\n\t              * In other words, it has a status of `VALID`, `INVALID`, or\n\t              * `PENDING`.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._status !== DISABLED; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"errors\", {\n\t            /**\n\t             *  Returns any errors generated by failing validation. If there\n\t              * are no errors, it will return null.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._errors; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"pristine\", {\n\t            /**\n\t             *  A control is `pristine` if the user has not yet changed\n\t              * the value in the UI.\n\t              * *\n\t              * Note that programmatic changes to a control's value will\n\t              * *not* mark it dirty.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._pristine; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"dirty\", {\n\t            /**\n\t             *  A control is `dirty` if the user has changed the value\n\t              * in the UI.\n\t              * *\n\t              * Note that programmatic changes to a control's value will\n\t              * *not* mark it dirty.\n\t             * @return {?}\n\t             */\n\t            get: function () { return !this.pristine; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"touched\", {\n\t            /**\n\t             *  A control is marked `touched` once the user has triggered\n\t              * a `blur` event on it.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._touched; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"untouched\", {\n\t            /**\n\t             *  A control is `untouched` if the user has not yet triggered\n\t              * a `blur` event on it.\n\t             * @return {?}\n\t             */\n\t            get: function () { return !this._touched; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"valueChanges\", {\n\t            /**\n\t             *  Emits an event every time the value of the control changes, in\n\t              * the UI or programmatically.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._valueChanges; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"statusChanges\", {\n\t            /**\n\t             *  Emits an event every time the validation status of the control\n\t              * is re-calculated.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._statusChanges; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         *  Sets the synchronous validators that are active on this control.  Calling\n\t          * this will overwrite any existing sync validators.\n\t         * @param {?} newValidator\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.setValidators = function (newValidator) {\n\t            this.validator = coerceToValidator(newValidator);\n\t        };\n\t        /**\n\t         *  Sets the async validators that are active on this control. Calling this\n\t          * will overwrite any existing async validators.\n\t         * @param {?} newValidator\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.setAsyncValidators = function (newValidator) {\n\t            this.asyncValidator = coerceToAsyncValidator(newValidator);\n\t        };\n\t        /**\n\t         *  Empties out the sync validator list.\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.clearValidators = function () { this.validator = null; };\n\t        /**\n\t         *  Empties out the async validator list.\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null; };\n\t        /**\n\t         *  Marks the control as `touched`.\n\t          * *\n\t          * This will also mark all direct ancestors as `touched` to maintain\n\t          * the model.\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.markAsTouched = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._touched = true;\n\t            if (this._parent && !onlySelf) {\n\t                this._parent.markAsTouched({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         *  Marks the control as `untouched`.\n\t          * *\n\t          * If the control has any children, it will also mark all children as `untouched`\n\t          * to maintain the model, and re-calculate the `touched` status of all parent\n\t          * controls.\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.markAsUntouched = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._touched = false;\n\t            this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });\n\t            if (this._parent && !onlySelf) {\n\t                this._parent._updateTouched({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         *  Marks the control as `dirty`.\n\t          * *\n\t          * This will also mark all direct ancestors as `dirty` to maintain\n\t          * the model.\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.markAsDirty = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._pristine = false;\n\t            if (this._parent && !onlySelf) {\n\t                this._parent.markAsDirty({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         *  Marks the control as `pristine`.\n\t          * *\n\t          * If the control has any children, it will also mark all children as `pristine`\n\t          * to maintain the model, and re-calculate the `pristine` status of all parent\n\t          * controls.\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.markAsPristine = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._pristine = true;\n\t            this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });\n\t            if (this._parent && !onlySelf) {\n\t                this._parent._updatePristine({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         *  Marks the control as `pending`.\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.markAsPending = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._status = PENDING;\n\t            if (this._parent && !onlySelf) {\n\t                this._parent.markAsPending({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         *  Disables the control. This means the control will be exempt from validation checks and\n\t          * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n\t          * *\n\t          * If the control has children, all children will be disabled to maintain the model.\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.disable = function (_a) {\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._status = DISABLED;\n\t            this._errors = null;\n\t            this._forEachChild(function (control) { control.disable({ onlySelf: true }); });\n\t            this._updateValue();\n\t            if (emitEvent !== false) {\n\t                this._valueChanges.emit(this._value);\n\t                this._statusChanges.emit(this._status);\n\t            }\n\t            this._updateAncestors(onlySelf);\n\t            this._onDisabledChange.forEach(function (changeFn) { return changeFn(true); });\n\t        };\n\t        /**\n\t         *  Enables the control. This means the control will be included in validation checks and\n\t          * the aggregate value of its parent. Its status is re-calculated based on its value and\n\t          * its validators.\n\t          * *\n\t          * If the control has children, all children will be enabled.\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.enable = function (_a) {\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._status = VALID;\n\t            this._forEachChild(function (control) { control.enable({ onlySelf: true }); });\n\t            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n\t            this._updateAncestors(onlySelf);\n\t            this._onDisabledChange.forEach(function (changeFn) { return changeFn(false); });\n\t        };\n\t        /**\n\t         * @param {?} onlySelf\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._updateAncestors = function (onlySelf) {\n\t            if (this._parent && !onlySelf) {\n\t                this._parent.updateValueAndValidity();\n\t                this._parent._updatePristine();\n\t                this._parent._updateTouched();\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} parent\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };\n\t        /**\n\t         *  Sets the value of the control. Abstract method (implemented in sub-classes).\n\t         * @abstract\n\t         * @param {?} value\n\t         * @param {?=} options\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.setValue = function (value, options) { };\n\t        /**\n\t         *  Patches the value of the control. Abstract method (implemented in sub-classes).\n\t         * @abstract\n\t         * @param {?} value\n\t         * @param {?=} options\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.patchValue = function (value, options) { };\n\t        /**\n\t         *  Resets the control. Abstract method (implemented in sub-classes).\n\t         * @abstract\n\t         * @param {?=} value\n\t         * @param {?=} options\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.reset = function (value, options) { };\n\t        /**\n\t         *  Re-calculates the value and validation status of the control.\n\t          * *\n\t          * By default, it will also update the value and validity of its ancestors.\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.updateValueAndValidity = function (_a) {\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._setInitialStatus();\n\t            this._updateValue();\n\t            if (this.enabled) {\n\t                this._errors = this._runValidator();\n\t                this._status = this._calculateStatus();\n\t                if (this._status === VALID || this._status === PENDING) {\n\t                    this._runAsyncValidator(emitEvent);\n\t                }\n\t            }\n\t            if (emitEvent !== false) {\n\t                this._valueChanges.emit(this._value);\n\t                this._statusChanges.emit(this._status);\n\t            }\n\t            if (this._parent && !onlySelf) {\n\t                this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t            }\n\t        };\n\t        /**\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._updateTreeValidity = function (_a) {\n\t            var emitEvent = (_a === void 0 ? { emitEvent: true } : _a).emitEvent;\n\t            this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity({ emitEvent: emitEvent }); });\n\t            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._setInitialStatus = function () { this._status = this._allControlsDisabled() ? DISABLED : VALID; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._runValidator = function () {\n\t            return this.validator ? this.validator(this) : null;\n\t        };\n\t        /**\n\t         * @param {?} emitEvent\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._runAsyncValidator = function (emitEvent) {\n\t            var _this = this;\n\t            if (this.asyncValidator) {\n\t                this._status = PENDING;\n\t                this._cancelExistingSubscription();\n\t                var /** @type {?} */ obs = toObservable(this.asyncValidator(this));\n\t                this._asyncValidationSubscription =\n\t                    obs.subscribe({ next: function (res) { return _this.setErrors(res, { emitEvent: emitEvent }); } });\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._cancelExistingSubscription = function () {\n\t            if (this._asyncValidationSubscription) {\n\t                this._asyncValidationSubscription.unsubscribe();\n\t            }\n\t        };\n\t        /**\n\t         *  Sets errors on a form control.\n\t          * *\n\t          * This is used when validations are run manually by the user, rather than automatically.\n\t          * *\n\t          * Calling `setErrors` will also update the validity of the parent control.\n\t          * *\n\t          * ### Example\n\t          * *\n\t          * ```\n\t          * const login = new FormControl(\"someLogin\");\n\t          * login.setErrors({\n\t          * \"notUnique\": true\n\t          * });\n\t          * *\n\t          * expect(login.valid).toEqual(false);\n\t          * expect(login.errors).toEqual({\"notUnique\": true});\n\t          * *\n\t          * login.setValue(\"someOtherLogin\");\n\t          * *\n\t          * expect(login.valid).toEqual(true);\n\t          * ```\n\t         * @param {?} errors\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.setErrors = function (errors, _a) {\n\t            var emitEvent = (_a === void 0 ? {} : _a).emitEvent;\n\t            this._errors = errors;\n\t            this._updateControlsErrors(emitEvent !== false);\n\t        };\n\t        /**\n\t         *  Retrieves a child control given the control's name or path.\n\t          * *\n\t          * Paths can be passed in as an array or a string delimited by a dot.\n\t          * *\n\t          * To get a control nested within a `person` sub-group:\n\t          * *\n\t          * * `this.form.get('person.name');`\n\t          * *\n\t          * -OR-\n\t          * *\n\t          * * `this.form.get(['person', 'name']);`\n\t         * @param {?} path\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.get = function (path) { return _find(this, path, '.'); };\n\t        /**\n\t         *  Returns true if the control with the given path has the error specified. Otherwise\n\t          * returns null or undefined.\n\t          * *\n\t          * If no path is given, it checks for the error on the present control.\n\t         * @param {?} errorCode\n\t         * @param {?=} path\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.getError = function (errorCode, path) {\n\t            if (path === void 0) { path = null; }\n\t            var /** @type {?} */ control = path ? this.get(path) : this;\n\t            return control && control._errors ? control._errors[errorCode] : null;\n\t        };\n\t        /**\n\t         *  Returns true if the control with the given path has the error specified. Otherwise\n\t          * returns false.\n\t          * *\n\t          * If no path is given, it checks for the error on the present control.\n\t         * @param {?} errorCode\n\t         * @param {?=} path\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype.hasError = function (errorCode, path) {\n\t            if (path === void 0) { path = null; }\n\t            return !!this.getError(errorCode, path);\n\t        };\n\t        Object.defineProperty(AbstractControl.prototype, \"root\", {\n\t            /**\n\t             *  Retrieves the top-level ancestor of this control.\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                var /** @type {?} */ x = this;\n\t                while (x._parent) {\n\t                    x = x._parent;\n\t                }\n\t                return x;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} emitEvent\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._updateControlsErrors = function (emitEvent) {\n\t            this._status = this._calculateStatus();\n\t            if (emitEvent) {\n\t                this._statusChanges.emit(this._status);\n\t            }\n\t            if (this._parent) {\n\t                this._parent._updateControlsErrors(emitEvent);\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._initObservables = function () {\n\t            this._valueChanges = new EventEmitter();\n\t            this._statusChanges = new EventEmitter();\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._calculateStatus = function () {\n\t            if (this._allControlsDisabled())\n\t                return DISABLED;\n\t            if (this._errors)\n\t                return INVALID;\n\t            if (this._anyControlsHaveStatus(PENDING))\n\t                return PENDING;\n\t            if (this._anyControlsHaveStatus(INVALID))\n\t                return INVALID;\n\t            return VALID;\n\t        };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._updateValue = function () { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} cb\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._forEachChild = function (cb) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} condition\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._anyControls = function (condition) { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._allControlsDisabled = function () { };\n\t        /**\n\t         * @param {?} status\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._anyControlsHaveStatus = function (status) {\n\t            return this._anyControls(function (control) { return control.status === status; });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._anyControlsDirty = function () {\n\t            return this._anyControls(function (control) { return control.dirty; });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._anyControlsTouched = function () {\n\t            return this._anyControls(function (control) { return control.touched; });\n\t        };\n\t        /**\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._updatePristine = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._pristine = !this._anyControlsDirty();\n\t            if (this._parent && !onlySelf) {\n\t                this._parent._updatePristine({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         * @param {?=} __0\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._updateTouched = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._touched = this._anyControlsTouched();\n\t            if (this._parent && !onlySelf) {\n\t                this._parent._updateTouched({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} formState\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._isBoxedValue = function (formState) {\n\t            return typeof formState === 'object' && formState !== null &&\n\t                Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        AbstractControl.prototype._registerOnCollectionChange = function (fn) { this._onCollectionChange = fn; };\n\t        return AbstractControl;\n\t    }());\n\t    /**\n\t     *  *\n\t      * It is one of the three fundamental building blocks of Angular forms, along with\n\t      * {@link FormGroup} and {@link FormArray}.\n\t      * *\n\t      * *\n\t      * When instantiating a {@link FormControl}, you can pass in an initial value as the\n\t      * first argument. Example:\n\t      * *\n\t      * ```ts\n\t      * const ctrl = new FormControl('some value');\n\t      * console.log(ctrl.value);     // 'some value'\n\t      * *```\n\t      * *\n\t      * You can also initialize the control with a form state object on instantiation,\n\t      * which includes both the value and whether or not the control is disabled.\n\t      * You can't use the value key without the disabled key; both are required\n\t      * to use this way of initialization.\n\t      * *\n\t      * ```ts\n\t      * const ctrl = new FormControl({value: 'n/a', disabled: true});\n\t      * console.log(ctrl.value);     // 'n/a'\n\t      * console.log(ctrl.status);   // 'DISABLED'\n\t      * ```\n\t      * *\n\t      * To include a sync validator (or an array of sync validators) with the control,\n\t      * pass it in as the second argument. Async validators are also supported, but\n\t      * have to be passed in separately as the third arg.\n\t      * *\n\t      * ```ts\n\t      * const ctrl = new FormControl('', Validators.required);\n\t      * console.log(ctrl.value);     // ''\n\t      * console.log(ctrl.status);   // 'INVALID'\n\t      * ```\n\t      * *\n\t      * See its superclass, {@link AbstractControl}, for more properties and methods.\n\t      * *\n\t      * * **npm package**: `@angular/forms`\n\t      * *\n\t     */\n\t    var FormControl = (function (_super) {\n\t        __extends$6(FormControl, _super);\n\t        /**\n\t         * @param {?=} formState\n\t         * @param {?=} validator\n\t         * @param {?=} asyncValidator\n\t         */\n\t        function FormControl(formState, validator, asyncValidator) {\n\t            if (formState === void 0) { formState = null; }\n\t            if (validator === void 0) { validator = null; }\n\t            if (asyncValidator === void 0) { asyncValidator = null; }\n\t            _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));\n\t            /** @internal */\n\t            this._onChange = [];\n\t            this._applyFormState(formState);\n\t            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n\t            this._initObservables();\n\t        }\n\t        /**\n\t         *  Set the value of the form control to `value`.\n\t          * *\n\t          * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n\t          * and not its parent component. This defaults to false.\n\t          * *\n\t          * If `emitEvent` is `true`, this\n\t          * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n\t          * to true (as it falls through to `updateValueAndValidity`).\n\t          * *\n\t          * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n\t          * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n\t          * specified.\n\t          * *\n\t          * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n\t          * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n\t         * @param {?} value\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype.setValue = function (value, _a) {\n\t            var _this = this;\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange;\n\t            this._value = value;\n\t            if (this._onChange.length && emitModelToViewChange !== false) {\n\t                this._onChange.forEach(function (changeFn) { return changeFn(_this._value, emitViewToModelChange !== false); });\n\t            }\n\t            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t        };\n\t        /**\n\t         *  Patches the value of a control.\n\t          * *\n\t          * This function is functionally the same as {@link FormControl.setValue} at this level.\n\t          * It exists for symmetry with {@link FormGroup.patchValue} on `FormGroups` and `FormArrays`,\n\t          * where it does behave differently.\n\t         * @param {?} value\n\t         * @param {?=} options\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype.patchValue = function (value, options) {\n\t            if (options === void 0) { options = {}; }\n\t            this.setValue(value, options);\n\t        };\n\t        /**\n\t         *  Resets the form control. This means by default:\n\t          * *\n\t          * * it is marked as `pristine`\n\t          * * it is marked as `untouched`\n\t          * * value is set to null\n\t          * *\n\t          * You can also reset to a specific form state by passing through a standalone\n\t          * value or a form state object that contains both a value and a disabled state\n\t          * (these are the only two properties that cannot be calculated).\n\t          * *\n\t          * Ex:\n\t          * *\n\t          * ```ts\n\t          * this.control.reset('Nancy');\n\t          * *\n\t          * console.log(this.control.value);  // 'Nancy'\n\t          * ```\n\t          * *\n\t          * OR\n\t          * *\n\t          * ```\n\t          * this.control.reset({value: 'Nancy', disabled: true});\n\t          * *\n\t          * console.log(this.control.value);  // 'Nancy'\n\t          * console.log(this.control.status);  // 'DISABLED'\n\t          * ```\n\t         * @param {?=} formState\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype.reset = function (formState, _a) {\n\t            if (formState === void 0) { formState = null; }\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._applyFormState(formState);\n\t            this.markAsPristine({ onlySelf: onlySelf });\n\t            this.markAsUntouched({ onlySelf: onlySelf });\n\t            this.setValue(this._value, { onlySelf: onlySelf, emitEvent: emitEvent });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype._updateValue = function () { };\n\t        /**\n\t         * @param {?} condition\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype._anyControls = function (condition) { return false; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype._allControlsDisabled = function () { return this.disabled; };\n\t        /**\n\t         *  Register a listener for change events.\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype.registerOnChange = function (fn) { this._onChange.push(fn); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype._clearChangeFns = function () {\n\t            this._onChange = [];\n\t            this._onDisabledChange = [];\n\t            this._onCollectionChange = function () { };\n\t        };\n\t        /**\n\t         *  Register a listener for disabled events.\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype.registerOnDisabledChange = function (fn) {\n\t            this._onDisabledChange.push(fn);\n\t        };\n\t        /**\n\t         * @param {?} cb\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype._forEachChild = function (cb) { };\n\t        /**\n\t         * @param {?} formState\n\t         * @return {?}\n\t         */\n\t        FormControl.prototype._applyFormState = function (formState) {\n\t            if (this._isBoxedValue(formState)) {\n\t                this._value = formState.value;\n\t                formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n\t                    this.enable({ onlySelf: true, emitEvent: false });\n\t            }\n\t            else {\n\t                this._value = formState;\n\t            }\n\t        };\n\t        return FormControl;\n\t    }(AbstractControl));\n\t    /**\n\t     *  instances.\n\t      * *\n\t      * A `FormGroup` aggregates the values of each child {@link FormControl} into one object,\n\t      * with each control name as the key.  It calculates its status by reducing the statuses\n\t      * of its children. For example, if one of the controls in a group is invalid, the entire\n\t      * group becomes invalid.\n\t      * *\n\t      * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n\t      * along with {@link FormControl} and {@link FormArray}.\n\t      * *\n\t      * *\n\t      * When instantiating a {@link FormGroup}, pass in a collection of child controls as the first\n\t      * argument. The key for each child will be the name under which it is registered.\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * ```\n\t      * const form = new FormGroup({\n\t      * first: new FormControl('Nancy', Validators.minLength(2)),\n\t      * last: new FormControl('Drew'),\n\t      * });\n\t      * *\n\t      * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n\t      * console.log(form.status);  // 'VALID'\n\t      * ```\n\t      * *\n\t      * You can also include group-level validators as the second arg, or group-level async\n\t      * validators as the third arg. These come in handy when you want to perform validation\n\t      * that considers the value of more than one child control.\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * ```\n\t      * const form = new FormGroup({\n\t      * password: new FormControl('', Validators.minLength(2)),\n\t      * passwordConfirm: new FormControl('', Validators.minLength(2)),\n\t      * }, passwordMatchValidator);\n\t      * *\n\t      * *\n\t      * function passwordMatchValidator(g: FormGroup) {\n\t      * return g.get('password').value === g.get('passwordConfirm').value\n\t      * ? null : {'mismatch': true};\n\t      * }\n\t      * ```\n\t      * *\n\t      * * **npm package**: `@angular/forms`\n\t      * *\n\t     */\n\t    var FormGroup = (function (_super) {\n\t        __extends$6(FormGroup, _super);\n\t        /**\n\t         * @param {?} controls\n\t         * @param {?=} validator\n\t         * @param {?=} asyncValidator\n\t         */\n\t        function FormGroup(controls, validator, asyncValidator) {\n\t            if (validator === void 0) { validator = null; }\n\t            if (asyncValidator === void 0) { asyncValidator = null; }\n\t            _super.call(this, validator, asyncValidator);\n\t            this.controls = controls;\n\t            this._initObservables();\n\t            this._setUpControls();\n\t            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n\t        }\n\t        /**\n\t         *  Registers a control with the group's list of controls.\n\t          * *\n\t          * This method does not update value or validity of the control, so for\n\t          * most cases you'll want to use {@link FormGroup.addControl} instead.\n\t         * @param {?} name\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.registerControl = function (name, control) {\n\t            if (this.controls[name])\n\t                return this.controls[name];\n\t            this.controls[name] = control;\n\t            control.setParent(this);\n\t            control._registerOnCollectionChange(this._onCollectionChange);\n\t            return control;\n\t        };\n\t        /**\n\t         *  Add a control to this group.\n\t         * @param {?} name\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.addControl = function (name, control) {\n\t            this.registerControl(name, control);\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        /**\n\t         *  Remove a control from this group.\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.removeControl = function (name) {\n\t            if (this.controls[name])\n\t                this.controls[name]._registerOnCollectionChange(function () { });\n\t            delete (this.controls[name]);\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        /**\n\t         *  Replace an existing control.\n\t         * @param {?} name\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.setControl = function (name, control) {\n\t            if (this.controls[name])\n\t                this.controls[name]._registerOnCollectionChange(function () { });\n\t            delete (this.controls[name]);\n\t            if (control)\n\t                this.registerControl(name, control);\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        /**\n\t         *  Check whether there is an enabled control with the given name in the group.\n\t          * *\n\t          * It will return false for disabled controls. If you'd like to check for\n\t          * existence in the group only, use {@link AbstractControl.get} instead.\n\t         * @param {?} controlName\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.contains = function (controlName) {\n\t            return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n\t        };\n\t        /**\n\t         *  Sets the value of the {@link FormGroup}. It accepts an object that matches\n\t          * the structure of the group, with control names as keys.\n\t          * *\n\t          * This method performs strict checks, so it will throw an error if you try\n\t          * to set the value of a control that doesn't exist or if you exclude the\n\t          * value of a control.\n\t          * *\n\t          * ### Example\n\t          * *\n\t          * ```\n\t          * const form = new FormGroup({\n\t          * first: new FormControl(),\n\t          * last: new FormControl()\n\t          * });\n\t          * console.log(form.value);   // {first: null, last: null}\n\t          * *\n\t          * form.setValue({first: 'Nancy', last: 'Drew'});\n\t          * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n\t          * *\n\t          * ```\n\t         * @param {?} value\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.setValue = function (value, _a) {\n\t            var _this = this;\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._checkAllValuesPresent(value);\n\t            Object.keys(value).forEach(function (name) {\n\t                _this._throwIfControlMissing(name);\n\t                _this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: emitEvent });\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t        };\n\t        /**\n\t         *  Patches the value of the {@link FormGroup}. It accepts an object with control\n\t          * names as keys, and will do its best to match the values to the correct controls\n\t          * in the group.\n\t          * *\n\t          * It accepts both super-sets and sub-sets of the group without throwing an error.\n\t          * *\n\t          * ### Example\n\t          * *\n\t          * ```\n\t          * const form = new FormGroup({\n\t          * first: new FormControl(),\n\t          * last: new FormControl()\n\t          * });\n\t          * console.log(form.value);   // {first: null, last: null}\n\t          * *\n\t          * form.patchValue({first: 'Nancy'});\n\t          * console.log(form.value);   // {first: 'Nancy', last: null}\n\t          * *\n\t          * ```\n\t         * @param {?} value\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.patchValue = function (value, _a) {\n\t            var _this = this;\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            Object.keys(value).forEach(function (name) {\n\t                if (_this.controls[name]) {\n\t                    _this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: emitEvent });\n\t                }\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t        };\n\t        /**\n\t         *  Resets the {@link FormGroup}. This means by default:\n\t          * *\n\t          * * The group and all descendants are marked `pristine`\n\t          * * The group and all descendants are marked `untouched`\n\t          * * The value of all descendants will be null or null maps\n\t          * *\n\t          * You can also reset to a specific form state by passing in a map of states\n\t          * that matches the structure of your form, with control names as keys. The state\n\t          * can be a standalone value or a form state object with both a value and a disabled\n\t          * status.\n\t          * *\n\t          * ### Example\n\t          * *\n\t          * ```ts\n\t          * this.form.reset({first: 'name', last: 'last name'});\n\t          * *\n\t          * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n\t          * ```\n\t          * *\n\t          * - OR -\n\t          * *\n\t          * ```\n\t          * this.form.reset({\n\t          * first: {value: 'name', disabled: true},\n\t          * last: 'last'\n\t          * });\n\t          * *\n\t          * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n\t          * console.log(this.form.get('first').status);  // 'DISABLED'\n\t          * ```\n\t         * @param {?=} value\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.reset = function (value, _a) {\n\t            if (value === void 0) { value = {}; }\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._forEachChild(function (control, name) {\n\t                control.reset(value[name], { onlySelf: true, emitEvent: emitEvent });\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t            this._updatePristine({ onlySelf: onlySelf });\n\t            this._updateTouched({ onlySelf: onlySelf });\n\t        };\n\t        /**\n\t         *  The aggregate value of the {@link FormGroup}, including any disabled controls.\n\t          * *\n\t          * If you'd like to include all values regardless of disabled status, use this method.\n\t          * Otherwise, the `value` property is the best way to get the value of the group.\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype.getRawValue = function () {\n\t            return this._reduceChildren({}, function (acc, control, name) {\n\t                acc[name] = control.value;\n\t                return acc;\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._throwIfControlMissing = function (name) {\n\t            if (!Object.keys(this.controls).length) {\n\t                throw new Error(\"\\n        There are no form controls registered with this group yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n\t            }\n\t            if (!this.controls[name]) {\n\t                throw new Error(\"Cannot find form control with name: \" + name + \".\");\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} cb\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._forEachChild = function (cb) {\n\t            var _this = this;\n\t            Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k); });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._setUpControls = function () {\n\t            var _this = this;\n\t            this._forEachChild(function (control) {\n\t                control.setParent(_this);\n\t                control._registerOnCollectionChange(_this._onCollectionChange);\n\t            });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };\n\t        /**\n\t         * @param {?} condition\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._anyControls = function (condition) {\n\t            var _this = this;\n\t            var /** @type {?} */ res = false;\n\t            this._forEachChild(function (control, name) {\n\t                res = res || (_this.contains(name) && condition(control));\n\t            });\n\t            return res;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._reduceValue = function () {\n\t            var _this = this;\n\t            return this._reduceChildren({}, function (acc, control, name) {\n\t                if (control.enabled || _this.disabled) {\n\t                    acc[name] = control.value;\n\t                }\n\t                return acc;\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} initValue\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._reduceChildren = function (initValue, fn) {\n\t            var /** @type {?} */ res = initValue;\n\t            this._forEachChild(function (control, name) { res = fn(res, control, name); });\n\t            return res;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._allControlsDisabled = function () {\n\t            for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {\n\t                var controlName = _a[_i];\n\t                if (this.controls[controlName].enabled) {\n\t                    return false;\n\t                }\n\t            }\n\t            return Object.keys(this.controls).length > 0 || this.disabled;\n\t        };\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        FormGroup.prototype._checkAllValuesPresent = function (value) {\n\t            this._forEachChild(function (control, name) {\n\t                if (value[name] === undefined) {\n\t                    throw new Error(\"Must supply a value for form control with name: '\" + name + \"'.\");\n\t                }\n\t            });\n\t        };\n\t        return FormGroup;\n\t    }(AbstractControl));\n\t    /**\n\t     *  instances.\n\t      * *\n\t      * A `FormArray` aggregates the values of each child {@link FormControl} into an array.\n\t      * It calculates its status by reducing the statuses of its children. For example, if one of\n\t      * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n\t      * *\n\t      * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n\t      * along with {@link FormControl} and {@link FormGroup}.\n\t      * *\n\t      * *\n\t      * When instantiating a {@link FormArray}, pass in an array of child controls as the first\n\t      * argument.\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * ```\n\t      * const arr = new FormArray([\n\t      * new FormControl('Nancy', Validators.minLength(2)),\n\t      * new FormControl('Drew'),\n\t      * ]);\n\t      * *\n\t      * console.log(arr.value);   // ['Nancy', 'Drew']\n\t      * console.log(arr.status);  // 'VALID'\n\t      * ```\n\t      * *\n\t      * You can also include array-level validators as the second arg, or array-level async\n\t      * validators as the third arg. These come in handy when you want to perform validation\n\t      * that considers the value of more than one child control.\n\t      * *\n\t      * ### Adding or removing controls\n\t      * *\n\t      * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n\t      * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n\t      * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n\t      * the `FormArray` directly, as that will result in strange and unexpected behavior such\n\t      * as broken change detection.\n\t      * *\n\t      * * **npm package**: `@angular/forms`\n\t      * *\n\t     */\n\t    var FormArray = (function (_super) {\n\t        __extends$6(FormArray, _super);\n\t        /**\n\t         * @param {?} controls\n\t         * @param {?=} validator\n\t         * @param {?=} asyncValidator\n\t         */\n\t        function FormArray(controls, validator, asyncValidator) {\n\t            if (validator === void 0) { validator = null; }\n\t            if (asyncValidator === void 0) { asyncValidator = null; }\n\t            _super.call(this, validator, asyncValidator);\n\t            this.controls = controls;\n\t            this._initObservables();\n\t            this._setUpControls();\n\t            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n\t        }\n\t        /**\n\t         *  Get the {@link AbstractControl} at the given `index` in the array.\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.at = function (index) { return this.controls[index]; };\n\t        /**\n\t         *  Insert a new {@link AbstractControl} at the end of the array.\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.push = function (control) {\n\t            this.controls.push(control);\n\t            this._registerControl(control);\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        /**\n\t         *  Insert a new {@link AbstractControl} at the given `index` in the array.\n\t         * @param {?} index\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.insert = function (index, control) {\n\t            this.controls.splice(index, 0, control);\n\t            this._registerControl(control);\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        /**\n\t         *  Remove the control at the given `index` in the array.\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.removeAt = function (index) {\n\t            if (this.controls[index])\n\t                this.controls[index]._registerOnCollectionChange(function () { });\n\t            this.controls.splice(index, 1);\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        /**\n\t         *  Replace an existing control.\n\t         * @param {?} index\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.setControl = function (index, control) {\n\t            if (this.controls[index])\n\t                this.controls[index]._registerOnCollectionChange(function () { });\n\t            this.controls.splice(index, 1);\n\t            if (control) {\n\t                this.controls.splice(index, 0, control);\n\t                this._registerControl(control);\n\t            }\n\t            this.updateValueAndValidity();\n\t            this._onCollectionChange();\n\t        };\n\t        Object.defineProperty(FormArray.prototype, \"length\", {\n\t            /**\n\t             *  Length of the control array.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.controls.length; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         *  Sets the value of the {@link FormArray}. It accepts an array that matches\n\t          * the structure of the control.\n\t          * *\n\t          * This method performs strict checks, so it will throw an error if you try\n\t          * to set the value of a control that doesn't exist or if you exclude the\n\t          * value of a control.\n\t          * *\n\t          * ### Example\n\t          * *\n\t          * ```\n\t          * const arr = new FormArray([\n\t          * new FormControl(),\n\t          * new FormControl()\n\t          * ]);\n\t          * console.log(arr.value);   // [null, null]\n\t          * *\n\t          * arr.setValue(['Nancy', 'Drew']);\n\t          * console.log(arr.value);   // ['Nancy', 'Drew']\n\t          * ```\n\t         * @param {?} value\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.setValue = function (value, _a) {\n\t            var _this = this;\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._checkAllValuesPresent(value);\n\t            value.forEach(function (newValue, index) {\n\t                _this._throwIfControlMissing(index);\n\t                _this.at(index).setValue(newValue, { onlySelf: true, emitEvent: emitEvent });\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t        };\n\t        /**\n\t         *  Patches the value of the {@link FormArray}. It accepts an array that matches the\n\t          * structure of the control, and will do its best to match the values to the correct\n\t          * controls in the group.\n\t          * *\n\t          * It accepts both super-sets and sub-sets of the array without throwing an error.\n\t          * *\n\t          * ### Example\n\t          * *\n\t          * ```\n\t          * const arr = new FormArray([\n\t          * new FormControl(),\n\t          * new FormControl()\n\t          * ]);\n\t          * console.log(arr.value);   // [null, null]\n\t          * *\n\t          * arr.patchValue(['Nancy']);\n\t          * console.log(arr.value);   // ['Nancy', null]\n\t          * ```\n\t         * @param {?} value\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.patchValue = function (value, _a) {\n\t            var _this = this;\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            value.forEach(function (newValue, index) {\n\t                if (_this.at(index)) {\n\t                    _this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: emitEvent });\n\t                }\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t        };\n\t        /**\n\t         *  Resets the {@link FormArray}. This means by default:\n\t          * *\n\t          * * The array and all descendants are marked `pristine`\n\t          * * The array and all descendants are marked `untouched`\n\t          * * The value of all descendants will be null or null maps\n\t          * *\n\t          * You can also reset to a specific form state by passing in an array of states\n\t          * that matches the structure of the control. The state can be a standalone value\n\t          * or a form state object with both a value and a disabled status.\n\t          * *\n\t          * ### Example\n\t          * *\n\t          * ```ts\n\t          * this.arr.reset(['name', 'last name']);\n\t          * *\n\t          * console.log(this.arr.value);  // ['name', 'last name']\n\t          * ```\n\t          * *\n\t          * - OR -\n\t          * *\n\t          * ```\n\t          * this.arr.reset([\n\t          * {value: 'name', disabled: true},\n\t          * 'last'\n\t          * ]);\n\t          * *\n\t          * console.log(this.arr.value);  // ['name', 'last name']\n\t          * console.log(this.arr.get(0).status);  // 'DISABLED'\n\t          * ```\n\t         * @param {?=} value\n\t         * @param {?=} __1\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.reset = function (value, _a) {\n\t            if (value === void 0) { value = []; }\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._forEachChild(function (control, index) {\n\t                control.reset(value[index], { onlySelf: true, emitEvent: emitEvent });\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t            this._updatePristine({ onlySelf: onlySelf });\n\t            this._updateTouched({ onlySelf: onlySelf });\n\t        };\n\t        /**\n\t         *  The aggregate value of the array, including any disabled controls.\n\t          * *\n\t          * If you'd like to include all values regardless of disabled status, use this method.\n\t          * Otherwise, the `value` property is the best way to get the value of the array.\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype.getRawValue = function () { return this.controls.map(function (control) { return control.value; }); };\n\t        /**\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype._throwIfControlMissing = function (index) {\n\t            if (!this.controls.length) {\n\t                throw new Error(\"\\n        There are no form controls registered with this array yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n\t            }\n\t            if (!this.at(index)) {\n\t                throw new Error(\"Cannot find form control at index \" + index);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} cb\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype._forEachChild = function (cb) {\n\t            this.controls.forEach(function (control, index) { cb(control, index); });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype._updateValue = function () {\n\t            var _this = this;\n\t            this._value = this.controls.filter(function (control) { return control.enabled || _this.disabled; })\n\t                .map(function (control) { return control.value; });\n\t        };\n\t        /**\n\t         * @param {?} condition\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype._anyControls = function (condition) {\n\t            return this.controls.some(function (control) { return control.enabled && condition(control); });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype._setUpControls = function () {\n\t            var _this = this;\n\t            this._forEachChild(function (control) { return _this._registerControl(control); });\n\t        };\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype._checkAllValuesPresent = function (value) {\n\t            this._forEachChild(function (control, i) {\n\t                if (value[i] === undefined) {\n\t                    throw new Error(\"Must supply a value for form control at index: \" + i + \".\");\n\t                }\n\t            });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype._allControlsDisabled = function () {\n\t            for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {\n\t                var control = _a[_i];\n\t                if (control.enabled)\n\t                    return false;\n\t            }\n\t            return this.controls.length > 0 || this.disabled;\n\t        };\n\t        /**\n\t         * @param {?} control\n\t         * @return {?}\n\t         */\n\t        FormArray.prototype._registerControl = function (control) {\n\t            control.setParent(this);\n\t            control._registerOnCollectionChange(this._onCollectionChange);\n\t        };\n\t        return FormArray;\n\t    }(AbstractControl));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$4 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ formDirectiveProvider = {\n\t        provide: ControlContainer,\n\t        useExisting: _angular_core.forwardRef(function () { return NgForm; })\n\t    };\n\t    var /** @type {?} */ resolvedPromise = Promise.resolve(null);\n\t    /**\n\t     *  to track aggregate form value and validation status.\n\t      * *\n\t      * *\n\t      * As soon as you import the `FormsModule`, this directive becomes active by default on\n\t      * all `<form>` tags.  You don't need to add a special selector.\n\t      * *\n\t      * You can export the directive into a local template variable using `ngForm` as the key\n\t      * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n\t      * {@link FormGroup} instance are duplicated on the directive itself, so a reference to it\n\t      * will give you access to the aggregate value and validity status of the form, as well as\n\t      * user interaction properties like `dirty` and `touched`.\n\t      * *\n\t      * To register child controls with the form, you'll want to use {@link NgModel} with a\n\t      * `name` attribute.  You can also use {@link NgModelGroup} if you'd like to create\n\t      * sub-groups within the form.\n\t      * *\n\t      * You can listen to the directive's `ngSubmit` event to be notified when the user has\n\t      * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n\t      * submission event.\n\t      * *\n\t      * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n\t      * *\n\t      * * **npm package**: `@angular/forms`\n\t      * *\n\t      * * **NgModule**: `FormsModule`\n\t      * *\n\t      * @stable\n\t     */\n\t    var NgForm = (function (_super) {\n\t        __extends$4(NgForm, _super);\n\t        /**\n\t         * @param {?} validators\n\t         * @param {?} asyncValidators\n\t         */\n\t        function NgForm(validators, asyncValidators) {\n\t            _super.call(this);\n\t            this._submitted = false;\n\t            this.ngSubmit = new EventEmitter();\n\t            this.form =\n\t                new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n\t        }\n\t        Object.defineProperty(NgForm.prototype, \"submitted\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._submitted; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgForm.prototype, \"formDirective\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgForm.prototype, \"control\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.form; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgForm.prototype, \"path\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return []; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgForm.prototype, \"controls\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.form.controls; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.addControl = function (dir) {\n\t            var _this = this;\n\t            resolvedPromise.then(function () {\n\t                var /** @type {?} */ container = _this._findContainer(dir.path);\n\t                dir._control = (container.registerControl(dir.name, dir.control));\n\t                setUpControl(dir.control, dir);\n\t                dir.control.updateValueAndValidity({ emitEvent: false });\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.removeControl = function (dir) {\n\t            var _this = this;\n\t            resolvedPromise.then(function () {\n\t                var /** @type {?} */ container = _this._findContainer(dir.path);\n\t                if (container) {\n\t                    container.removeControl(dir.name);\n\t                }\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.addFormGroup = function (dir) {\n\t            var _this = this;\n\t            resolvedPromise.then(function () {\n\t                var /** @type {?} */ container = _this._findContainer(dir.path);\n\t                var /** @type {?} */ group = new FormGroup({});\n\t                setUpFormContainer(group, dir);\n\t                container.registerControl(dir.name, group);\n\t                group.updateValueAndValidity({ emitEvent: false });\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.removeFormGroup = function (dir) {\n\t            var _this = this;\n\t            resolvedPromise.then(function () {\n\t                var /** @type {?} */ container = _this._findContainer(dir.path);\n\t                if (container) {\n\t                    container.removeControl(dir.name);\n\t                }\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };\n\t        /**\n\t         * @param {?} dir\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.updateModel = function (dir, value) {\n\t            var _this = this;\n\t            resolvedPromise.then(function () {\n\t                var /** @type {?} */ ctrl = (_this.form.get(dir.path));\n\t                ctrl.setValue(value);\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.setValue = function (value) { this.control.setValue(value); };\n\t        /**\n\t         * @param {?} $event\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.onSubmit = function ($event) {\n\t            this._submitted = true;\n\t            this.ngSubmit.emit($event);\n\t            return false;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.onReset = function () { this.resetForm(); };\n\t        /**\n\t         * @param {?=} value\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype.resetForm = function (value) {\n\t            if (value === void 0) { value = undefined; }\n\t            this.form.reset(value);\n\t            this._submitted = false;\n\t        };\n\t        /**\n\t         * @param {?} path\n\t         * @return {?}\n\t         */\n\t        NgForm.prototype._findContainer = function (path) {\n\t            path.pop();\n\t            return path.length ? (this.form.get(path)) : this.form;\n\t        };\n\t        NgForm.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n\t                        providers: [formDirectiveProvider],\n\t                        host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n\t                        outputs: ['ngSubmit'],\n\t                        exportAs: 'ngForm'\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgForm.ctorParameters = function () { return [\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t        ]; };\n\t        return NgForm;\n\t    }(ControlContainer));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var /** @type {?} */ Examples = {\n\t        formControlName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <input formControlName=\\\"firstName\\\">\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       firstName: new FormControl()\\n    });\",\n\t        formGroupName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <div formGroupName=\\\"person\\\">\\n          <input formControlName=\\\"firstName\\\">\\n       </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       person: new FormGroup({ firstName: new FormControl() })\\n    });\",\n\t        formArrayName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <div formArrayName=\\\"cities\\\">\\n        <div *ngFor=\\\"let city of cityArray.controls; let i=index\\\">\\n          <input [formControlName]=\\\"i\\\">\\n        </div>\\n      </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.cityArray = new FormArray([new FormControl('SF')]);\\n    this.myGroup = new FormGroup({\\n      cities: this.cityArray\\n    });\",\n\t        ngModelGroup: \"\\n    <form>\\n       <div ngModelGroup=\\\"person\\\">\\n          <input [(ngModel)]=\\\"person.name\\\" name=\\\"firstName\\\">\\n       </div>\\n    </form>\",\n\t        ngModelWithFormGroup: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <input formControlName=\\\"firstName\\\">\\n       <input [(ngModel)]=\\\"showMoreControls\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n    </div>\\n  \"\n\t    };\n\t\n\t    var TemplateDrivenErrors = (function () {\n\t        function TemplateDrivenErrors() {\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        TemplateDrivenErrors.modelParentException = function () {\n\t            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\\n      formGroup's partner directive \\\"formControlName\\\" instead.  Example:\\n\\n      \" + Examples.formControlName + \"\\n\\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\\n\\n      Example:\\n\\n      \" + Examples.ngModelWithFormGroup);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        TemplateDrivenErrors.formGroupNameException = function () {\n\t            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\\n\\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        TemplateDrivenErrors.missingNameException = function () {\n\t            throw new Error(\"If ngModel is used within a form tag, either the name attribute must be set or the form\\n      control must be defined as 'standalone' in ngModelOptions.\\n\\n      Example 1: <input [(ngModel)]=\\\"person.firstName\\\" name=\\\"first\\\">\\n      Example 2: <input [(ngModel)]=\\\"person.firstName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\");\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        TemplateDrivenErrors.modelGroupParentException = function () {\n\t            throw new Error(\"\\n      ngModelGroup cannot be used with a parent formGroup directive.\\n\\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n\t        };\n\t        return TemplateDrivenErrors;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$8 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ modelGroupProvider = {\n\t        provide: ControlContainer,\n\t        useExisting: _angular_core.forwardRef(function () { return NgModelGroup; })\n\t    };\n\t    /**\n\t     *  *\n\t      * *\n\t      * This directive can only be used as a child of {@link NgForm} (or in other words,\n\t      * within `<form>` tags).\n\t      * *\n\t      * Use this directive if you'd like to create a sub-group within a form. This can\n\t      * come in handy if you want to validate a sub-group of your form separately from\n\t      * the rest of your form, or if some values in your domain model make more sense to\n\t      * consume together in a nested object.\n\t      * *\n\t      * Pass in the name you'd like this sub-group to have and it will become the key\n\t      * for the sub-group in the form's full value. You can also export the directive into\n\t      * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n\t      * *\n\t      * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n\t      * *\n\t      * * **npm package**: `@angular/forms`\n\t      * *\n\t      * * **NgModule**: `FormsModule`\n\t      * *\n\t     */\n\t    var NgModelGroup = (function (_super) {\n\t        __extends$8(NgModelGroup, _super);\n\t        /**\n\t         * @param {?} parent\n\t         * @param {?} validators\n\t         * @param {?} asyncValidators\n\t         */\n\t        function NgModelGroup(parent, validators, asyncValidators) {\n\t            _super.call(this);\n\t            this._parent = parent;\n\t            this._validators = validators;\n\t            this._asyncValidators = asyncValidators;\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModelGroup.prototype._checkParentType = function () {\n\t            if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n\t                TemplateDrivenErrors.modelGroupParentException();\n\t            }\n\t        };\n\t        NgModelGroup.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgModelGroup.ctorParameters = function () { return [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t        ]; };\n\t        NgModelGroup.propDecorators = {\n\t            'name': [{ type: _angular_core.Input, args: ['ngModelGroup',] },],\n\t        };\n\t        return NgModelGroup;\n\t    }(AbstractFormGroupDirective));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$7 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ formControlBinding = {\n\t        provide: NgControl,\n\t        useExisting: _angular_core.forwardRef(function () { return NgModel; })\n\t    };\n\t    /**\n\t     * `ngModel` forces an additional change detection run when its inputs change:\n\t     * E.g.:\n\t     * ```\n\t     * <div>{{myModel.valid}}</div>\n\t     * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n\t     * ```\n\t     * I.e. `ngModel` can export itself on the element and then be used in the template.\n\t     * Normally, this would result in expressions before the `input` that use the exported directive\n\t     * to have and old value as they have been\n\t     * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n\t     * detection run.\n\t     *\n\t     * Notes:\n\t     * - this is just one extra run no matter how many `ngModel` have been changed.\n\t     * - this is a general problem when using `exportAs` for directives!\n\t     */\n\t    var /** @type {?} */ resolvedPromise$1 = Promise.resolve(null);\n\t    /**\n\t     *  to a form control element.\n\t      * *\n\t      * The {@link FormControl} instance will track the value, user interaction, and\n\t      * validation status of the control and keep the view synced with the model. If used\n\t      * within a parent form, the directive will also register itself with the form as a child\n\t      * control.\n\t      * *\n\t      * *\n\t      * This directive can be used by itself or as part of a larger form. All you need is the\n\t      * `ngModel` selector to activate it.\n\t      * *\n\t      * It accepts a domain model as an optional {@link @Input}. If you have a one-way binding\n\t      * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n\t      * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n\t      * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n\t      * the domain model in your class as well.\n\t      * *\n\t      * If you wish to inspect the properties of the associated {@link FormControl} (like\n\t      * validity state), you can also export the directive into a local template variable using\n\t      * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n\t      * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n\t      * will fall through to the control anyway, so you can access them directly. You can see a\n\t      * full list of properties directly available in {@link AbstractControlDirective}.\n\t      * *\n\t      * The following is an example of a simple standalone control using `ngModel`:\n\t      * *\n\t      * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n\t      * *\n\t      * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n\t      * so that the control can be registered with the parent form under that name.\n\t      * *\n\t      * It's worth noting that in the context of a parent form, you often can skip one-way or\n\t      * two-way binding because the parent form will sync the value for you. You can access\n\t      * its properties by exporting it into a local template variable using `ngForm` (ex:\n\t      * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n\t      * *\n\t      * If you do need to populate initial values into your form, using a one-way binding for\n\t      * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n\t      * than the domain model's value on submit.\n\t      * *\n\t      * Take a look at an example of using `ngModel` within a form:\n\t      * *\n\t      * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n\t      * *\n\t      * To see `ngModel` examples with different form control types, see:\n\t      * *\n\t      * * Radio buttons: {@link RadioControlValueAccessor}\n\t      * * Selects: {@link SelectControlValueAccessor}\n\t      * *\n\t      * **npm package**: `@angular/forms`\n\t      * *\n\t      * **NgModule**: `FormsModule`\n\t      * *\n\t      * @stable\n\t     */\n\t    var NgModel = (function (_super) {\n\t        __extends$7(NgModel, _super);\n\t        /**\n\t         * @param {?} parent\n\t         * @param {?} validators\n\t         * @param {?} asyncValidators\n\t         * @param {?} valueAccessors\n\t         */\n\t        function NgModel(parent, validators, asyncValidators, valueAccessors) {\n\t            _super.call(this);\n\t            /** @internal */\n\t            this._control = new FormControl();\n\t            /** @internal */\n\t            this._registered = false;\n\t            this.update = new EventEmitter();\n\t            this._parent = parent;\n\t            this._rawValidators = validators || [];\n\t            this._rawAsyncValidators = asyncValidators || [];\n\t            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n\t        }\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype.ngOnChanges = function (changes) {\n\t            this._checkForErrors();\n\t            if (!this._registered)\n\t                this._setUpControl();\n\t            if ('isDisabled' in changes) {\n\t                this._updateDisabled(changes);\n\t            }\n\t            if (isPropertyUpdated(changes, this.viewModel)) {\n\t                this._updateValue(this.model);\n\t                this.viewModel = this.model;\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this); };\n\t        Object.defineProperty(NgModel.prototype, \"control\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._control; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgModel.prototype, \"path\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return this._parent ? controlPath(this.name, this._parent) : [this.name];\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgModel.prototype, \"formDirective\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._parent ? this._parent.formDirective : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgModel.prototype, \"validator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return composeValidators(this._rawValidators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgModel.prototype, \"asyncValidator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return composeAsyncValidators(this._rawAsyncValidators);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} newValue\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype.viewToModelUpdate = function (newValue) {\n\t            this.viewModel = newValue;\n\t            this.update.emit(newValue);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype._setUpControl = function () {\n\t            this._isStandalone() ? this._setUpStandalone() :\n\t                this.formDirective.addControl(this);\n\t            this._registered = true;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype._isStandalone = function () {\n\t            return !this._parent || (this.options && this.options.standalone);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype._setUpStandalone = function () {\n\t            setUpControl(this._control, this);\n\t            this._control.updateValueAndValidity({ emitEvent: false });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype._checkForErrors = function () {\n\t            if (!this._isStandalone()) {\n\t                this._checkParentType();\n\t            }\n\t            this._checkName();\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype._checkParentType = function () {\n\t            if (!(this._parent instanceof NgModelGroup) &&\n\t                this._parent instanceof AbstractFormGroupDirective) {\n\t                TemplateDrivenErrors.formGroupNameException();\n\t            }\n\t            else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n\t                TemplateDrivenErrors.modelParentException();\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype._checkName = function () {\n\t            if (this.options && this.options.name)\n\t                this.name = this.options.name;\n\t            if (!this._isStandalone() && !this.name) {\n\t                TemplateDrivenErrors.missingNameException();\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype._updateValue = function (value) {\n\t            var _this = this;\n\t            resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });\n\t        };\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        NgModel.prototype._updateDisabled = function (changes) {\n\t            var _this = this;\n\t            var /** @type {?} */ disabledValue = changes['isDisabled'].currentValue;\n\t            var /** @type {?} */ isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');\n\t            resolvedPromise$1.then(function () {\n\t                if (isDisabled && !_this.control.disabled) {\n\t                    _this.control.disable();\n\t                }\n\t                else if (!isDisabled && _this.control.disabled) {\n\t                    _this.control.enable();\n\t                }\n\t            });\n\t        };\n\t        NgModel.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[ngModel]:not([formControlName]):not([formControl])',\n\t                        providers: [formControlBinding],\n\t                        exportAs: 'ngModel'\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgModel.ctorParameters = function () { return [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n\t        ]; };\n\t        NgModel.propDecorators = {\n\t            'name': [{ type: _angular_core.Input },],\n\t            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n\t            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n\t            'options': [{ type: _angular_core.Input, args: ['ngModelOptions',] },],\n\t            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n\t        };\n\t        return NgModel;\n\t    }(NgControl));\n\t\n\t    var ReactiveErrors = (function () {\n\t        function ReactiveErrors() {\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ReactiveErrors.controlParentException = function () {\n\t            throw new Error(\"formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formControlName);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ReactiveErrors.ngModelGroupException = function () {\n\t            throw new Error(\"formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\\n       that also have a \\\"form\\\" prefix: formGroupName, formArrayName, or formGroup.\\n\\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\\n\\n        \" + Examples.formGroupName + \"\\n\\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\\n\\n        \" + Examples.ngModelGroup);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ReactiveErrors.missingFormException = function () {\n\t            throw new Error(\"formGroup expects a FormGroup instance. Please pass one in.\\n\\n       Example:\\n\\n       \" + Examples.formControlName);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ReactiveErrors.groupParentException = function () {\n\t            throw new Error(\"formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n      directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formGroupName);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ReactiveErrors.arrayParentException = function () {\n\t            throw new Error(\"formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n        Example:\\n\\n        \" + Examples.formArrayName);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ReactiveErrors.disabledAttrWarning = function () {\n\t            console.warn(\"\\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\\n      you. We recommend using this approach to avoid 'changed after checked' errors.\\n       \\n      Example: \\n      form = new FormGroup({\\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\\n        last: new FormControl('Drew', Validators.required)\\n      });\\n    \");\n\t        };\n\t        return ReactiveErrors;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$9 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ formControlBinding$1 = {\n\t        provide: NgControl,\n\t        useExisting: _angular_core.forwardRef(function () { return FormControlDirective; })\n\t    };\n\t    /**\n\t     *  *\n\t      * In other words, this directive ensures that any values written to the {@link FormControl}\n\t      * instance programmatically will be written to the DOM element (model -> view). Conversely,\n\t      * any values written to the DOM element through user input will be reflected in the\n\t      * {@link FormControl} instance (view -> model).\n\t      * *\n\t      * *\n\t      * Use this directive if you'd like to create and manage a {@link FormControl} instance directly.\n\t      * Simply create a {@link FormControl}, save it to your component class, and pass it into the\n\t      * {@link FormControlDirective}.\n\t      * *\n\t      * This directive is designed to be used as a standalone control.  Unlike {@link FormControlName},\n\t      * it does not require that your {@link FormControl} instance be part of any parent\n\t      * {@link FormGroup}, and it won't be registered to any {@link FormGroupDirective} that\n\t      * exists above it.\n\t      * *\n\t      * **Get the value**: the `value` property is always synced and available on the\n\t      * {@link FormControl} instance. See a full list of available properties in\n\t      * {@link AbstractControl}.\n\t      * *\n\t      * **Set the value**: You can pass in an initial value when instantiating the {@link FormControl},\n\t      * or you can set it programmatically later using {@link AbstractControl.setValue} or\n\t      * {@link AbstractControl.patchValue}.\n\t      * *\n\t      * **Listen to value**: If you want to listen to changes in the value of the control, you can\n\t      * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n\t      * {@link AbstractControl.statusChanges} to be notified when the validation status is\n\t      * re-calculated.\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n\t      * *\n\t      * * **npm package**: `@angular/forms`\n\t      * *\n\t      * * **NgModule**: `ReactiveFormsModule`\n\t      * *\n\t      * @stable\n\t     */\n\t    var FormControlDirective = (function (_super) {\n\t        __extends$9(FormControlDirective, _super);\n\t        /**\n\t         * @param {?} validators\n\t         * @param {?} asyncValidators\n\t         * @param {?} valueAccessors\n\t         */\n\t        function FormControlDirective(validators, asyncValidators, valueAccessors) {\n\t            _super.call(this);\n\t            this.update = new EventEmitter();\n\t            this._rawValidators = validators || [];\n\t            this._rawAsyncValidators = asyncValidators || [];\n\t            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n\t        }\n\t        Object.defineProperty(FormControlDirective.prototype, \"isDisabled\", {\n\t            /**\n\t             * @param {?} isDisabled\n\t             * @return {?}\n\t             */\n\t            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        FormControlDirective.prototype.ngOnChanges = function (changes) {\n\t            if (this._isControlChanged(changes)) {\n\t                setUpControl(this.form, this);\n\t                if (this.control.disabled && this.valueAccessor.setDisabledState) {\n\t                    this.valueAccessor.setDisabledState(true);\n\t                }\n\t                this.form.updateValueAndValidity({ emitEvent: false });\n\t            }\n\t            if (isPropertyUpdated(changes, this.viewModel)) {\n\t                this.form.setValue(this.model);\n\t                this.viewModel = this.model;\n\t            }\n\t        };\n\t        Object.defineProperty(FormControlDirective.prototype, \"path\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return []; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlDirective.prototype, \"validator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return composeValidators(this._rawValidators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlDirective.prototype, \"asyncValidator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return composeAsyncValidators(this._rawAsyncValidators);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlDirective.prototype, \"control\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.form; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} newValue\n\t         * @return {?}\n\t         */\n\t        FormControlDirective.prototype.viewToModelUpdate = function (newValue) {\n\t            this.viewModel = newValue;\n\t            this.update.emit(newValue);\n\t        };\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        FormControlDirective.prototype._isControlChanged = function (changes) {\n\t            return changes.hasOwnProperty('form');\n\t        };\n\t        FormControlDirective.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormControlDirective.ctorParameters = function () { return [\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n\t        ]; };\n\t        FormControlDirective.propDecorators = {\n\t            'form': [{ type: _angular_core.Input, args: ['formControl',] },],\n\t            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n\t            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n\t            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n\t        };\n\t        return FormControlDirective;\n\t    }(NgControl));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$11 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ formDirectiveProvider$1 = {\n\t        provide: ControlContainer,\n\t        useExisting: _angular_core.forwardRef(function () { return FormGroupDirective; })\n\t    };\n\t    /**\n\t     *  *\n\t      * *\n\t      * This directive accepts an existing {@link FormGroup} instance. It will then use this\n\t      * {@link FormGroup} instance to match any child {@link FormControl}, {@link FormGroup},\n\t      * and {@link FormArray} instances to child {@link FormControlName}, {@link FormGroupName},\n\t      * and {@link FormArrayName} directives.\n\t      * *\n\t      * **Set value**: You can set the form's initial value when instantiating the\n\t      * {@link FormGroup}, or you can set it programmatically later using the {@link FormGroup}'s\n\t      * {@link AbstractControl.setValue} or {@link AbstractControl.patchValue} methods.\n\t      * *\n\t      * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n\t      * to the {@link FormGroup}'s {@link AbstractControl.valueChanges} event.  You can also listen to\n\t      * its {@link AbstractControl.statusChanges} event to be notified when the validation status is\n\t      * re-calculated.\n\t      * *\n\t      * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has\n\t      * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n\t      * submission event.\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * In this example, we create form controls for first name and last name.\n\t      * *\n\t      * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n\t      * *\n\t      * **npm package**: `@angular/forms`\n\t      * *\n\t      * **NgModule**: {@link ReactiveFormsModule}\n\t      * *\n\t      * @stable\n\t     */\n\t    var FormGroupDirective = (function (_super) {\n\t        __extends$11(FormGroupDirective, _super);\n\t        /**\n\t         * @param {?} _validators\n\t         * @param {?} _asyncValidators\n\t         */\n\t        function FormGroupDirective(_validators, _asyncValidators) {\n\t            _super.call(this);\n\t            this._validators = _validators;\n\t            this._asyncValidators = _asyncValidators;\n\t            this._submitted = false;\n\t            this.directives = [];\n\t            this.form = null;\n\t            this.ngSubmit = new EventEmitter();\n\t        }\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.ngOnChanges = function (changes) {\n\t            this._checkFormPresent();\n\t            if (changes.hasOwnProperty('form')) {\n\t                this._updateValidators();\n\t                this._updateDomValue();\n\t                this._updateRegistrations();\n\t            }\n\t        };\n\t        Object.defineProperty(FormGroupDirective.prototype, \"submitted\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._submitted; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormGroupDirective.prototype, \"formDirective\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormGroupDirective.prototype, \"control\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.form; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormGroupDirective.prototype, \"path\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return []; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.addControl = function (dir) {\n\t            var /** @type {?} */ ctrl = this.form.get(dir.path);\n\t            setUpControl(ctrl, dir);\n\t            ctrl.updateValueAndValidity({ emitEvent: false });\n\t            this.directives.push(dir);\n\t            return ctrl;\n\t        };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.removeControl = function (dir) { ListWrapper.remove(this.directives, dir); };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.addFormGroup = function (dir) {\n\t            var /** @type {?} */ ctrl = this.form.get(dir.path);\n\t            setUpFormContainer(ctrl, dir);\n\t            ctrl.updateValueAndValidity({ emitEvent: false });\n\t        };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.removeFormGroup = function (dir) { };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.addFormArray = function (dir) {\n\t            var /** @type {?} */ ctrl = this.form.get(dir.path);\n\t            setUpFormContainer(ctrl, dir);\n\t            ctrl.updateValueAndValidity({ emitEvent: false });\n\t        };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.removeFormArray = function (dir) { };\n\t        /**\n\t         * @param {?} dir\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.getFormArray = function (dir) { return (this.form.get(dir.path)); };\n\t        /**\n\t         * @param {?} dir\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.updateModel = function (dir, value) {\n\t            var /** @type {?} */ ctrl = (this.form.get(dir.path));\n\t            ctrl.setValue(value);\n\t        };\n\t        /**\n\t         * @param {?} $event\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.onSubmit = function ($event) {\n\t            this._submitted = true;\n\t            this.ngSubmit.emit($event);\n\t            return false;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.onReset = function () { this.resetForm(); };\n\t        /**\n\t         * @param {?=} value\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype.resetForm = function (value) {\n\t            if (value === void 0) { value = undefined; }\n\t            this.form.reset(value);\n\t            this._submitted = false;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype._updateDomValue = function () {\n\t            var _this = this;\n\t            this.directives.forEach(function (dir) {\n\t                var /** @type {?} */ newCtrl = _this.form.get(dir.path);\n\t                if (dir._control !== newCtrl) {\n\t                    cleanUpControl(dir._control, dir);\n\t                    if (newCtrl)\n\t                        setUpControl(newCtrl, dir);\n\t                    dir._control = newCtrl;\n\t                }\n\t            });\n\t            this.form._updateTreeValidity({ emitEvent: false });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype._updateRegistrations = function () {\n\t            var _this = this;\n\t            this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });\n\t            if (this._oldForm)\n\t                this._oldForm._registerOnCollectionChange(function () { });\n\t            this._oldForm = this.form;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype._updateValidators = function () {\n\t            var /** @type {?} */ sync = composeValidators(this._validators);\n\t            this.form.validator = Validators.compose([this.form.validator, sync]);\n\t            var /** @type {?} */ async = composeAsyncValidators(this._asyncValidators);\n\t            this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormGroupDirective.prototype._checkFormPresent = function () {\n\t            if (!this.form) {\n\t                ReactiveErrors.missingFormException();\n\t            }\n\t        };\n\t        FormGroupDirective.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[formGroup]',\n\t                        providers: [formDirectiveProvider$1],\n\t                        host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n\t                        exportAs: 'ngForm'\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormGroupDirective.ctorParameters = function () { return [\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t        ]; };\n\t        FormGroupDirective.propDecorators = {\n\t            'form': [{ type: _angular_core.Input, args: ['formGroup',] },],\n\t            'ngSubmit': [{ type: _angular_core.Output },],\n\t        };\n\t        return FormGroupDirective;\n\t    }(ControlContainer));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$12 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ formGroupNameProvider = {\n\t        provide: ControlContainer,\n\t        useExisting: _angular_core.forwardRef(function () { return FormGroupName; })\n\t    };\n\t    /**\n\t     *  *\n\t      * *\n\t      * This directive can only be used with a parent {@link FormGroupDirective} (selector:\n\t      * `[formGroup]`).\n\t      * *\n\t      * It accepts the string name of the nested {@link FormGroup} you want to link, and\n\t      * will look for a {@link FormGroup} registered with that name in the parent\n\t      * {@link FormGroup} instance you passed into {@link FormGroupDirective}.\n\t      * *\n\t      * Nested form groups can come in handy when you want to validate a sub-group of a\n\t      * form separately from the rest or when you'd like to group the values of certain\n\t      * controls into their own nested object.\n\t      * *\n\t      * **Access the group**: You can access the associated {@link FormGroup} using the\n\t      * {@link AbstractControl.get} method. Ex: `this.form.get('name')`.\n\t      * *\n\t      * You can also access individual controls within the group using dot syntax.\n\t      * Ex: `this.form.get('name.first')`\n\t      * *\n\t      * **Get the value**: the `value` property is always synced and available on the\n\t      * {@link FormGroup}. See a full list of available properties in {@link AbstractControl}.\n\t      * *\n\t      * **Set the value**: You can set an initial value for each child control when instantiating\n\t      * the {@link FormGroup}, or you can set it programmatically later using\n\t      * {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}.\n\t      * *\n\t      * **Listen to value**: If you want to listen to changes in the value of the group, you can\n\t      * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n\t      * {@link AbstractControl.statusChanges} to be notified when the validation status is\n\t      * re-calculated.\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n\t      * *\n\t      * * **npm package**: `@angular/forms`\n\t      * *\n\t      * * **NgModule**: `ReactiveFormsModule`\n\t      * *\n\t     */\n\t    var FormGroupName = (function (_super) {\n\t        __extends$12(FormGroupName, _super);\n\t        /**\n\t         * @param {?} parent\n\t         * @param {?} validators\n\t         * @param {?} asyncValidators\n\t         */\n\t        function FormGroupName(parent, validators, asyncValidators) {\n\t            _super.call(this);\n\t            this._parent = parent;\n\t            this._validators = validators;\n\t            this._asyncValidators = asyncValidators;\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormGroupName.prototype._checkParentType = function () {\n\t            if (_hasInvalidParent(this._parent)) {\n\t                ReactiveErrors.groupParentException();\n\t            }\n\t        };\n\t        FormGroupName.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormGroupName.ctorParameters = function () { return [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t        ]; };\n\t        FormGroupName.propDecorators = {\n\t            'name': [{ type: _angular_core.Input, args: ['formGroupName',] },],\n\t        };\n\t        return FormGroupName;\n\t    }(AbstractFormGroupDirective));\n\t    var /** @type {?} */ formArrayNameProvider = {\n\t        provide: ControlContainer,\n\t        useExisting: _angular_core.forwardRef(function () { return FormArrayName; })\n\t    };\n\t    /**\n\t     *  *\n\t      * *\n\t      * This directive is designed to be used with a parent {@link FormGroupDirective} (selector:\n\t      * `[formGroup]`).\n\t      * *\n\t      * It accepts the string name of the nested {@link FormArray} you want to link, and\n\t      * will look for a {@link FormArray} registered with that name in the parent\n\t      * {@link FormGroup} instance you passed into {@link FormGroupDirective}.\n\t      * *\n\t      * Nested form arrays can come in handy when you have a group of form controls but\n\t      * you're not sure how many there will be. Form arrays allow you to create new\n\t      * form controls dynamically.\n\t      * *\n\t      * **Access the array**: You can access the associated {@link FormArray} using the\n\t      * {@link AbstractControl.get} method on the parent {@link FormGroup}.\n\t      * Ex: `this.form.get('cities')`.\n\t      * *\n\t      * **Get the value**: the `value` property is always synced and available on the\n\t      * {@link FormArray}. See a full list of available properties in {@link AbstractControl}.\n\t      * *\n\t      * **Set the value**: You can set an initial value for each child control when instantiating\n\t      * the {@link FormArray}, or you can set the value programmatically later using the\n\t      * {@link FormArray}'s {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}\n\t      * methods.\n\t      * *\n\t      * **Listen to value**: If you want to listen to changes in the value of the array, you can\n\t      * subscribe to the {@link FormArray}'s {@link AbstractControl.valueChanges} event.  You can also\n\t      * listen to its {@link AbstractControl.statusChanges} event to be notified when the validation\n\t      * status is re-calculated.\n\t      * *\n\t      * **Add new controls**: You can add new controls to the {@link FormArray} dynamically by\n\t      * calling its {@link FormArray.push} method.\n\t      * Ex: `this.form.get('cities').push(new FormControl());`\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n\t      * *\n\t      * * **npm package**: `@angular/forms`\n\t      * *\n\t      * * **NgModule**: `ReactiveFormsModule`\n\t      * *\n\t     */\n\t    var FormArrayName = (function (_super) {\n\t        __extends$12(FormArrayName, _super);\n\t        /**\n\t         * @param {?} parent\n\t         * @param {?} validators\n\t         * @param {?} asyncValidators\n\t         */\n\t        function FormArrayName(parent, validators, asyncValidators) {\n\t            _super.call(this);\n\t            this._parent = parent;\n\t            this._validators = validators;\n\t            this._asyncValidators = asyncValidators;\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormArrayName.prototype.ngOnInit = function () {\n\t            this._checkParentType();\n\t            this.formDirective.addFormArray(this);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormArrayName.prototype.ngOnDestroy = function () {\n\t            if (this.formDirective) {\n\t                this.formDirective.removeFormArray(this);\n\t            }\n\t        };\n\t        Object.defineProperty(FormArrayName.prototype, \"control\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.formDirective.getFormArray(this); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormArrayName.prototype, \"formDirective\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return this._parent ? (this._parent.formDirective) : null;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormArrayName.prototype, \"path\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return controlPath(this.name, this._parent); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormArrayName.prototype, \"validator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return composeValidators(this._validators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormArrayName.prototype, \"asyncValidator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return composeAsyncValidators(this._asyncValidators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormArrayName.prototype._checkParentType = function () {\n\t            if (_hasInvalidParent(this._parent)) {\n\t                ReactiveErrors.arrayParentException();\n\t            }\n\t        };\n\t        FormArrayName.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormArrayName.ctorParameters = function () { return [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t        ]; };\n\t        FormArrayName.propDecorators = {\n\t            'name': [{ type: _angular_core.Input, args: ['formArrayName',] },],\n\t        };\n\t        return FormArrayName;\n\t    }(ControlContainer));\n\t    /**\n\t     * @param {?} parent\n\t     * @return {?}\n\t     */\n\t    function _hasInvalidParent(parent) {\n\t        return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n\t            !(parent instanceof FormArrayName);\n\t    }\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$10 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ controlNameBinding = {\n\t        provide: NgControl,\n\t        useExisting: _angular_core.forwardRef(function () { return FormControlName; })\n\t    };\n\t    /**\n\t     *  element by name.\n\t      * *\n\t      * In other words, this directive ensures that any values written to the {@link FormControl}\n\t      * instance programmatically will be written to the DOM element (model -> view). Conversely,\n\t      * any values written to the DOM element through user input will be reflected in the\n\t      * {@link FormControl} instance (view -> model).\n\t      * *\n\t      * *\n\t      * This directive is designed to be used with a parent {@link FormGroupDirective} (selector:\n\t      * `[formGroup]`).\n\t      * *\n\t      * It accepts the string name of the {@link FormControl} instance you want to\n\t      * link, and will look for a {@link FormControl} registered with that name in the\n\t      * closest {@link FormGroup} or {@link FormArray} above it.\n\t      * *\n\t      * **Access the control**: You can access the {@link FormControl} associated with\n\t      * this directive by using the {@link AbstractControl.get} method.\n\t      * Ex: `this.form.get('first');`\n\t      * *\n\t      * **Get value**: the `value` property is always synced and available on the {@link FormControl}.\n\t      * See a full list of available properties in {@link AbstractControl}.\n\t      * *\n\t      * **Set value**: You can set an initial value for the control when instantiating the\n\t      * {@link FormControl}, or you can set it programmatically later using\n\t      * {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}.\n\t      * *\n\t      * **Listen to value**: If you want to listen to changes in the value of the control, you can\n\t      * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n\t      * {@link AbstractControl.statusChanges} to be notified when the validation status is\n\t      * re-calculated.\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * In this example, we create form controls for first name and last name.\n\t      * *\n\t      * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n\t      * *\n\t      * To see `formControlName` examples with different form control types, see:\n\t      * *\n\t      * * Radio buttons: {@link RadioControlValueAccessor}\n\t      * * Selects: {@link SelectControlValueAccessor}\n\t      * *\n\t      * **npm package**: `@angular/forms`\n\t      * *\n\t      * **NgModule**: {@link ReactiveFormsModule}\n\t      * *\n\t      * @stable\n\t     */\n\t    var FormControlName = (function (_super) {\n\t        __extends$10(FormControlName, _super);\n\t        /**\n\t         * @param {?} parent\n\t         * @param {?} validators\n\t         * @param {?} asyncValidators\n\t         * @param {?} valueAccessors\n\t         */\n\t        function FormControlName(parent, validators, asyncValidators, valueAccessors) {\n\t            _super.call(this);\n\t            this._added = false;\n\t            this.update = new EventEmitter();\n\t            this._parent = parent;\n\t            this._rawValidators = validators || [];\n\t            this._rawAsyncValidators = asyncValidators || [];\n\t            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n\t        }\n\t        Object.defineProperty(FormControlName.prototype, \"isDisabled\", {\n\t            /**\n\t             * @param {?} isDisabled\n\t             * @return {?}\n\t             */\n\t            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        FormControlName.prototype.ngOnChanges = function (changes) {\n\t            if (!this._added)\n\t                this._setUpControl();\n\t            if (isPropertyUpdated(changes, this.viewModel)) {\n\t                this.viewModel = this.model;\n\t                this.formDirective.updateModel(this, this.model);\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormControlName.prototype.ngOnDestroy = function () {\n\t            if (this.formDirective) {\n\t                this.formDirective.removeControl(this);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} newValue\n\t         * @return {?}\n\t         */\n\t        FormControlName.prototype.viewToModelUpdate = function (newValue) {\n\t            this.viewModel = newValue;\n\t            this.update.emit(newValue);\n\t        };\n\t        Object.defineProperty(FormControlName.prototype, \"path\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return controlPath(this.name, this._parent); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlName.prototype, \"formDirective\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._parent ? this._parent.formDirective : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlName.prototype, \"validator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return composeValidators(this._rawValidators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlName.prototype, \"asyncValidator\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return composeAsyncValidators(this._rawAsyncValidators);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlName.prototype, \"control\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._control; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormControlName.prototype._checkParentType = function () {\n\t            if (!(this._parent instanceof FormGroupName) &&\n\t                this._parent instanceof AbstractFormGroupDirective) {\n\t                ReactiveErrors.ngModelGroupException();\n\t            }\n\t            else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n\t                !(this._parent instanceof FormArrayName)) {\n\t                ReactiveErrors.controlParentException();\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        FormControlName.prototype._setUpControl = function () {\n\t            this._checkParentType();\n\t            this._control = this.formDirective.addControl(this);\n\t            if (this.control.disabled && this.valueAccessor.setDisabledState) {\n\t                this.valueAccessor.setDisabledState(true);\n\t            }\n\t            this._added = true;\n\t        };\n\t        FormControlName.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormControlName.ctorParameters = function () { return [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n\t        ]; };\n\t        FormControlName.propDecorators = {\n\t            'name': [{ type: _angular_core.Input, args: ['formControlName',] },],\n\t            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n\t            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n\t            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n\t        };\n\t        return FormControlName;\n\t    }(NgControl));\n\t\n\t    var __extends$13 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ REQUIRED_VALIDATOR = {\n\t        provide: NG_VALIDATORS,\n\t        useExisting: _angular_core.forwardRef(function () { return RequiredValidator; }),\n\t        multi: true\n\t    };\n\t    var /** @type {?} */ CHECKBOX_REQUIRED_VALIDATOR = {\n\t        provide: NG_VALIDATORS,\n\t        useExisting: _angular_core.forwardRef(function () { return CheckboxRequiredValidator; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     *  A Directive that adds the `required` validator to any controls marked with the\n\t      * `required` attribute, via the {@link NG_VALIDATORS} binding.\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * ```\n\t      * <input name=\"fullName\" ngModel required>\n\t      * ```\n\t      * *\n\t     */\n\t    var RequiredValidator = (function () {\n\t        function RequiredValidator() {\n\t        }\n\t        Object.defineProperty(RequiredValidator.prototype, \"required\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._required; },\n\t            /**\n\t             * @param {?} value\n\t             * @return {?}\n\t             */\n\t            set: function (value) {\n\t                this._required = value != null && value !== false && \"\" + value !== 'false';\n\t                if (this._onChange)\n\t                    this._onChange();\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        RequiredValidator.prototype.validate = function (c) {\n\t            return this.required ? Validators.required(c) : null;\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        RequiredValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n\t        RequiredValidator.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n\t                        providers: [REQUIRED_VALIDATOR],\n\t                        host: { '[attr.required]': 'required ? \"\" : null' }\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        RequiredValidator.ctorParameters = function () { return []; };\n\t        RequiredValidator.propDecorators = {\n\t            'required': [{ type: _angular_core.Input },],\n\t        };\n\t        return RequiredValidator;\n\t    }());\n\t    /**\n\t     *  A Directive that adds the `required` validator to checkbox controls marked with the\n\t      * `required` attribute, via the {@link NG_VALIDATORS} binding.\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * ```\n\t      * <input type=\"checkbox\" name=\"active\" ngModel required>\n\t      * ```\n\t      * *\n\t     */\n\t    var CheckboxRequiredValidator = (function (_super) {\n\t        __extends$13(CheckboxRequiredValidator, _super);\n\t        function CheckboxRequiredValidator() {\n\t            _super.apply(this, arguments);\n\t        }\n\t        /**\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        CheckboxRequiredValidator.prototype.validate = function (c) {\n\t            return this.required ? Validators.requiredTrue(c) : null;\n\t        };\n\t        CheckboxRequiredValidator.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n\t                        providers: [CHECKBOX_REQUIRED_VALIDATOR],\n\t                        host: { '[attr.required]': 'required ? \"\" : null' }\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        CheckboxRequiredValidator.ctorParameters = function () { return []; };\n\t        return CheckboxRequiredValidator;\n\t    }(RequiredValidator));\n\t    /**\n\t     * Provider which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.\n\t     *\n\t     * ## Example:\n\t     *\n\t     * {@example common/forms/ts/validators/validators.ts region='min'}\n\t     */\n\t    var /** @type {?} */ MIN_LENGTH_VALIDATOR = {\n\t        provide: NG_VALIDATORS,\n\t        useExisting: _angular_core.forwardRef(function () { return MinLengthValidator; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     *  A directive which installs the {@link MinLengthValidator} for any `formControlName`,\n\t      * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n\t      * *\n\t     */\n\t    var MinLengthValidator = (function () {\n\t        function MinLengthValidator() {\n\t        }\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        MinLengthValidator.prototype.ngOnChanges = function (changes) {\n\t            if ('minlength' in changes) {\n\t                this._createValidator();\n\t                if (this._onChange)\n\t                    this._onChange();\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        MinLengthValidator.prototype.validate = function (c) {\n\t            return this.minlength == null ? null : this._validator(c);\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        MinLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        MinLengthValidator.prototype._createValidator = function () {\n\t            this._validator = Validators.minLength(parseInt(this.minlength, 10));\n\t        };\n\t        MinLengthValidator.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n\t                        providers: [MIN_LENGTH_VALIDATOR],\n\t                        host: { '[attr.minlength]': 'minlength ? minlength : null' }\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        MinLengthValidator.ctorParameters = function () { return []; };\n\t        MinLengthValidator.propDecorators = {\n\t            'minlength': [{ type: _angular_core.Input },],\n\t        };\n\t        return MinLengthValidator;\n\t    }());\n\t    /**\n\t     * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.\n\t     *\n\t     * ## Example:\n\t     *\n\t     * {@example common/forms/ts/validators/validators.ts region='max'}\n\t     */\n\t    var /** @type {?} */ MAX_LENGTH_VALIDATOR = {\n\t        provide: NG_VALIDATORS,\n\t        useExisting: _angular_core.forwardRef(function () { return MaxLengthValidator; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     *  A directive which installs the {@link MaxLengthValidator} for any `formControlName,\n\t      * `formControl`,\n\t      * or control with `ngModel` that also has a `maxlength` attribute.\n\t      * *\n\t     */\n\t    var MaxLengthValidator = (function () {\n\t        function MaxLengthValidator() {\n\t        }\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        MaxLengthValidator.prototype.ngOnChanges = function (changes) {\n\t            if ('maxlength' in changes) {\n\t                this._createValidator();\n\t                if (this._onChange)\n\t                    this._onChange();\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        MaxLengthValidator.prototype.validate = function (c) {\n\t            return this.maxlength != null ? this._validator(c) : null;\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        MaxLengthValidator.prototype._createValidator = function () {\n\t            this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n\t        };\n\t        MaxLengthValidator.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n\t                        providers: [MAX_LENGTH_VALIDATOR],\n\t                        host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        MaxLengthValidator.ctorParameters = function () { return []; };\n\t        MaxLengthValidator.propDecorators = {\n\t            'maxlength': [{ type: _angular_core.Input },],\n\t        };\n\t        return MaxLengthValidator;\n\t    }());\n\t    var /** @type {?} */ PATTERN_VALIDATOR = {\n\t        provide: NG_VALIDATORS,\n\t        useExisting: _angular_core.forwardRef(function () { return PatternValidator; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     *  A Directive that adds the `pattern` validator to any controls marked with the\n\t      * `pattern` attribute, via the {@link NG_VALIDATORS} binding. Uses attribute value\n\t      * as the regex to validate Control value against.  Follows pattern attribute\n\t      * semantics; i.e. regex must match entire Control value.\n\t      * *\n\t      * ### Example\n\t      * *\n\t      * ```\n\t      * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n\t      * ```\n\t     */\n\t    var PatternValidator = (function () {\n\t        function PatternValidator() {\n\t        }\n\t        /**\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        PatternValidator.prototype.ngOnChanges = function (changes) {\n\t            if ('pattern' in changes) {\n\t                this._createValidator();\n\t                if (this._onChange)\n\t                    this._onChange();\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        PatternValidator.prototype.validate = function (c) { return this._validator(c); };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        PatternValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern); };\n\t        PatternValidator.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n\t                        providers: [PATTERN_VALIDATOR],\n\t                        host: { '[attr.pattern]': 'pattern ? pattern : null' }\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        PatternValidator.ctorParameters = function () { return []; };\n\t        PatternValidator.propDecorators = {\n\t            'pattern': [{ type: _angular_core.Input },],\n\t        };\n\t        return PatternValidator;\n\t    }());\n\t\n\t    /**\n\t     *  *\n\t      * It is essentially syntactic sugar that shortens the `new FormGroup()`,\n\t      * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\n\t      * forms.\n\t      * *\n\t      * *\n\t      * To use, inject `FormBuilder` into your component class. You can then call its methods\n\t      * directly.\n\t      * *\n\t      * {@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\n\t      * *\n\t      * * **npm package**: `@angular/forms`\n\t      * *\n\t      * * **NgModule**: {@link ReactiveFormsModule}\n\t      * *\n\t     */\n\t    var FormBuilder = (function () {\n\t        function FormBuilder() {\n\t        }\n\t        /**\n\t         *  Construct a new {@link FormGroup} with the given map of configuration.\n\t          * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n\t          * *\n\t          * See the {@link FormGroup} constructor for more details.\n\t         * @param {?} controlsConfig\n\t         * @param {?=} extra\n\t         * @return {?}\n\t         */\n\t        FormBuilder.prototype.group = function (controlsConfig, extra) {\n\t            if (extra === void 0) { extra = null; }\n\t            var /** @type {?} */ controls = this._reduceControls(controlsConfig);\n\t            var /** @type {?} */ validator = isPresent(extra) ? extra['validator'] : null;\n\t            var /** @type {?} */ asyncValidator = isPresent(extra) ? extra['asyncValidator'] : null;\n\t            return new FormGroup(controls, validator, asyncValidator);\n\t        };\n\t        /**\n\t         *  Construct a new {@link FormControl} with the given `formState`,`validator`, and\n\t          * `asyncValidator`.\n\t          * *\n\t          * `formState` can either be a standalone value for the form control or an object\n\t          * that contains both a value and a disabled status.\n\t          * *\n\t         * @param {?} formState\n\t         * @param {?=} validator\n\t         * @param {?=} asyncValidator\n\t         * @return {?}\n\t         */\n\t        FormBuilder.prototype.control = function (formState, validator, asyncValidator) {\n\t            if (validator === void 0) { validator = null; }\n\t            if (asyncValidator === void 0) { asyncValidator = null; }\n\t            return new FormControl(formState, validator, asyncValidator);\n\t        };\n\t        /**\n\t         *  Construct a {@link FormArray} from the given `controlsConfig` array of\n\t          * configuration, with the given optional `validator` and `asyncValidator`.\n\t         * @param {?} controlsConfig\n\t         * @param {?=} validator\n\t         * @param {?=} asyncValidator\n\t         * @return {?}\n\t         */\n\t        FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {\n\t            var _this = this;\n\t            if (validator === void 0) { validator = null; }\n\t            if (asyncValidator === void 0) { asyncValidator = null; }\n\t            var /** @type {?} */ controls = controlsConfig.map(function (c) { return _this._createControl(c); });\n\t            return new FormArray(controls, validator, asyncValidator);\n\t        };\n\t        /**\n\t         * @param {?} controlsConfig\n\t         * @return {?}\n\t         */\n\t        FormBuilder.prototype._reduceControls = function (controlsConfig) {\n\t            var _this = this;\n\t            var /** @type {?} */ controls = {};\n\t            Object.keys(controlsConfig).forEach(function (controlName) {\n\t                controls[controlName] = _this._createControl(controlsConfig[controlName]);\n\t            });\n\t            return controls;\n\t        };\n\t        /**\n\t         * @param {?} controlConfig\n\t         * @return {?}\n\t         */\n\t        FormBuilder.prototype._createControl = function (controlConfig) {\n\t            if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n\t                controlConfig instanceof FormArray) {\n\t                return controlConfig;\n\t            }\n\t            else if (Array.isArray(controlConfig)) {\n\t                var /** @type {?} */ value = controlConfig[0];\n\t                var /** @type {?} */ validator = controlConfig.length > 1 ? controlConfig[1] : null;\n\t                var /** @type {?} */ asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n\t                return this.control(value, validator, asyncValidator);\n\t            }\n\t            else {\n\t                return this.control(controlConfig);\n\t            }\n\t        };\n\t        FormBuilder.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        FormBuilder.ctorParameters = function () { return []; };\n\t        return FormBuilder;\n\t    }());\n\t\n\t    /**\n\t     * @stable\n\t     */\n\t    var /** @type {?} */ VERSION = new _angular_core.Version('2.4.2');\n\t\n\t    var /** @type {?} */ SHARED_FORM_DIRECTIVES = [\n\t        NgSelectOption,\n\t        NgSelectMultipleOption,\n\t        DefaultValueAccessor,\n\t        NumberValueAccessor,\n\t        RangeValueAccessor,\n\t        CheckboxControlValueAccessor,\n\t        SelectControlValueAccessor,\n\t        SelectMultipleControlValueAccessor,\n\t        RadioControlValueAccessor,\n\t        NgControlStatus,\n\t        NgControlStatusGroup,\n\t        RequiredValidator,\n\t        MinLengthValidator,\n\t        MaxLengthValidator,\n\t        PatternValidator,\n\t        CheckboxRequiredValidator,\n\t    ];\n\t    var /** @type {?} */ TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\n\t    var /** @type {?} */ REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n\t    /**\n\t     *  Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n\t     */\n\t    var InternalFormsSharedModule = (function () {\n\t        function InternalFormsSharedModule() {\n\t        }\n\t        InternalFormsSharedModule.decorators = [\n\t            { type: _angular_core.NgModule, args: [{\n\t                        declarations: SHARED_FORM_DIRECTIVES,\n\t                        exports: SHARED_FORM_DIRECTIVES,\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        InternalFormsSharedModule.ctorParameters = function () { return []; };\n\t        return InternalFormsSharedModule;\n\t    }());\n\t\n\t    /**\n\t     *  The ng module for forms.\n\t     */\n\t    var FormsModule = (function () {\n\t        function FormsModule() {\n\t        }\n\t        FormsModule.decorators = [\n\t            { type: _angular_core.NgModule, args: [{\n\t                        declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n\t                        providers: [RadioControlRegistry],\n\t                        exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormsModule.ctorParameters = function () { return []; };\n\t        return FormsModule;\n\t    }());\n\t    /**\n\t     *  The ng module for reactive forms.\n\t     */\n\t    var ReactiveFormsModule = (function () {\n\t        function ReactiveFormsModule() {\n\t        }\n\t        ReactiveFormsModule.decorators = [\n\t            { type: _angular_core.NgModule, args: [{\n\t                        declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n\t                        providers: [FormBuilder, RadioControlRegistry],\n\t                        exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        ReactiveFormsModule.ctorParameters = function () { return []; };\n\t        return ReactiveFormsModule;\n\t    }());\n\t\n\t    exports.AbstractControlDirective = AbstractControlDirective;\n\t    exports.AbstractFormGroupDirective = AbstractFormGroupDirective;\n\t    exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;\n\t    exports.ControlContainer = ControlContainer;\n\t    exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR;\n\t    exports.DefaultValueAccessor = DefaultValueAccessor;\n\t    exports.NgControl = NgControl;\n\t    exports.NgControlStatus = NgControlStatus;\n\t    exports.NgControlStatusGroup = NgControlStatusGroup;\n\t    exports.NgForm = NgForm;\n\t    exports.NgModel = NgModel;\n\t    exports.NgModelGroup = NgModelGroup;\n\t    exports.RadioControlValueAccessor = RadioControlValueAccessor;\n\t    exports.FormControlDirective = FormControlDirective;\n\t    exports.FormControlName = FormControlName;\n\t    exports.FormGroupDirective = FormGroupDirective;\n\t    exports.FormArrayName = FormArrayName;\n\t    exports.FormGroupName = FormGroupName;\n\t    exports.NgSelectOption = NgSelectOption;\n\t    exports.SelectControlValueAccessor = SelectControlValueAccessor;\n\t    exports.SelectMultipleControlValueAccessor = SelectMultipleControlValueAccessor;\n\t    exports.CheckboxRequiredValidator = CheckboxRequiredValidator;\n\t    exports.MaxLengthValidator = MaxLengthValidator;\n\t    exports.MinLengthValidator = MinLengthValidator;\n\t    exports.PatternValidator = PatternValidator;\n\t    exports.RequiredValidator = RequiredValidator;\n\t    exports.FormBuilder = FormBuilder;\n\t    exports.AbstractControl = AbstractControl;\n\t    exports.FormArray = FormArray;\n\t    exports.FormControl = FormControl;\n\t    exports.FormGroup = FormGroup;\n\t    exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS;\n\t    exports.NG_VALIDATORS = NG_VALIDATORS;\n\t    exports.Validators = Validators;\n\t    exports.VERSION = VERSION;\n\t    exports.FormsModule = FormsModule;\n\t    exports.ReactiveFormsModule = ReactiveFormsModule;\n\t\n\t}));\n\n/***/ },\n/* 27 */,\n/* 28 */,\n/* 29 */,\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function (global, factory) {\n\t     true ? factory(exports, __webpack_require__(4), __webpack_require__(25), __webpack_require__(6), __webpack_require__(31)) :\n\t    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/http', 'rxjs/Observable', 'rxjs/add/operator/delay'], factory) :\n\t    (factory((global.ng = global.ng || {}, global.ng.inMemoryWebApi = global.ng.inMemoryWebApi || {}),global.ng.core,global.ng.http,global.Rx,global.Rx));\n\t}(this, (function (exports,_angular_core,_angular_http,rxjs_Observable,rxjs_add_operator_delay) { 'use strict';\n\t\n\tvar STATUS = {\r\n\t    CONTINUE: 100,\r\n\t    SWITCHING_PROTOCOLS: 101,\r\n\t    OK: 200,\r\n\t    CREATED: 201,\r\n\t    ACCEPTED: 202,\r\n\t    NON_AUTHORITATIVE_INFORMATION: 203,\r\n\t    NO_CONTENT: 204,\r\n\t    RESET_CONTENT: 205,\r\n\t    PARTIAL_CONTENT: 206,\r\n\t    MULTIPLE_CHOICES: 300,\r\n\t    MOVED_PERMANTENTLY: 301,\r\n\t    FOUND: 302,\r\n\t    SEE_OTHER: 303,\r\n\t    NOT_MODIFIED: 304,\r\n\t    USE_PROXY: 305,\r\n\t    TEMPORARY_REDIRECT: 307,\r\n\t    BAD_REQUEST: 400,\r\n\t    UNAUTHORIZED: 401,\r\n\t    PAYMENT_REQUIRED: 402,\r\n\t    FORBIDDEN: 403,\r\n\t    NOT_FOUND: 404,\r\n\t    METHOD_NOT_ALLOWED: 405,\r\n\t    NOT_ACCEPTABLE: 406,\r\n\t    PROXY_AUTHENTICATION_REQUIRED: 407,\r\n\t    REQUEST_TIMEOUT: 408,\r\n\t    CONFLICT: 409,\r\n\t    GONE: 410,\r\n\t    LENGTH_REQUIRED: 411,\r\n\t    PRECONDITION_FAILED: 412,\r\n\t    PAYLOAD_TO_LARGE: 413,\r\n\t    URI_TOO_LONG: 414,\r\n\t    UNSUPPORTED_MEDIA_TYPE: 415,\r\n\t    RANGE_NOT_SATISFIABLE: 416,\r\n\t    EXPECTATION_FAILED: 417,\r\n\t    IM_A_TEAPOT: 418,\r\n\t    UPGRADE_REQUIRED: 426,\r\n\t    INTERNAL_SERVER_ERROR: 500,\r\n\t    NOT_IMPLEMENTED: 501,\r\n\t    BAD_GATEWAY: 502,\r\n\t    SERVICE_UNAVAILABLE: 503,\r\n\t    GATEWAY_TIMEOUT: 504,\r\n\t    HTTP_VERSION_NOT_SUPPORTED: 505,\r\n\t    PROCESSING: 102,\r\n\t    MULTI_STATUS: 207,\r\n\t    IM_USED: 226,\r\n\t    PERMANENT_REDIRECT: 308,\r\n\t    UNPROCESSABLE_ENTRY: 422,\r\n\t    LOCKED: 423,\r\n\t    FAILED_DEPENDENCY: 424,\r\n\t    PRECONDITION_REQUIRED: 428,\r\n\t    TOO_MANY_REQUESTS: 429,\r\n\t    REQUEST_HEADER_FIELDS_TOO_LARGE: 431,\r\n\t    UNAVAILABLE_FOR_LEGAL_REASONS: 451,\r\n\t    VARIANT_ALSO_NEGOTIATES: 506,\r\n\t    INSUFFICIENT_STORAGE: 507,\r\n\t    NETWORK_AUTHENTICATION_REQUIRED: 511\r\n\t};\r\n\t/*tslint:disable:quotemark max-line-length one-line */\r\n\tvar STATUS_CODE_INFO = {\r\n\t    '100': {\r\n\t        'code': 100,\r\n\t        'text': 'Continue',\r\n\t        'description': '\\\"The initial part of a request has been received and has not yet been rejected by the server.\\\"',\r\n\t        'spec_title': 'RFC7231#6.2.1',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.2.1'\r\n\t    },\r\n\t    '101': {\r\n\t        'code': 101,\r\n\t        'text': 'Switching Protocols',\r\n\t        'description': '\\\"The server understands and is willing to comply with the client\\'s request, via the Upgrade header field, for a change in the application protocol being used on this connection.\\\"',\r\n\t        'spec_title': 'RFC7231#6.2.2',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.2.2'\r\n\t    },\r\n\t    '200': {\r\n\t        'code': 200,\r\n\t        'text': 'OK',\r\n\t        'description': '\\\"The request has succeeded.\\\"',\r\n\t        'spec_title': 'RFC7231#6.3.1',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.3.1'\r\n\t    },\r\n\t    '201': {\r\n\t        'code': 201,\r\n\t        'text': 'Created',\r\n\t        'description': '\\\"The request has been fulfilled and has resulted in one or more new resources being created.\\\"',\r\n\t        'spec_title': 'RFC7231#6.3.2',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.3.2'\r\n\t    },\r\n\t    '202': {\r\n\t        'code': 202,\r\n\t        'text': 'Accepted',\r\n\t        'description': '\\\"The request has been accepted for processing, but the processing has not been completed.\\\"',\r\n\t        'spec_title': 'RFC7231#6.3.3',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.3.3'\r\n\t    },\r\n\t    '203': {\r\n\t        'code': 203,\r\n\t        'text': 'Non-Authoritative Information',\r\n\t        'description': '\\\"The request was successful but the enclosed payload has been modified from that of the origin server\\'s 200 (OK) response by a transforming proxy.\\\"',\r\n\t        'spec_title': 'RFC7231#6.3.4',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.3.4'\r\n\t    },\r\n\t    '204': {\r\n\t        'code': 204,\r\n\t        'text': 'No Content',\r\n\t        'description': '\\\"The server has successfully fulfilled the request and that there is no additional content to send in the response payload body.\\\"',\r\n\t        'spec_title': 'RFC7231#6.3.5',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.3.5'\r\n\t    },\r\n\t    '205': {\r\n\t        'code': 205,\r\n\t        'text': 'Reset Content',\r\n\t        'description': '\\\"The server has fulfilled the request and desires that the user agent reset the \\\"document view\\\", which caused the request to be sent, to its original state as received from the origin server.\\\"',\r\n\t        'spec_title': 'RFC7231#6.3.6',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.3.6'\r\n\t    },\r\n\t    '206': {\r\n\t        'code': 206,\r\n\t        'text': 'Partial Content',\r\n\t        'description': '\\\"The server is successfully fulfilling a range request for the target resource by transferring one or more parts of the selected representation that correspond to the satisfiable ranges found in the requests\\'s Range header field.\\\"',\r\n\t        'spec_title': 'RFC7233#4.1',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7233#section-4.1'\r\n\t    },\r\n\t    '300': {\r\n\t        'code': 300,\r\n\t        'text': 'Multiple Choices',\r\n\t        'description': '\\\"The target resource has more than one representation, each with its own more specific identifier, and information about the alternatives is being provided so that the user (or user agent) can select a preferred representation by redirecting its request to one or more of those identifiers.\\\"',\r\n\t        'spec_title': 'RFC7231#6.4.1',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.4.1'\r\n\t    },\r\n\t    '301': {\r\n\t        'code': 301,\r\n\t        'text': 'Moved Permanently',\r\n\t        'description': '\\\"The target resource has been assigned a new permanent URI and any future references to this resource ought to use one of the enclosed URIs.\\\"',\r\n\t        'spec_title': 'RFC7231#6.4.2',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.4.2'\r\n\t    },\r\n\t    '302': {\r\n\t        'code': 302,\r\n\t        'text': 'Found',\r\n\t        'description': '\\\"The target resource resides temporarily under a different URI.\\\"',\r\n\t        'spec_title': 'RFC7231#6.4.3',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.4.3'\r\n\t    },\r\n\t    '303': {\r\n\t        'code': 303,\r\n\t        'text': 'See Other',\r\n\t        'description': '\\\"The server is redirecting the user agent to a different resource, as indicated by a URI in the Location header field, that is intended to provide an indirect response to the original request.\\\"',\r\n\t        'spec_title': 'RFC7231#6.4.4',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.4.4'\r\n\t    },\r\n\t    '304': {\r\n\t        'code': 304,\r\n\t        'text': 'Not Modified',\r\n\t        'description': '\\\"A conditional GET request has been received and would have resulted in a 200 (OK) response if it were not for the fact that the condition has evaluated to false.\\\"',\r\n\t        'spec_title': 'RFC7232#4.1',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7232#section-4.1'\r\n\t    },\r\n\t    '305': {\r\n\t        'code': 305,\r\n\t        'text': 'Use Proxy',\r\n\t        'description': '*deprecated*',\r\n\t        'spec_title': 'RFC7231#6.4.5',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.4.5'\r\n\t    },\r\n\t    '307': {\r\n\t        'code': 307,\r\n\t        'text': 'Temporary Redirect',\r\n\t        'description': '\\\"The target resource resides temporarily under a different URI and the user agent MUST NOT change the request method if it performs an automatic redirection to that URI.\\\"',\r\n\t        'spec_title': 'RFC7231#6.4.7',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.4.7'\r\n\t    },\r\n\t    '400': {\r\n\t        'code': 400,\r\n\t        'text': 'Bad Request',\r\n\t        'description': '\\\"The server cannot or will not process the request because the received syntax is invalid, nonsensical, or exceeds some limitation on what the server is willing to process.\\\"',\r\n\t        'spec_title': 'RFC7231#6.5.1',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.1'\r\n\t    },\r\n\t    '401': {\r\n\t        'code': 401,\r\n\t        'text': 'Unauthorized',\r\n\t        'description': '\\\"The request has not been applied because it lacks valid authentication credentials for the target resource.\\\"',\r\n\t        'spec_title': 'RFC7235#6.3.1',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7235#section-3.1'\r\n\t    },\r\n\t    '402': {\r\n\t        'code': 402,\r\n\t        'text': 'Payment Required',\r\n\t        'description': '*reserved*',\r\n\t        'spec_title': 'RFC7231#6.5.2',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.2'\r\n\t    },\r\n\t    '403': {\r\n\t        'code': 403,\r\n\t        'text': 'Forbidden',\r\n\t        'description': '\\\"The server understood the request but refuses to authorize it.\\\"',\r\n\t        'spec_title': 'RFC7231#6.5.3',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.3'\r\n\t    },\r\n\t    '404': {\r\n\t        'code': 404,\r\n\t        'text': 'Not Found',\r\n\t        'description': '\\\"The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\\\"',\r\n\t        'spec_title': 'RFC7231#6.5.4',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.4'\r\n\t    },\r\n\t    '405': {\r\n\t        'code': 405,\r\n\t        'text': 'Method Not Allowed',\r\n\t        'description': '\\\"The method specified in the request-line is known by the origin server but not supported by the target resource.\\\"',\r\n\t        'spec_title': 'RFC7231#6.5.5',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.5'\r\n\t    },\r\n\t    '406': {\r\n\t        'code': 406,\r\n\t        'text': 'Not Acceptable',\r\n\t        'description': '\\\"The target resource does not have a current representation that would be acceptable to the user agent, according to the proactive negotiation header fields received in the request, and the server is unwilling to supply a default representation.\\\"',\r\n\t        'spec_title': 'RFC7231#6.5.6',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.6'\r\n\t    },\r\n\t    '407': {\r\n\t        'code': 407,\r\n\t        'text': 'Proxy Authentication Required',\r\n\t        'description': '\\\"The client needs to authenticate itself in order to use a proxy.\\\"',\r\n\t        'spec_title': 'RFC7231#6.3.2',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.3.2'\r\n\t    },\r\n\t    '408': {\r\n\t        'code': 408,\r\n\t        'text': 'Request Timeout',\r\n\t        'description': '\\\"The server did not receive a complete request message within the time that it was prepared to wait.\\\"',\r\n\t        'spec_title': 'RFC7231#6.5.7',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.7'\r\n\t    },\r\n\t    '409': {\r\n\t        'code': 409,\r\n\t        'text': 'Conflict',\r\n\t        'description': '\\\"The request could not be completed due to a conflict with the current state of the resource.\\\"',\r\n\t        'spec_title': 'RFC7231#6.5.8',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.8'\r\n\t    },\r\n\t    '410': {\r\n\t        'code': 410,\r\n\t        'text': 'Gone',\r\n\t        'description': '\\\"Access to the target resource is no longer available at the origin server and that this condition is likely to be permanent.\\\"',\r\n\t        'spec_title': 'RFC7231#6.5.9',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.9'\r\n\t    },\r\n\t    '411': {\r\n\t        'code': 411,\r\n\t        'text': 'Length Required',\r\n\t        'description': '\\\"The server refuses to accept the request without a defined Content-Length.\\\"',\r\n\t        'spec_title': 'RFC7231#6.5.10',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.10'\r\n\t    },\r\n\t    '412': {\r\n\t        'code': 412,\r\n\t        'text': 'Precondition Failed',\r\n\t        'description': '\\\"One or more preconditions given in the request header fields evaluated to false when tested on the server.\\\"',\r\n\t        'spec_title': 'RFC7232#4.2',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7232#section-4.2'\r\n\t    },\r\n\t    '413': {\r\n\t        'code': 413,\r\n\t        'text': 'Payload Too Large',\r\n\t        'description': '\\\"The server is refusing to process a request because the request payload is larger than the server is willing or able to process.\\\"',\r\n\t        'spec_title': 'RFC7231#6.5.11',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.11'\r\n\t    },\r\n\t    '414': {\r\n\t        'code': 414,\r\n\t        'text': 'URI Too Long',\r\n\t        'description': '\\\"The server is refusing to service the request because the request-target is longer than the server is willing to interpret.\\\"',\r\n\t        'spec_title': 'RFC7231#6.5.12',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.12'\r\n\t    },\r\n\t    '415': {\r\n\t        'code': 415,\r\n\t        'text': 'Unsupported Media Type',\r\n\t        'description': '\\\"The origin server is refusing to service the request because the payload is in a format not supported by the target resource for this method.\\\"',\r\n\t        'spec_title': 'RFC7231#6.5.13',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.13'\r\n\t    },\r\n\t    '416': {\r\n\t        'code': 416,\r\n\t        'text': 'Range Not Satisfiable',\r\n\t        'description': '\\\"None of the ranges in the request\\'s Range header field overlap the current extent of the selected resource or that the set of ranges requested has been rejected due to invalid ranges or an excessive request of small or overlapping ranges.\\\"',\r\n\t        'spec_title': 'RFC7233#4.4',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7233#section-4.4'\r\n\t    },\r\n\t    '417': {\r\n\t        'code': 417,\r\n\t        'text': 'Expectation Failed',\r\n\t        'description': '\\\"The expectation given in the request\\'s Expect header field could not be met by at least one of the inbound servers.\\\"',\r\n\t        'spec_title': 'RFC7231#6.5.14',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.14'\r\n\t    },\r\n\t    '418': {\r\n\t        'code': 418,\r\n\t        'text': 'I\\'m a teapot',\r\n\t        'description': '\\\"1988 April Fools Joke. Returned by tea pots requested to brew coffee.\\\"',\r\n\t        'spec_title': 'RFC 2324',\r\n\t        'spec_href': 'https://tools.ietf.org/html/rfc2324'\r\n\t    },\r\n\t    '426': {\r\n\t        'code': 426,\r\n\t        'text': 'Upgrade Required',\r\n\t        'description': '\\\"The server refuses to perform the request using the current protocol but might be willing to do so after the client upgrades to a different protocol.\\\"',\r\n\t        'spec_title': 'RFC7231#6.5.15',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.15'\r\n\t    },\r\n\t    '500': {\r\n\t        'code': 500,\r\n\t        'text': 'Internal Server Error',\r\n\t        'description': '\\\"The server encountered an unexpected condition that prevented it from fulfilling the request.\\\"',\r\n\t        'spec_title': 'RFC7231#6.6.1',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.6.1'\r\n\t    },\r\n\t    '501': {\r\n\t        'code': 501,\r\n\t        'text': 'Not Implemented',\r\n\t        'description': '\\\"The server does not support the functionality required to fulfill the request.\\\"',\r\n\t        'spec_title': 'RFC7231#6.6.2',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.6.2'\r\n\t    },\r\n\t    '502': {\r\n\t        'code': 502,\r\n\t        'text': 'Bad Gateway',\r\n\t        'description': '\\\"The server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request.\\\"',\r\n\t        'spec_title': 'RFC7231#6.6.3',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.6.3'\r\n\t    },\r\n\t    '503': {\r\n\t        'code': 503,\r\n\t        'text': 'Service Unavailable',\r\n\t        'description': '\\\"The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.\\\"',\r\n\t        'spec_title': 'RFC7231#6.6.4',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.6.4'\r\n\t    },\r\n\t    '504': {\r\n\t        'code': 504,\r\n\t        'text': 'Gateway Time-out',\r\n\t        'description': '\\\"The server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request.\\\"',\r\n\t        'spec_title': 'RFC7231#6.6.5',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.6.5'\r\n\t    },\r\n\t    '505': {\r\n\t        'code': 505,\r\n\t        'text': 'HTTP Version Not Supported',\r\n\t        'description': '\\\"The server does not support, or refuses to support, the protocol version that was used in the request message.\\\"',\r\n\t        'spec_title': 'RFC7231#6.6.6',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.6.6'\r\n\t    },\r\n\t    '102': {\r\n\t        'code': 102,\r\n\t        'text': 'Processing',\r\n\t        'description': '\\\"An interim response to inform the client that the server has accepted the complete request, but has not yet completed it.\\\"',\r\n\t        'spec_title': 'RFC5218#10.1',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc2518#section-10.1'\r\n\t    },\r\n\t    '207': {\r\n\t        'code': 207,\r\n\t        'text': 'Multi-Status',\r\n\t        'description': '\\\"Status for multiple independent operations.\\\"',\r\n\t        'spec_title': 'RFC5218#10.2',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc2518#section-10.2'\r\n\t    },\r\n\t    '226': {\r\n\t        'code': 226,\r\n\t        'text': 'IM Used',\r\n\t        'description': '\\\"The server has fulfilled a GET request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance.\\\"',\r\n\t        'spec_title': 'RFC3229#10.4.1',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc3229#section-10.4.1'\r\n\t    },\r\n\t    '308': {\r\n\t        'code': 308,\r\n\t        'text': 'Permanent Redirect',\r\n\t        'description': '\\\"The target resource has been assigned a new permanent URI and any future references to this resource SHOULD use one of the returned URIs. [...] This status code is similar to 301 Moved Permanently (Section 7.3.2 of rfc7231), except that it does not allow rewriting the request method from POST to GET.\\\"',\r\n\t        'spec_title': 'RFC7238',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc7238'\r\n\t    },\r\n\t    '422': {\r\n\t        'code': 422,\r\n\t        'text': 'Unprocessable Entity',\r\n\t        'description': '\\\"The server understands the content type of the request entity (hence a 415(Unsupported Media Type) status code is inappropriate), and the syntax of the request entity is correct (thus a 400 (Bad Request) status code is inappropriate) but was unable to process the contained instructions.\\\"',\r\n\t        'spec_title': 'RFC5218#10.3',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc2518#section-10.3'\r\n\t    },\r\n\t    '423': {\r\n\t        'code': 423,\r\n\t        'text': 'Locked',\r\n\t        'description': '\\\"The source or destination resource of a method is locked.\\\"',\r\n\t        'spec_title': 'RFC5218#10.4',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc2518#section-10.4'\r\n\t    },\r\n\t    '424': {\r\n\t        'code': 424,\r\n\t        'text': 'Failed Dependency',\r\n\t        'description': '\\\"The method could not be performed on the resource because the requested action depended on another action and that action failed.\\\"',\r\n\t        'spec_title': 'RFC5218#10.5',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc2518#section-10.5'\r\n\t    },\r\n\t    '428': {\r\n\t        'code': 428,\r\n\t        'text': 'Precondition Required',\r\n\t        'description': '\\\"The origin server requires the request to be conditional.\\\"',\r\n\t        'spec_title': 'RFC6585#3',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc6585#section-3'\r\n\t    },\r\n\t    '429': {\r\n\t        'code': 429,\r\n\t        'text': 'Too Many Requests',\r\n\t        'description': '\\\"The user has sent too many requests in a given amount of time (\\\"rate limiting\\\").\\\"',\r\n\t        'spec_title': 'RFC6585#4',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc6585#section-4'\r\n\t    },\r\n\t    '431': {\r\n\t        'code': 431,\r\n\t        'text': 'Request Header Fields Too Large',\r\n\t        'description': '\\\"The server is unwilling to process the request because its header fields are too large.\\\"',\r\n\t        'spec_title': 'RFC6585#5',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc6585#section-5'\r\n\t    },\r\n\t    '451': {\r\n\t        'code': 451,\r\n\t        'text': 'Unavailable For Legal Reasons',\r\n\t        'description': '\\\"The server is denying access to the resource in response to a legal demand.\\\"',\r\n\t        'spec_title': 'draft-ietf-httpbis-legally-restricted-status',\r\n\t        'spec_href': 'http://tools.ietf.org/html/draft-ietf-httpbis-legally-restricted-status'\r\n\t    },\r\n\t    '506': {\r\n\t        'code': 506,\r\n\t        'text': 'Variant Also Negotiates',\r\n\t        'description': '\\\"The server has an internal configuration error: the chosen variant resource is configured to engage in transparent content negotiation itself, and is therefore not a proper end point in the negotiation process.\\\"',\r\n\t        'spec_title': 'RFC2295#8.1',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc2295#section-8.1'\r\n\t    },\r\n\t    '507': {\r\n\t        'code': 507,\r\n\t        'text': 'Insufficient Storage',\r\n\t        'description': '\\The method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request.\\\"',\r\n\t        'spec_title': 'RFC5218#10.6',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc2518#section-10.6'\r\n\t    },\r\n\t    '511': {\r\n\t        'code': 511,\r\n\t        'text': 'Network Authentication Required',\r\n\t        'description': '\\\"The client needs to authenticate to gain network access.\\\"',\r\n\t        'spec_title': 'RFC6585#6',\r\n\t        'spec_href': 'http://tools.ietf.org/html/rfc6585#section-6'\r\n\t    }\r\n\t};\n\t\n\t////////////  HELPERS ///////////\r\n\t/**\r\n\t * Create an error Response from an HTTP status code and error message\r\n\t */\r\n\tfunction createErrorResponse(req, status, message) {\r\n\t    return new _angular_http.ResponseOptions({\r\n\t        body: { 'error': \"\" + message },\r\n\t        url: req.url,\r\n\t        headers: new _angular_http.Headers({ 'Content-Type': 'application/json' }),\r\n\t        status: status\r\n\t    });\r\n\t}\r\n\t/**\r\n\t * Create an Observable response from response options.\r\n\t */\r\n\tfunction createObservableResponse(req, resOptions) {\r\n\t    return new rxjs_Observable.Observable(function (responseObserver) {\r\n\t        emitResponse(responseObserver, req, resOptions);\r\n\t        return function () { }; // unsubscribe function\r\n\t    });\r\n\t}\r\n\t/**\r\n\t * Create a response from response options\r\n\t * and tell \"ResponseObserver\" (an `Observer<Response>`) to emit it.\r\n\t * The observer's observable is either completed or in error state after call.\r\n\t */\r\n\tfunction emitResponse(responseObserver, req, resOptions) {\r\n\t    resOptions.url = resOptions.url || req.url; // make sure url is set\r\n\t    resOptions = setStatusText(resOptions);\r\n\t    var res = new _angular_http.Response(resOptions);\r\n\t    if (isSuccess(res.status)) {\r\n\t        responseObserver.next(res);\r\n\t        responseObserver.complete();\r\n\t    }\r\n\t    else {\r\n\t        responseObserver.error(res);\r\n\t    }\r\n\t}\r\n\t/**\r\n\t* Interface for a class that creates an in-memory database\r\n\t*\r\n\t* Its `createDb` method creates a hash of named collections that represents the database\r\n\t*\r\n\t* For maximum flexibility, the service may define HTTP method overrides.\r\n\t* Such methods must match the spelling of an HTTP method in lower case (e.g, \"get\").\r\n\t* If a request has a matching method, it will be called as in\r\n\t* `get(info: requestInfo, db: {})` where `db` is the database object described above.\r\n\t*/\r\n\tvar InMemoryDbService = (function () {\r\n\t    function InMemoryDbService() {\r\n\t    }\r\n\t    return InMemoryDbService;\r\n\t}());\r\n\t/**\r\n\t* Interface for InMemoryBackend configuration options\r\n\t*/\r\n\tvar InMemoryBackendConfigArgs = (function () {\r\n\t    function InMemoryBackendConfigArgs() {\r\n\t    }\r\n\t    return InMemoryBackendConfigArgs;\r\n\t}());\r\n\tfunction removeTrailingSlash(path) {\r\n\t    return path.replace(/\\/$/, '');\r\n\t}\r\n\t/////////////////////////////////\r\n\t/**\r\n\t*  InMemoryBackendService configuration options\r\n\t*  Usage:\r\n\t*    InMemoryWebApiModule.forRoot(InMemHeroService, {delay: 600})\r\n\t*\r\n\t*  or if providing separately:\r\n\t*    provide(InMemoryBackendConfig, {useValue: {delay: 600}}),\r\n\t*/\r\n\tvar InMemoryBackendConfig = (function () {\r\n\t    function InMemoryBackendConfig(config) {\r\n\t        if (config === void 0) { config = {}; }\r\n\t        Object.assign(this, {\r\n\t            // default config:\r\n\t            caseSensitiveSearch: false,\r\n\t            defaultResponseOptions: new _angular_http.BaseResponseOptions(),\r\n\t            delay: 500,\r\n\t            delete404: false,\r\n\t            passThruUnknownUrl: false,\r\n\t            post204: true,\r\n\t            put204: true,\r\n\t            apiBase: undefined,\r\n\t            host: undefined,\r\n\t            rootPath: undefined // default value is actually set in InMemoryBackendService ctor\r\n\t        }, config);\r\n\t    }\r\n\t    InMemoryBackendConfig.decorators = [\r\n\t        { type: _angular_core.Injectable },\r\n\t    ];\r\n\t    /** @nocollapse */\r\n\t    InMemoryBackendConfig.ctorParameters = function () { return [\r\n\t        { type: InMemoryBackendConfigArgs, },\r\n\t    ]; };\r\n\t    return InMemoryBackendConfig;\r\n\t}());\r\n\t/**\r\n\t * Returns true if the the Http Status Code is 200-299 (success)\r\n\t */\r\n\tfunction isSuccess(status) { return status >= 200 && status < 300; }\r\n\t\r\n\t/**\r\n\t * Set the status text in a response:\r\n\t */\r\n\tfunction setStatusText(options) {\r\n\t    try {\r\n\t        var statusCode = STATUS_CODE_INFO[options.status];\r\n\t        options['statusText'] = statusCode ? statusCode.text : 'Unknown Status';\r\n\t        return options;\r\n\t    }\r\n\t    catch (err) {\r\n\t        return new _angular_http.ResponseOptions({\r\n\t            status: STATUS.INTERNAL_SERVER_ERROR,\r\n\t            statusText: 'Invalid Server Operation'\r\n\t        });\r\n\t    }\r\n\t}\r\n\t////////////  InMemoryBackendService ///////////\r\n\t/**\r\n\t * Simulate the behavior of a RESTy web api\r\n\t * backed by the simple in-memory data store provided by the injected InMemoryDataService service.\r\n\t * Conforms mostly to behavior described here:\r\n\t * http://www.restapitutorial.com/lessons/httpmethods.html\r\n\t *\r\n\t * ### Usage\r\n\t *\r\n\t * Create `InMemoryDataService` class that implements `InMemoryDataService`.\r\n\t * Call `forRoot` static method with this service class and optional configuration object:\r\n\t * ```\r\n\t * // other imports\r\n\t * import { HttpModule }           from '@angular/http';\r\n\t * import { InMemoryWebApiModule } from 'angular-in-memory-web-api';\r\n\t *\r\n\t * import { InMemHeroService, inMemConfig } from '../api/in-memory-hero.service';\r\n\t * @NgModule({\r\n\t *  imports: [\r\n\t *    HttpModule,\r\n\t *    InMemoryWebApiModule.forRoot(InMemHeroService, inMemConfig),\r\n\t *    ...\r\n\t *  ],\r\n\t *  ...\r\n\t * })\r\n\t * export class AppModule { ... }\r\n\t * ```\r\n\t */\r\n\tvar InMemoryBackendService = (function () {\r\n\t    function InMemoryBackendService(injector, inMemDbService, config) {\r\n\t        this.injector = injector;\r\n\t        this.inMemDbService = inMemDbService;\r\n\t        this.config = new InMemoryBackendConfig();\r\n\t        this.resetDb();\r\n\t        var loc = this.getLocation('./');\r\n\t        this.config.host = loc.host; // default to app web server host\r\n\t        this.config.rootPath = loc.pathname; // default to path when app is served (e.g.'/')\r\n\t        Object.assign(this.config, config || {});\r\n\t        this.setPassThruBackend();\r\n\t    }\r\n\t    InMemoryBackendService.prototype.createConnection = function (req) {\r\n\t        var response;\r\n\t        try {\r\n\t            response = this.handleRequest(req);\r\n\t        }\r\n\t        catch (error) {\r\n\t            var err = error.message || error;\r\n\t            var options = createErrorResponse(req, STATUS.INTERNAL_SERVER_ERROR, \"\" + err);\r\n\t            response = this.addDelay(createObservableResponse(req, options));\r\n\t        }\r\n\t        return {\r\n\t            readyState: _angular_http.ReadyState.Done,\r\n\t            request: req,\r\n\t            response: response\r\n\t        };\r\n\t    };\r\n\t    ////  protected /////\r\n\t    /**\r\n\t     * Process Request and return an Observable of Http Response object\r\n\t     * in the manner of a RESTy web api.\r\n\t     *\r\n\t     * Expect URI pattern in the form :base/:collectionName/:id?\r\n\t     * Examples:\r\n\t     *   // for store with a 'customers' collection\r\n\t     *   GET api/customers          // all customers\r\n\t     *   GET api/customers/42       // the character with id=42\r\n\t     *   GET api/customers?name=^j  // 'j' is a regex; returns customers whose name starts with 'j' or 'J'\r\n\t     *   GET api/customers.json/42  // ignores the \".json\"\r\n\t     *\r\n\t     * Also accepts direct commands to the service in which the last segment of the apiBase is the word \"commands\"\r\n\t     * Examples:\r\n\t     *     POST commands/resetDb,\r\n\t     *     GET/POST commands/config - get or (re)set the config\r\n\t     *\r\n\t     *   HTTP overrides:\r\n\t     *     If the injected inMemDbService defines an HTTP method (lowercase)\r\n\t     *     The request is forwarded to that method as in\r\n\t     *     `inMemDbService.get(httpMethodInterceptorArgs)`\r\n\t     *     which must return an `Observable<Response>`\r\n\t     */\r\n\t    InMemoryBackendService.prototype.handleRequest = function (req) {\r\n\t        var parsed = this.inMemDbService['parseUrl'] ?\r\n\t            // parse with override method\r\n\t            this.inMemDbService['parseUrl'](req.url) :\r\n\t            // parse with default url parser\r\n\t            this.parseUrl(req.url);\r\n\t        var base = parsed.base, collectionName = parsed.collectionName, id = parsed.id, query = parsed.query, resourceUrl = parsed.resourceUrl;\r\n\t        var collection = this.db[collectionName];\r\n\t        var reqInfo = {\r\n\t            req: req,\r\n\t            base: base,\r\n\t            collection: collection,\r\n\t            collectionName: collectionName,\r\n\t            headers: new _angular_http.Headers({ 'Content-Type': 'application/json' }),\r\n\t            id: this.parseId(collection, id),\r\n\t            query: query,\r\n\t            resourceUrl: resourceUrl\r\n\t        };\r\n\t        var reqMethodName = _angular_http.RequestMethod[req.method || 0].toLowerCase();\r\n\t        var resOptions;\r\n\t        if (/commands\\/$/i.test(reqInfo.base)) {\r\n\t            return this.commands(reqInfo);\r\n\t        }\r\n\t        else if (this.inMemDbService[reqMethodName]) {\r\n\t            // InMemoryDbService has an overriding interceptor for this HTTP method; call it\r\n\t            // The interceptor result must be an Observable<Response>\r\n\t            var interceptorArgs = {\r\n\t                requestInfo: reqInfo,\r\n\t                db: this.db,\r\n\t                config: this.config,\r\n\t                passThruBackend: this.passThruBackend\r\n\t            };\r\n\t            var interceptorResponse = this.inMemDbService[reqMethodName](interceptorArgs);\r\n\t            return this.addDelay(interceptorResponse);\r\n\t        }\r\n\t        else if (reqInfo.collection) {\r\n\t            // request is for a collection created by the InMemoryDbService\r\n\t            return this.addDelay(this.collectionHandler(reqInfo));\r\n\t        }\r\n\t        else if (this.passThruBackend) {\r\n\t            // Passes request thru to a \"real\" backend which returns an Observable<Response>\r\n\t            // BAIL OUT with this Observable<Response>\r\n\t            return this.passThruBackend.createConnection(req).response;\r\n\t        }\r\n\t        else {\r\n\t            // can't handle this request\r\n\t            resOptions = createErrorResponse(req, STATUS.NOT_FOUND, \"Collection '\" + collectionName + \"' not found\");\r\n\t            return this.addDelay(createObservableResponse(req, resOptions));\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * Add configured delay to response observable unless delay === 0\r\n\t     */\r\n\t    InMemoryBackendService.prototype.addDelay = function (response) {\r\n\t        var delay = this.config.delay;\r\n\t        return delay === 0 ? response : response.delay(delay || 500);\r\n\t    };\r\n\t    /**\r\n\t     * Apply query/search parameters as a filter over the collection\r\n\t     * This impl only supports RegExp queries on string properties of the collection\r\n\t     * ANDs the conditions together\r\n\t     */\r\n\t    InMemoryBackendService.prototype.applyQuery = function (collection, query) {\r\n\t        // extract filtering conditions - {propertyName, RegExps) - from query/search parameters\r\n\t        var conditions = [];\r\n\t        var caseSensitive = this.config.caseSensitiveSearch ? undefined : 'i';\r\n\t        query.paramsMap.forEach(function (value, name) {\r\n\t            value.forEach(function (v) { return conditions.push({ name: name, rx: new RegExp(decodeURI(v), caseSensitive) }); });\r\n\t        });\r\n\t        var len = conditions.length;\r\n\t        if (!len) {\r\n\t            return collection;\r\n\t        }\r\n\t        // AND the RegExp conditions\r\n\t        return collection.filter(function (row) {\r\n\t            var ok = true;\r\n\t            var i = len;\r\n\t            while (ok && i) {\r\n\t                i -= 1;\r\n\t                var cond = conditions[i];\r\n\t                ok = cond.rx.test(row[cond.name]);\r\n\t            }\r\n\t            return ok;\r\n\t        });\r\n\t    };\r\n\t    InMemoryBackendService.prototype.clone = function (data) {\r\n\t        return JSON.parse(JSON.stringify(data));\r\n\t    };\r\n\t    InMemoryBackendService.prototype.collectionHandler = function (reqInfo) {\r\n\t        var _this = this;\r\n\t        var req = reqInfo.req;\r\n\t        return new rxjs_Observable.Observable(function (responseObserver) {\r\n\t            var resOptions;\r\n\t            switch (req.method) {\r\n\t                case _angular_http.RequestMethod.Get:\r\n\t                    resOptions = _this.get(reqInfo);\r\n\t                    break;\r\n\t                case _angular_http.RequestMethod.Post:\r\n\t                    resOptions = _this.post(reqInfo);\r\n\t                    break;\r\n\t                case _angular_http.RequestMethod.Put:\r\n\t                    resOptions = _this.put(reqInfo);\r\n\t                    break;\r\n\t                case _angular_http.RequestMethod.Delete:\r\n\t                    resOptions = _this.delete(reqInfo);\r\n\t                    break;\r\n\t                default:\r\n\t                    resOptions = createErrorResponse(req, STATUS.METHOD_NOT_ALLOWED, 'Method not allowed');\r\n\t                    break;\r\n\t            }\r\n\t            // If `inMemDbService.responseInterceptor` exists, let it morph the response options\r\n\t            if (_this.inMemDbService['responseInterceptor']) {\r\n\t                resOptions = _this.inMemDbService['responseInterceptor'](resOptions, reqInfo);\r\n\t            }\r\n\t            emitResponse(responseObserver, reqInfo.req, resOptions);\r\n\t            return function () { }; // unsubscribe function\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * When the last segment of the `base` path is \"commands\", the `collectionName` is the command\r\n\t     * Example URLs:\r\n\t     *   commands/resetdb   // Reset the \"database\" to its original state\r\n\t     *   commands/config (GET) // Return this service's config object\r\n\t     *   commands/config (!GET) // Update the config (e.g. delay)\r\n\t     *\r\n\t     * Commands are \"hot\", meaning they are always executed immediately\r\n\t     * whether or not someone subscribes to the returned observable\r\n\t     *\r\n\t     * Usage:\r\n\t     *   http.post('commands/resetdb', undefined);\r\n\t     *   http.get('commands/config');\r\n\t     *   http.post('commands/config', '{\"delay\":1000}');\r\n\t     */\r\n\t    InMemoryBackendService.prototype.commands = function (reqInfo) {\r\n\t        var command = reqInfo.collectionName.toLowerCase();\r\n\t        var method = reqInfo.req.method;\r\n\t        var resOptions;\r\n\t        switch (command) {\r\n\t            case 'resetdb':\r\n\t                this.resetDb();\r\n\t                resOptions = new _angular_http.ResponseOptions({ status: STATUS.OK });\r\n\t                break;\r\n\t            case 'config':\r\n\t                if (method === _angular_http.RequestMethod.Get) {\r\n\t                    resOptions = new _angular_http.ResponseOptions({\r\n\t                        body: this.clone(this.config),\r\n\t                        status: STATUS.OK\r\n\t                    });\r\n\t                }\r\n\t                else {\r\n\t                    // Be nice ... any other method is a config update\r\n\t                    var body = JSON.parse(reqInfo.req.text() || '{}');\r\n\t                    Object.assign(this.config, body);\r\n\t                    this.setPassThruBackend();\r\n\t                    resOptions = new _angular_http.ResponseOptions({ status: STATUS.NO_CONTENT });\r\n\t                }\r\n\t                break;\r\n\t            default:\r\n\t                resOptions = createErrorResponse(reqInfo.req, STATUS.INTERNAL_SERVER_ERROR, \"Unknown command \\\"\" + command + \"\\\"\");\r\n\t        }\r\n\t        return createObservableResponse(reqInfo.req, resOptions);\r\n\t    };\r\n\t    InMemoryBackendService.prototype.delete = function (_a) {\r\n\t        var id = _a.id, collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, req = _a.req;\r\n\t        if (!id) {\r\n\t            return createErrorResponse(req, STATUS.NOT_FOUND, \"Missing \\\"\" + collectionName + \"\\\" id\");\r\n\t        }\r\n\t        var exists = this.removeById(collection, id);\r\n\t        return new _angular_http.ResponseOptions({\r\n\t            headers: headers,\r\n\t            status: (exists || !this.config.delete404) ? STATUS.NO_CONTENT : STATUS.NOT_FOUND\r\n\t        });\r\n\t    };\r\n\t    InMemoryBackendService.prototype.findById = function (collection, id) {\r\n\t        return collection.find(function (item) { return item.id === id; });\r\n\t    };\r\n\t    InMemoryBackendService.prototype.genId = function (collection) {\r\n\t        // assumes numeric ids\r\n\t        var maxId = 0;\r\n\t        collection.reduce(function (prev, item) {\r\n\t            maxId = Math.max(maxId, typeof item.id === 'number' ? item.id : maxId);\r\n\t        }, undefined);\r\n\t        return maxId + 1;\r\n\t    };\r\n\t    InMemoryBackendService.prototype.get = function (_a) {\r\n\t        var id = _a.id, query = _a.query, collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, req = _a.req;\r\n\t        var data = collection;\r\n\t        if (id) {\r\n\t            data = this.findById(collection, id);\r\n\t        }\r\n\t        else if (query) {\r\n\t            data = this.applyQuery(collection, query);\r\n\t        }\r\n\t        if (!data) {\r\n\t            return createErrorResponse(req, STATUS.NOT_FOUND, \"'\" + collectionName + \"' with id='\" + id + \"' not found\");\r\n\t        }\r\n\t        return new _angular_http.ResponseOptions({\r\n\t            body: { data: this.clone(data) },\r\n\t            headers: headers,\r\n\t            status: STATUS.OK\r\n\t        });\r\n\t    };\r\n\t    InMemoryBackendService.prototype.getLocation = function (href) {\r\n\t        var l = document.createElement('a');\r\n\t        l.href = href;\r\n\t        return l;\r\n\t    };\r\n\t    \r\n\t    InMemoryBackendService.prototype.indexOf = function (collection, id) {\r\n\t        return collection.findIndex(function (item) { return item.id === id; });\r\n\t    };\r\n\t    // tries to parse id as number if collection item.id is a number.\r\n\t    // returns the original param id otherwise.\r\n\t    InMemoryBackendService.prototype.parseId = function (collection, id) {\r\n\t        // tslint:disable-next-line:triple-equals\r\n\t        if (!collection || id == undefined) {\r\n\t            return undefined;\r\n\t        }\r\n\t        var isNumberId = collection[0] && typeof collection[0].id === 'number';\r\n\t        if (isNumberId) {\r\n\t            var idNum = parseFloat(id);\r\n\t            return isNaN(idNum) ? id : idNum;\r\n\t        }\r\n\t        return id;\r\n\t    };\r\n\t    /**\r\n\t     * Parses the request URL into a `ParsedUrl` object.\r\n\t     * Parsing depends upon certain values of `config`: `apiBase`, `host`, and `urlRoot`.\r\n\t     *\r\n\t     * Configuring the `apiBase` yields the most interesting changes to `parseUrl` behavior:\r\n\t     *   When apiBase=undefined and url='http://localhost/api/collection/42'\r\n\t     *     {base: 'api/', collectionName: 'collection', id: '42', ...}\r\n\t     *   When apiBase='some/api/root/' and url='http://localhost/some/api/root/collection'\r\n\t     *     {base: 'some/api/root/', collectionName: 'collection', id: undefined, ...}\r\n\t     *   When apiBase='/' and url='http://localhost/collection'\r\n\t     *     {base: '/', collectionName: 'collection', id: undefined, ...}\r\n\t     *\r\n\t     * The actual api base segment values are ignored. Only the number of segments matters.\r\n\t     * The following api base strings are considered identical: 'a/b' ~ 'some/api/' ~ `two/segments'\r\n\t     *\r\n\t     * To replace this default method, assign your alternative to your InMemDbService['parseUrl']\r\n\t     */\r\n\t    InMemoryBackendService.prototype.parseUrl = function (url) {\r\n\t        try {\r\n\t            var loc = this.getLocation(url);\r\n\t            var drop = this.config.rootPath.length;\r\n\t            var urlRoot = '';\r\n\t            if (loc.host !== this.config.host) {\r\n\t                // url for a server on a different host!\r\n\t                // assume it's collection is actually here too.\r\n\t                drop = 1; // the leading slash\r\n\t                urlRoot = loc.protocol + '//' + loc.host + '/';\r\n\t            }\r\n\t            var path = loc.pathname.substring(drop);\r\n\t            var pathSegments = path.split('/');\r\n\t            var segmentIx = 0;\r\n\t            // apiBase: the front part of the path devoted to getting to the api route\r\n\t            // Assumes first path segment if no config.apiBase\r\n\t            // else ignores as many path segments as are in config.apiBase\r\n\t            // Does NOT care what the api base chars actually are.\r\n\t            var apiBase = void 0;\r\n\t            // tslint:disable-next-line:triple-equals\r\n\t            if (this.config.apiBase == undefined) {\r\n\t                apiBase = pathSegments[segmentIx++];\r\n\t            }\r\n\t            else {\r\n\t                apiBase = removeTrailingSlash(this.config.apiBase.trim());\r\n\t                if (apiBase) {\r\n\t                    segmentIx = apiBase.split('/').length;\r\n\t                }\r\n\t                else {\r\n\t                    segmentIx = 0; // no api base at all; unwise but allowed.\r\n\t                }\r\n\t            }\r\n\t            apiBase = apiBase + '/';\r\n\t            var collectionName = pathSegments[segmentIx++];\r\n\t            // ignore anything after a '.' (e.g.,the \"json\" in \"customers.json\")\r\n\t            collectionName = collectionName && collectionName.split('.')[0];\r\n\t            var id = pathSegments[segmentIx++];\r\n\t            var query = loc.search && new _angular_http.URLSearchParams(loc.search.substr(1));\r\n\t            var resourceUrl = urlRoot + apiBase + collectionName + '/';\r\n\t            return { base: apiBase, collectionName: collectionName, id: id, query: query, resourceUrl: resourceUrl };\r\n\t        }\r\n\t        catch (err) {\r\n\t            var msg = \"unable to parse url '\" + url + \"'; original error: \" + err.message;\r\n\t            throw new Error(msg);\r\n\t        }\r\n\t    };\r\n\t    InMemoryBackendService.prototype.post = function (_a) {\r\n\t        var collection = _a.collection, headers = _a.headers, id = _a.id, req = _a.req, resourceUrl = _a.resourceUrl;\r\n\t        var item = JSON.parse(req.text());\r\n\t        // tslint:disable-next-line:triple-equals\r\n\t        if (item.id == undefined) {\r\n\t            item.id = id || this.genId(collection);\r\n\t        }\r\n\t        // ignore the request id, if any. Alternatively,\r\n\t        // could reject request if id differs from item.id\r\n\t        id = item.id;\r\n\t        var existingIx = this.indexOf(collection, id);\r\n\t        var body = { data: this.clone(item) };\r\n\t        if (existingIx > -1) {\r\n\t            collection[existingIx] = item;\r\n\t            var res = this.config.post204 ?\r\n\t                { headers: headers, status: STATUS.NO_CONTENT } :\r\n\t                { headers: headers, body: body, status: STATUS.OK }; // successful; return entity\r\n\t            return new _angular_http.ResponseOptions(res);\r\n\t        }\r\n\t        else {\r\n\t            collection.push(item);\r\n\t            headers.set('Location', resourceUrl + '/' + id);\r\n\t            return new _angular_http.ResponseOptions({ headers: headers, body: body, status: STATUS.CREATED });\r\n\t        }\r\n\t    };\r\n\t    InMemoryBackendService.prototype.put = function (_a) {\r\n\t        var id = _a.id, collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, req = _a.req;\r\n\t        var item = JSON.parse(req.text());\r\n\t        // tslint:disable-next-line:triple-equals\r\n\t        if (item.id == undefined) {\r\n\t            return createErrorResponse(req, STATUS.NOT_FOUND, \"Missing '\" + collectionName + \"' id\");\r\n\t        }\r\n\t        if (id !== item.id) {\r\n\t            return createErrorResponse(req, STATUS.BAD_REQUEST, \"\\\"\" + collectionName + \"\\\" id does not match item.id\");\r\n\t        }\r\n\t        var existingIx = this.indexOf(collection, id);\r\n\t        var body = { data: this.clone(item) };\r\n\t        if (existingIx > -1) {\r\n\t            collection[existingIx] = item;\r\n\t            var res = this.config.put204 ?\r\n\t                { headers: headers, status: STATUS.NO_CONTENT } :\r\n\t                { headers: headers, body: body, status: STATUS.OK }; // successful; return entity\r\n\t            return new _angular_http.ResponseOptions(res);\r\n\t        }\r\n\t        else {\r\n\t            collection.push(item);\r\n\t            return new _angular_http.ResponseOptions({ headers: headers, body: body, status: STATUS.CREATED });\r\n\t        }\r\n\t    };\r\n\t    InMemoryBackendService.prototype.removeById = function (collection, id) {\r\n\t        var ix = this.indexOf(collection, id);\r\n\t        if (ix > -1) {\r\n\t            collection.splice(ix, 1);\r\n\t            return true;\r\n\t        }\r\n\t        return false;\r\n\t    };\r\n\t    /**\r\n\t     * Reset the \"database\" to its original state\r\n\t     */\r\n\t    InMemoryBackendService.prototype.resetDb = function () {\r\n\t        this.db = this.inMemDbService.createDb();\r\n\t    };\r\n\t    InMemoryBackendService.prototype.setPassThruBackend = function () {\r\n\t        this.passThruBackend = undefined;\r\n\t        if (this.config.passThruUnknownUrl) {\r\n\t            try {\r\n\t                // copied from @angular/http/backends/xhr_backend\r\n\t                var browserXhr = this.injector.get(_angular_http.BrowserXhr);\r\n\t                var baseResponseOptions = this.injector.get(_angular_http.ResponseOptions);\r\n\t                var xsrfStrategy = this.injector.get(_angular_http.XSRFStrategy);\r\n\t                this.passThruBackend = new _angular_http.XHRBackend(browserXhr, baseResponseOptions, xsrfStrategy);\r\n\t            }\r\n\t            catch (ex) {\r\n\t                ex.message = 'Cannot create passThru404 backend; ' + (ex.message || '');\r\n\t                throw ex;\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    InMemoryBackendService.decorators = [\r\n\t        { type: _angular_core.Injectable },\r\n\t    ];\r\n\t    /** @nocollapse */\r\n\t    InMemoryBackendService.ctorParameters = function () { return [\r\n\t        { type: _angular_core.Injector, },\r\n\t        { type: InMemoryDbService, },\r\n\t        { type: InMemoryBackendConfigArgs, decorators: [{ type: _angular_core.Inject, args: [InMemoryBackendConfig,] }, { type: _angular_core.Optional },] },\r\n\t    ]; };\r\n\t    return InMemoryBackendService;\r\n\t}());\n\t\n\t// AoT requires factory to be exported\r\n\tfunction inMemoryBackendServiceFactory(injector, dbService, options) {\r\n\t    var backend = new InMemoryBackendService(injector, dbService, options);\r\n\t    return backend;\r\n\t}\r\n\tvar InMemoryWebApiModule = (function () {\r\n\t    function InMemoryWebApiModule() {\r\n\t    }\r\n\t    /**\r\n\t    *  Prepare in-memory-web-api in the root/boot application module\r\n\t    *  with class that implements InMemoryDbService and creates an in-memory database.\r\n\t    *\r\n\t    * @param {Type} dbCreator - Class that creates seed data for in-memory database. Must implement InMemoryDbService.\r\n\t    * @param {InMemoryBackendConfigArgs} [options]\r\n\t    *\r\n\t    * @example\r\n\t    * InMemoryWebApiModule.forRoot(dbCreator);\r\n\t    * InMemoryWebApiModule.forRoot(dbCreator, {useValue: {delay:600}});\r\n\t    */\r\n\t    InMemoryWebApiModule.forRoot = function (dbCreator, options) {\r\n\t        return {\r\n\t            ngModule: InMemoryWebApiModule,\r\n\t            providers: [\r\n\t                { provide: InMemoryDbService, useClass: dbCreator },\r\n\t                { provide: InMemoryBackendConfig, useValue: options },\r\n\t            ]\r\n\t        };\r\n\t    };\r\n\t    InMemoryWebApiModule.decorators = [\r\n\t        { type: _angular_core.NgModule, args: [{\r\n\t                    // Must useFactory for AoT\r\n\t                    // https://github.com/angular/angular/issues/11178\r\n\t                    providers: [{ provide: _angular_http.XHRBackend,\r\n\t                            useFactory: inMemoryBackendServiceFactory,\r\n\t                            deps: [_angular_core.Injector, InMemoryDbService, InMemoryBackendConfig] }]\r\n\t                },] },\r\n\t    ];\r\n\t    /** @nocollapse */\r\n\t    InMemoryWebApiModule.ctorParameters = function () { return []; };\r\n\t    return InMemoryWebApiModule;\r\n\t}());\n\t\n\texports.STATUS = STATUS;\n\texports.STATUS_CODE_INFO = STATUS_CODE_INFO;\n\texports.createErrorResponse = createErrorResponse;\n\texports.createObservableResponse = createObservableResponse;\n\texports.emitResponse = emitResponse;\n\texports.InMemoryDbService = InMemoryDbService;\n\texports.InMemoryBackendConfigArgs = InMemoryBackendConfigArgs;\n\texports.removeTrailingSlash = removeTrailingSlash;\n\texports.InMemoryBackendConfig = InMemoryBackendConfig;\n\texports.isSuccess = isSuccess;\n\texports.setStatusText = setStatusText;\n\texports.InMemoryBackendService = InMemoryBackendService;\n\texports.inMemoryBackendServiceFactory = inMemoryBackendServiceFactory;\n\texports.InMemoryWebApiModule = InMemoryWebApiModule;\n\t\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\t\n\t})));\n\n\n/***/ },\n/* 31 */,\n/* 32 */,\n/* 33 */,\n/* 34 */,\n/* 35 */,\n/* 36 */,\n/* 37 */,\n/* 38 */,\n/* 39 */,\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(4);\r\n\tvar AppComponent = (function () {\r\n\t    function AppComponent() {\r\n\t        this.emoji = ['🎉', '😍', '😜', '👍'];\r\n\t    }\r\n\t    AppComponent.prototype.changeEmoji = function () {\r\n\t        this.activeEmoji = this.emoji[Math.floor(Math.random() * this.emoji.length)];\r\n\t    };\r\n\t    return AppComponent;\r\n\t}());\r\n\tAppComponent = __decorate([\r\n\t    core_1.Component({\r\n\t        selector: 'app-root',\r\n\t        template: __webpack_require__(41),\r\n\t        styles: [__webpack_require__(42)]\r\n\t    }),\r\n\t    __metadata(\"design:paramtypes\", [])\r\n\t], AppComponent);\r\n\texports.AppComponent = AppComponent;\r\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<app-entry-list></app-entry-list>\";\n\n/***/ },\n/* 42 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"h2 {\\n    font-family: sans-serif;\\n    font-size: 1.2em;\\n}\"\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(44));\r\n\t__export(__webpack_require__(45));\r\n\t__export(__webpack_require__(48));\r\n\t__export(__webpack_require__(52));\r\n\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(4);\r\n\tvar http_1 = __webpack_require__(25);\r\n\tvar EntryService = (function () {\r\n\t    function EntryService(http) {\r\n\t        this.http = http;\r\n\t    }\r\n\t    EntryService.prototype.addComment = function (entryId, comment) {\r\n\t        return this.http.post(\"/app/entries/\" + entryId + \"/comments\", comment)\r\n\t            .toPromise();\r\n\t    };\r\n\t    EntryService.prototype.getEntries = function () {\r\n\t        return this.http.get('/app/entries')\r\n\t            .toPromise()\r\n\t            .then(function (response) { return response.json().data; });\r\n\t    };\r\n\t    return EntryService;\r\n\t}());\r\n\tEntryService = __decorate([\r\n\t    core_1.Injectable(),\r\n\t    __metadata(\"design:paramtypes\", [http_1.Http])\r\n\t], EntryService);\r\n\texports.EntryService = EntryService;\r\n\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(4);\r\n\tvar entry_service_1 = __webpack_require__(44);\r\n\tvar EntryListComponent = (function () {\r\n\t    function EntryListComponent(entryService) {\r\n\t        this.entryService = entryService;\r\n\t    }\r\n\t    EntryListComponent.prototype.ngOnInit = function () {\r\n\t        var _this = this;\r\n\t        this.entryService\r\n\t            .getEntries()\r\n\t            .then(function (entries) { return _this.entries = entries; });\r\n\t    };\r\n\t    return EntryListComponent;\r\n\t}());\r\n\tEntryListComponent = __decorate([\r\n\t    core_1.Component({\r\n\t        selector: 'app-entry-list',\r\n\t        template: __webpack_require__(46),\r\n\t        styles: [__webpack_require__(47)]\r\n\t    }),\r\n\t    __metadata(\"design:paramtypes\", [entry_service_1.EntryService])\r\n\t], EntryListComponent);\r\n\texports.EntryListComponent = EntryListComponent;\r\n\n\n/***/ },\n/* 46 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<app-entry *ngFor=\\\"let entry of entries\\\" [entry]=\\\"entry\\\"></app-entry>\";\n\n/***/ },\n/* 47 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"\"\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(4);\r\n\tvar entry_model_1 = __webpack_require__(49);\r\n\tvar EntryComponent = (function () {\r\n\t    function EntryComponent() {\r\n\t    }\r\n\t    EntryComponent.prototype.onCommentAdded = function (comment) {\r\n\t        this.entry.comments.push(comment);\r\n\t    };\r\n\t    return EntryComponent;\r\n\t}());\r\n\t__decorate([\r\n\t    core_1.Input(),\r\n\t    __metadata(\"design:type\", entry_model_1.Entry)\r\n\t], EntryComponent.prototype, \"entry\", void 0);\r\n\tEntryComponent = __decorate([\r\n\t    core_1.Component({\r\n\t        selector: 'app-entry',\r\n\t        template: __webpack_require__(50),\r\n\t        styles: [__webpack_require__(51)]\r\n\t    }),\r\n\t    __metadata(\"design:paramtypes\", [])\r\n\t], EntryComponent);\r\n\texports.EntryComponent = EntryComponent;\r\n\n\n/***/ },\n/* 49 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar Entry = (function () {\r\n\t    function Entry() {\r\n\t    }\r\n\t    return Entry;\r\n\t}());\r\n\texports.Entry = Entry;\r\n\n\n/***/ },\n/* 50 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<h2>{{entry.title}}</h2>\\n<figure>\\n    <img src=\\\"{{entry.photo}}\\\">\\n    <figcaption>{{entry.description}}</figcaption>\\n</figure>\\n<div class=\\\"actions\\\">\\n    <button type=\\\"button\\\" (click)=\\\"isLiked = !isLiked\\\" [ngClass]=\\\"{liked: isLiked}\\\">❤</button>\\n    <button type=\\\"button\\\" (click)=\\\"showComments = !showComments\\\">Comments ({{entry.comments.length}})</button>\\n</div>\\n<div class=\\\"comments\\\" *ngIf=\\\"showComments\\\">\\n    <div class=\\\"comment\\\" *ngFor=\\\"let comment of entry.comments\\\">\\n        <p><strong>{{comment.name}}</strong> {{comment.comment}}</p>\\n    </div>\\n    <app-entry-comment-form (onCommentAdded)=\\\"onCommentAdded($event)\\\" [entryId]=\\\"entry.id\\\"></app-entry-comment-form>\\n</div>\";\n\n/***/ },\n/* 51 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"figure {\\n    margin: 0;\\n    border: 1px solid #000;\\n    position: relative;\\n}\\n\\nfigcaption {\\n    background-color: rgba(0, 0, 0, 0.5);\\n    color: #fff;\\n    font-size: 1.2em;\\n    padding: 10px;\\n    position: absolute;\\n    bottom: 0;\\n    left: 0;\\n    right: 0;\\n}\\n\\nimg {\\n    display: block;\\n    width: 100%;\\n    height: auto;\\n}\\n\\n:host {\\n    padding: 1em;\\n    display: block;\\n}\\n\\n.actions {\\n    padding: 1em 0;\\n}\\n\\n.liked {\\n    color: red;\\n}\\n\\n\\n\\n\\n\\n\\n\\n\"\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n\t};\r\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\r\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n\t};\r\n\tvar core_1 = __webpack_require__(4);\r\n\tvar forms_1 = __webpack_require__(26);\r\n\tvar entry_service_1 = __webpack_require__(44);\r\n\tvar EntryCommentFormComponent = (function () {\r\n\t    function EntryCommentFormComponent(entryService) {\r\n\t        this.entryService = entryService;\r\n\t        this.name = \"\";\r\n\t        this.comment = \"\";\r\n\t        this.onCommentAdded = new core_1.EventEmitter();\r\n\t    }\r\n\t    EntryCommentFormComponent.prototype.onSubmit = function (commentForm) {\r\n\t        var _this = this;\r\n\t        if (this.commentForm.invalid)\r\n\t            return;\r\n\t        var comment = { name: this.name, comment: this.comment };\r\n\t        this.entryService.addComment(this.entryId, comment)\r\n\t            .then(function () {\r\n\t            _this.onCommentAdded.emit(comment);\r\n\t            _this.commentForm.resetForm();\r\n\t        });\r\n\t    };\r\n\t    return EntryCommentFormComponent;\r\n\t}());\r\n\t__decorate([\r\n\t    core_1.Input(),\r\n\t    __metadata(\"design:type\", Number)\r\n\t], EntryCommentFormComponent.prototype, \"entryId\", void 0);\r\n\t__decorate([\r\n\t    core_1.Output(),\r\n\t    __metadata(\"design:type\", Object)\r\n\t], EntryCommentFormComponent.prototype, \"onCommentAdded\", void 0);\r\n\t__decorate([\r\n\t    core_1.ViewChild('commentForm'),\r\n\t    __metadata(\"design:type\", forms_1.NgForm)\r\n\t], EntryCommentFormComponent.prototype, \"commentForm\", void 0);\r\n\tEntryCommentFormComponent = __decorate([\r\n\t    core_1.Component({\r\n\t        selector: 'app-entry-comment-form',\r\n\t        template: __webpack_require__(53)\r\n\t    }),\r\n\t    __metadata(\"design:paramtypes\", [entry_service_1.EntryService])\r\n\t], EntryCommentFormComponent);\r\n\texports.EntryCommentFormComponent = EntryCommentFormComponent;\r\n\n\n/***/ },\n/* 53 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<form (submit)=\\\"onSubmit()\\\" #commentForm=\\\"ngForm\\\" novalidate>\\n    <div>\\n        <label for=\\\"name\\\">Name</label>\\n        <input type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"name\\\" \\n            required minlength=\\\"3\\\" #nameField=\\\"ngModel\\\" \\n            [ngStyle]=\\\"{'outline-color': nameField.dirty && nameField.valid ? 'green' : undefined }\\\"/>\\n        <div class=\\\"alert alert-danger\\\" *ngIf=\\\"(commentForm.submitted || nameField.touched) && nameField.errors\\\">\\n            <div [hidden]=\\\"!nameField.errors.required\\\">Name is required</div>\\n            <div [hidden]=\\\"!nameField.errors.minlength\\\">Name must be a minimum of 3 characters long</div>\\n        </div>\\n    </div>\\n    <div>\\n        <label for=\\\"comment\\\">Comment</label>\\n        <textarea name=\\\"comment\\\" [(ngModel)]=\\\"comment\\\" \\n            required minlength=\\\"3\\\" #commentField=\\\"ngModel\\\"\\n            [ngStyle]=\\\"{'outline-color': commentField.dirty && commentField.valid ? 'green' : undefined }\\\"></textarea>\\n        <div class=\\\"alert alert-danger\\\" *ngIf=\\\"(commentForm.submitted || commentField.touched) && commentField.errors\\\">\\n            <div [hidden]=\\\"!commentField.errors.required\\\">Comment is required</div>\\n            <div [hidden]=\\\"!commentField.errors.minlength\\\">Comment must be a minimum of 3 characters long</div>\\n        </div>\\n    </div>\\n    <div>\\n        <button>Submit</button>\\n    </div>\\n</form>\";\n\n/***/ },\n/* 54 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar InMemoryEntryService = (function () {\r\n\t    function InMemoryEntryService() {\r\n\t    }\r\n\t    InMemoryEntryService.prototype.createDb = function () {\r\n\t        var entries = [\r\n\t            {\r\n\t                id: 1,\r\n\t                title: 'Burning Sundown Behind Trees',\r\n\t                description: 'A view of the setting sun through trees',\r\n\t                photo: __webpack_require__(55),\r\n\t                comments: [\r\n\t                    {\r\n\t                        id: 1,\r\n\t                        name: 'Jane Smith',\r\n\t                        comment: 'This is my favorite! I love it!'\r\n\t                    }\r\n\t                ]\r\n\t            },\r\n\t            {\r\n\t                id: 2,\r\n\t                title: 'Water Lilies and Algas',\r\n\t                description: 'Still water with floating lilies',\r\n\t                photo: __webpack_require__(56),\r\n\t                comments: [\r\n\t                    {\r\n\t                        id: 2,\r\n\t                        name: 'Kyle Jones',\r\n\t                        comment: 'Nice!'\r\n\t                    },\r\n\t                    {\r\n\t                        id: 3,\r\n\t                        name: 'Alecia Clark',\r\n\t                        comment: 'All the greens make this amazing.'\r\n\t                    }\r\n\t                ]\r\n\t            },\r\n\t            {\r\n\t                id: 3,\r\n\t                title: 'German Steam Engine',\r\n\t                description: 'Trains at the station',\r\n\t                photo: __webpack_require__(57),\r\n\t                comments: []\r\n\t            },\r\n\t            {\r\n\t                id: 4,\r\n\t                title: 'Red Sun Stripe at Horizon',\r\n\t                description: 'Green fields and a glimpse of sunlight',\r\n\t                photo: __webpack_require__(58),\r\n\t                comments: [\r\n\t                    {\r\n\t                        id: 4,\r\n\t                        name: 'Steve Johnson',\r\n\t                        comment: 'It looks like trouble is on the way.'\r\n\t                    },\r\n\t                    {\r\n\t                        id: 5,\r\n\t                        name: 'Becky M',\r\n\t                        comment: 'I imagine this was a shot of a storm that just passed.'\r\n\t                    }\r\n\t                ]\r\n\t            },\r\n\t            {\r\n\t                id: 5,\r\n\t                title: 'Sundown Behind Fields',\r\n\t                description: 'Clouds taking form at sun set',\r\n\t                photo: __webpack_require__(59),\r\n\t                comments: [\r\n\t                    {\r\n\t                        id: 6,\r\n\t                        name: 'Lisa Frank',\r\n\t                        comment: 'Beautiful!'\r\n\t                    }\r\n\t                ]\r\n\t            }\r\n\t        ];\r\n\t        return { entries: entries };\r\n\t    };\r\n\t    return InMemoryEntryService;\r\n\t}());\r\n\texports.InMemoryEntryService = InMemoryEntryService;\r\n\n\n/***/ },\n/* 55 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"/assets/Burning-sundown-behind-trees.e021ce0bd0c4b835a803b1cb84bd654d.jpg\";\n\n/***/ },\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"/assets/Water-lilies-and-algas.be15b89f33e23be6195a8a39d59856ce.jpg\";\n\n/***/ },\n/* 57 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"/assets/German-steam-engine-No.4.f732e5a9a9942cfc6a3592f6df31835a.jpg\";\n\n/***/ },\n/* 58 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"/assets/Red-sun-stripe-at-horizon.0335b6c2e00bde48d380c5fc0f783210.jpg\";\n\n/***/ },\n/* 59 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"/assets/Sundown-behind-fields.519215051a43091704d1ad35184811ef.jpg\";\n\n/***/ }\n]);\n\n\n// WEBPACK FOOTER //\n// app.6ccf591343d1b54f70af.js","// Import global stylesheet\nimport './styles/main.css';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ../~/angular2-template-loader!./main.ts","module.exports = \"// removed by extract-text-webpack-plugin\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./styles/main.css\n// module id = 1\n// module chunks = 0","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpModule } from '@angular/http';\nimport { FormsModule } from '@angular/forms';\nimport { InMemoryWebApiModule } from 'angular-in-memory-web-api';\nimport { AppComponent } from './app.component';\nimport { EntryListComponent, EntryComponent, EntryService, EntryCommentFormComponent } from './entries';\nimport { InMemoryEntryService } from './backend';\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        HttpModule,\n        FormsModule,\n        InMemoryWebApiModule.forRoot(InMemoryEntryService)\n    ],\n    providers: [ EntryService ],\n    declarations: [\n        AppComponent, \n        EntryComponent,\n        EntryListComponent,\n        EntryCommentFormComponent\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n\n}\n\n\n// WEBPACK FOOTER //\n// ../~/angular2-template-loader!./app/app.module.ts","/**\n * @license Angular v2.4.2\n * (c) 2010-2016 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/operator/toPromise'), require('rxjs/Subject'), require('rxjs/Observable'), require('rxjs/observable/fromPromise')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/operator/toPromise', 'rxjs/Subject', 'rxjs/Observable', 'rxjs/observable/fromPromise'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.forms = global.ng.forms || {}),global.ng.core,global.Rx.Observable.prototype,global.Rx,global.Rx,global.Rx.Observable));\n}(this, function (exports,_angular_core,rxjs_operator_toPromise,rxjs_Subject,rxjs_Observable,rxjs_observable_fromPromise) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     *  Base class for control directives.\n      * *\n      * Only used internally in the forms module.\n      * *\n     * @abstract\n     */\n    var AbstractControlDirective = (function () {\n        function AbstractControlDirective() {\n        }\n        Object.defineProperty(AbstractControlDirective.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { throw new Error('unimplemented'); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"value\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.value : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"valid\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.valid : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"invalid\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.invalid : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"pending\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.pending : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"errors\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.errors : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"pristine\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.pristine : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"dirty\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.dirty : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"touched\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.touched : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"untouched\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.untouched : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"disabled\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.disabled : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"enabled\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.enabled : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"statusChanges\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.statusChanges : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"valueChanges\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.control ? this.control.valueChanges : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?=} value\n         * @return {?}\n         */\n        AbstractControlDirective.prototype.reset = function (value) {\n            if (value === void 0) { value = undefined; }\n            if (this.control)\n                this.control.reset(value);\n        };\n        /**\n         * @param {?} errorCode\n         * @param {?=} path\n         * @return {?}\n         */\n        AbstractControlDirective.prototype.hasError = function (errorCode, path) {\n            if (path === void 0) { path = null; }\n            return this.control ? this.control.hasError(errorCode, path) : false;\n        };\n        /**\n         * @param {?} errorCode\n         * @param {?=} path\n         * @return {?}\n         */\n        AbstractControlDirective.prototype.getError = function (errorCode, path) {\n            if (path === void 0) { path = null; }\n            return this.control ? this.control.getError(errorCode, path) : null;\n        };\n        return AbstractControlDirective;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$1 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     *  A directive that contains multiple {@link NgControl}s.\n      * *\n      * Only used by the forms module.\n      * *\n     */\n    var ControlContainer = (function (_super) {\n        __extends$1(ControlContainer, _super);\n        function ControlContainer() {\n            _super.apply(this, arguments);\n        }\n        Object.defineProperty(ControlContainer.prototype, \"formDirective\", {\n            /**\n             *  Get the form to which this container belongs.\n             * @return {?}\n             */\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ControlContainer.prototype, \"path\", {\n            /**\n             *  Get the path to this container.\n             * @return {?}\n             */\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        return ControlContainer;\n    }(AbstractControlDirective));\n\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isPresent(obj) {\n        return obj != null;\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isBlank(obj) {\n        return obj == null;\n    }\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    function looseIdentical(a, b) {\n        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n    }\n    /**\n     * @param {?} o\n     * @return {?}\n     */\n    function isJsObject(o) {\n        return o !== null && (typeof o === 'function' || typeof o === 'object');\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isPrimitive(obj) {\n        return !isJsObject(obj);\n    }\n\n    /**\n     *  Wraps Javascript Objects\n     */\n    var StringMapWrapper = (function () {\n        function StringMapWrapper() {\n        }\n        /**\n         * @param {?} m1\n         * @param {?} m2\n         * @return {?}\n         */\n        StringMapWrapper.merge = function (m1, m2) {\n            var /** @type {?} */ m = {};\n            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {\n                var k = _a[_i];\n                m[k] = m1[k];\n            }\n            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {\n                var k = _c[_b];\n                m[k] = m2[k];\n            }\n            return m;\n        };\n        /**\n         * @param {?} m1\n         * @param {?} m2\n         * @return {?}\n         */\n        StringMapWrapper.equals = function (m1, m2) {\n            var /** @type {?} */ k1 = Object.keys(m1);\n            var /** @type {?} */ k2 = Object.keys(m2);\n            if (k1.length != k2.length) {\n                return false;\n            }\n            for (var /** @type {?} */ i = 0; i < k1.length; i++) {\n                var /** @type {?} */ key = k1[i];\n                if (m1[key] !== m2[key]) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        return StringMapWrapper;\n    }());\n    var ListWrapper = (function () {\n        function ListWrapper() {\n        }\n        /**\n         * @param {?} arr\n         * @param {?} condition\n         * @return {?}\n         */\n        ListWrapper.findLast = function (arr, condition) {\n            for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {\n                if (condition(arr[i])) {\n                    return arr[i];\n                }\n            }\n            return null;\n        };\n        /**\n         * @param {?} list\n         * @param {?} items\n         * @return {?}\n         */\n        ListWrapper.removeAll = function (list, items) {\n            for (var /** @type {?} */ i = 0; i < items.length; ++i) {\n                var /** @type {?} */ index = list.indexOf(items[i]);\n                if (index > -1) {\n                    list.splice(index, 1);\n                }\n            }\n        };\n        /**\n         * @param {?} list\n         * @param {?} el\n         * @return {?}\n         */\n        ListWrapper.remove = function (list, el) {\n            var /** @type {?} */ index = list.indexOf(el);\n            if (index > -1) {\n                list.splice(index, 1);\n                return true;\n            }\n            return false;\n        };\n        /**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        ListWrapper.equals = function (a, b) {\n            if (a.length != b.length)\n                return false;\n            for (var /** @type {?} */ i = 0; i < a.length; ++i) {\n                if (a[i] !== b[i])\n                    return false;\n            }\n            return true;\n        };\n        /**\n         * @param {?} list\n         * @return {?}\n         */\n        ListWrapper.flatten = function (list) {\n            return list.reduce(function (flat, item) {\n                var /** @type {?} */ flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;\n                return ((flat)).concat(flatItem);\n            }, []);\n        };\n        return ListWrapper;\n    }());\n\n    var /** @type {?} */ isPromise = _angular_core.__core_private__.isPromise;\n\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    function isEmptyInputValue(value) {\n        // we don't check for string here so it also works with arrays\n        return value == null || value.length === 0;\n    }\n    /**\n     * Providers for validators to be used for {@link FormControl}s in a form.\n     *\n     * Provide this using `multi: true` to add validators.\n     *\n     * ### Example\n     *\n     * {@example core/forms/ts/ng_validators/ng_validators.ts region='ng_validators'}\n     * @stable\n     */\n    var /** @type {?} */ NG_VALIDATORS = new _angular_core.OpaqueToken('NgValidators');\n    /**\n     * Providers for asynchronous validators to be used for {@link FormControl}s\n     * in a form.\n     *\n     * Provide this using `multi: true` to add validators.\n     *\n     * See {@link NG_VALIDATORS} for more details.\n     *\n     * @stable\n     */\n    var /** @type {?} */ NG_ASYNC_VALIDATORS = new _angular_core.OpaqueToken('NgAsyncValidators');\n    /**\n     *  Provides a set of validators used by form controls.\n      * *\n      * A validator is a function that processes a {@link FormControl} or collection of\n      * controls and returns a map of errors. A null map means that validation has passed.\n      * *\n      * ### Example\n      * *\n      * ```typescript\n      * var loginControl = new FormControl(\"\", Validators.required)\n      * ```\n      * *\n     */\n    var Validators = (function () {\n        function Validators() {\n        }\n        /**\n         *  Validator that requires controls to have a non-empty value.\n         * @param {?} control\n         * @return {?}\n         */\n        Validators.required = function (control) {\n            return isEmptyInputValue(control.value) ? { 'required': true } : null;\n        };\n        /**\n         *  Validator that requires control value to be true.\n         * @param {?} control\n         * @return {?}\n         */\n        Validators.requiredTrue = function (control) {\n            return control.value === true ? null : { 'required': true };\n        };\n        /**\n         *  Validator that requires controls to have a value of a minimum length.\n         * @param {?} minLength\n         * @return {?}\n         */\n        Validators.minLength = function (minLength) {\n            return function (control) {\n                if (isEmptyInputValue(control.value)) {\n                    return null; // don't validate empty values to allow optional controls\n                }\n                var /** @type {?} */ length = control.value ? control.value.length : 0;\n                return length < minLength ?\n                    { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :\n                    null;\n            };\n        };\n        /**\n         *  Validator that requires controls to have a value of a maximum length.\n         * @param {?} maxLength\n         * @return {?}\n         */\n        Validators.maxLength = function (maxLength) {\n            return function (control) {\n                var /** @type {?} */ length = control.value ? control.value.length : 0;\n                return length > maxLength ?\n                    { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :\n                    null;\n            };\n        };\n        /**\n         *  Validator that requires a control to match a regex to its value.\n         * @param {?} pattern\n         * @return {?}\n         */\n        Validators.pattern = function (pattern) {\n            if (!pattern)\n                return Validators.nullValidator;\n            var /** @type {?} */ regex;\n            var /** @type {?} */ regexStr;\n            if (typeof pattern === 'string') {\n                regexStr = \"^\" + pattern + \"$\";\n                regex = new RegExp(regexStr);\n            }\n            else {\n                regexStr = pattern.toString();\n                regex = pattern;\n            }\n            return function (control) {\n                if (isEmptyInputValue(control.value)) {\n                    return null; // don't validate empty values to allow optional controls\n                }\n                var /** @type {?} */ value = control.value;\n                return regex.test(value) ? null :\n                    { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };\n            };\n        };\n        /**\n         *  No-op validator.\n         * @param {?} c\n         * @return {?}\n         */\n        Validators.nullValidator = function (c) { return null; };\n        /**\n         *  Compose multiple validators into a single function that returns the union\n          * of the individual error maps.\n         * @param {?} validators\n         * @return {?}\n         */\n        Validators.compose = function (validators) {\n            if (!validators)\n                return null;\n            var /** @type {?} */ presentValidators = validators.filter(isPresent);\n            if (presentValidators.length == 0)\n                return null;\n            return function (control) {\n                return _mergeErrors(_executeValidators(control, presentValidators));\n            };\n        };\n        /**\n         * @param {?} validators\n         * @return {?}\n         */\n        Validators.composeAsync = function (validators) {\n            if (!validators)\n                return null;\n            var /** @type {?} */ presentValidators = validators.filter(isPresent);\n            if (presentValidators.length == 0)\n                return null;\n            return function (control) {\n                var /** @type {?} */ promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);\n                return Promise.all(promises).then(_mergeErrors);\n            };\n        };\n        return Validators;\n    }());\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function _convertToPromise(obj) {\n        return isPromise(obj) ? obj : rxjs_operator_toPromise.toPromise.call(obj);\n    }\n    /**\n     * @param {?} control\n     * @param {?} validators\n     * @return {?}\n     */\n    function _executeValidators(control, validators) {\n        return validators.map(function (v) { return v(control); });\n    }\n    /**\n     * @param {?} control\n     * @param {?} validators\n     * @return {?}\n     */\n    function _executeAsyncValidators(control, validators) {\n        return validators.map(function (v) { return v(control); });\n    }\n    /**\n     * @param {?} arrayOfErrors\n     * @return {?}\n     */\n    function _mergeErrors(arrayOfErrors) {\n        var /** @type {?} */ res = arrayOfErrors.reduce(function (res, errors) {\n            return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;\n        }, {});\n        return Object.keys(res).length === 0 ? null : res;\n    }\n\n    /**\n     * Used to provide a {@link ControlValueAccessor} for form controls.\n     *\n     * See {@link DefaultValueAccessor} for how to implement one.\n     * @stable\n     */\n    var /** @type {?} */ NG_VALUE_ACCESSOR = new _angular_core.OpaqueToken('NgValueAccessor');\n\n    var /** @type {?} */ CHECKBOX_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return CheckboxControlValueAccessor; }),\n        multi: true,\n    };\n    /**\n     *  The accessor for writing a value and listening to changes on a checkbox input element.\n      * *\n      * ### Example\n      * ```\n      * <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n      * ```\n      * *\n      * @stable\n     */\n    var CheckboxControlValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         */\n        function CheckboxControlValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        CheckboxControlValueAccessor.prototype.writeValue = function (value) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        CheckboxControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n                        host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n                        providers: [CHECKBOX_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        CheckboxControlValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ]; };\n        return CheckboxControlValueAccessor;\n    }());\n\n    var /** @type {?} */ DEFAULT_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return DefaultValueAccessor; }),\n        multi: true\n    };\n    /**\n     *  The default accessor for writing a value and listening to changes that is used by the\n      * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n      * *\n      * ### Example\n      * ```\n      * <input type=\"text\" name=\"searchQuery\" ngModel>\n      * ```\n      * *\n      * @stable\n     */\n    var DefaultValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         */\n        function DefaultValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        DefaultValueAccessor.prototype.writeValue = function (value) {\n            var /** @type {?} */ normalizedValue = value == null ? '' : value;\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        DefaultValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n                        // TODO: vsavkin replace the above selector with the one below it once\n                        // https://github.com/angular/angular/issues/3011 is implemented\n                        // selector: '[ngControl],[ngModel],[ngFormControl]',\n                        host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                        providers: [DEFAULT_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        DefaultValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ]; };\n        return DefaultValueAccessor;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @param {?} validator\n     * @return {?}\n     */\n    function normalizeValidator(validator) {\n        if (((validator)).validate) {\n            return function (c) { return ((validator)).validate(c); };\n        }\n        else {\n            return (validator);\n        }\n    }\n    /**\n     * @param {?} validator\n     * @return {?}\n     */\n    function normalizeAsyncValidator(validator) {\n        if (((validator)).validate) {\n            return function (c) { return ((validator)).validate(c); };\n        }\n        else {\n            return (validator);\n        }\n    }\n\n    var /** @type {?} */ NUMBER_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return NumberValueAccessor; }),\n        multi: true\n    };\n    /**\n     *  The accessor for writing a number value and listening to changes that is used by the\n      * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n      * *\n      * ### Example\n      * ```\n      * <input type=\"number\" [(ngModel)]=\"age\">\n      * ```\n     */\n    var NumberValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         */\n        function NumberValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        NumberValueAccessor.prototype.writeValue = function (value) {\n            // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n            var /** @type {?} */ normalizedValue = value == null ? '' : value;\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        NumberValueAccessor.prototype.registerOnChange = function (fn) {\n            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        NumberValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n                        host: {\n                            '(change)': 'onChange($event.target.value)',\n                            '(input)': 'onChange($event.target.value)',\n                            '(blur)': 'onTouched()'\n                        },\n                        providers: [NUMBER_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        NumberValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ]; };\n        return NumberValueAccessor;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$2 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * @return {?}\n     */\n    function unimplemented() {\n        throw new Error('unimplemented');\n    }\n    /**\n     *  A base class that all control directive extend.\n      * It binds a {@link FormControl} object to a DOM element.\n      * *\n      * Used internally by Angular forms.\n      * *\n     * @abstract\n     */\n    var NgControl = (function (_super) {\n        __extends$2(NgControl, _super);\n        function NgControl() {\n            _super.apply(this, arguments);\n            /** @internal */\n            this._parent = null;\n            this.name = null;\n            this.valueAccessor = null;\n            /** @internal */\n            this._rawValidators = [];\n            /** @internal */\n            this._rawAsyncValidators = [];\n        }\n        Object.defineProperty(NgControl.prototype, \"validator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return (unimplemented()); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgControl.prototype, \"asyncValidator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return (unimplemented()); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @abstract\n         * @param {?} newValue\n         * @return {?}\n         */\n        NgControl.prototype.viewToModelUpdate = function (newValue) { };\n        return NgControl;\n    }(AbstractControlDirective));\n\n    var /** @type {?} */ RADIO_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return RadioControlValueAccessor; }),\n        multi: true\n    };\n    /**\n     *  Internal class used by Angular to uncheck radio buttons with the matching name.\n     */\n    var RadioControlRegistry = (function () {\n        function RadioControlRegistry() {\n            this._accessors = [];\n        }\n        /**\n         * @param {?} control\n         * @param {?} accessor\n         * @return {?}\n         */\n        RadioControlRegistry.prototype.add = function (control, accessor) {\n            this._accessors.push([control, accessor]);\n        };\n        /**\n         * @param {?} accessor\n         * @return {?}\n         */\n        RadioControlRegistry.prototype.remove = function (accessor) {\n            for (var /** @type {?} */ i = this._accessors.length - 1; i >= 0; --i) {\n                if (this._accessors[i][1] === accessor) {\n                    this._accessors.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        /**\n         * @param {?} accessor\n         * @return {?}\n         */\n        RadioControlRegistry.prototype.select = function (accessor) {\n            var _this = this;\n            this._accessors.forEach(function (c) {\n                if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {\n                    c[1].fireUncheck(accessor.value);\n                }\n            });\n        };\n        /**\n         * @param {?} controlPair\n         * @param {?} accessor\n         * @return {?}\n         */\n        RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {\n            if (!controlPair[0].control)\n                return false;\n            return controlPair[0]._parent === accessor._control._parent &&\n                controlPair[1].name === accessor.name;\n        };\n        RadioControlRegistry.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        RadioControlRegistry.ctorParameters = function () { return []; };\n        return RadioControlRegistry;\n    }());\n    /**\n     *  *\n      * Used by {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName}\n      * to keep the view synced with the {@link FormControl} model.\n      * *\n      * *\n      * If you have imported the {@link FormsModule} or the {@link ReactiveFormsModule}, this\n      * value accessor will be active on any radio control that has a form directive. You do\n      * **not** need to add a special selector to activate it.\n      * *\n      * ### How to use radio buttons with form directives\n      * *\n      * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons\n      * in the same group have the same `name` attribute.  Radio buttons with different `name`\n      * attributes do not affect each other.\n      * *\n      * {@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}\n      * *\n      * When using radio buttons in a reactive form, radio buttons in the same group should have the\n      * same `formControlName`. You can also add a `name` attribute, but it's optional.\n      * *\n      * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n      * *\n      * * **npm package**: `@angular/forms`\n      * *\n      * @stable\n     */\n    var RadioControlValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         * @param {?} _registry\n         * @param {?} _injector\n         */\n        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this._registry = _registry;\n            this._injector = _injector;\n            this.onChange = function () { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.ngOnInit = function () {\n            this._control = this._injector.get(NgControl);\n            this._checkName();\n            this._registry.add(this._control, this);\n        };\n        /**\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.writeValue = function (value) {\n            this._state = value === this.value;\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.registerOnChange = function (fn) {\n            var _this = this;\n            this._fn = fn;\n            this.onChange = function () {\n                fn(_this.value);\n                _this._registry.select(_this);\n            };\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.fireUncheck = function (value) { this.writeValue(value); };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        /**\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype._checkName = function () {\n            if (this.name && this.formControlName && this.name !== this.formControlName) {\n                this._throwNameError();\n            }\n            if (!this.name && this.formControlName)\n                this.name = this.formControlName;\n        };\n        /**\n         * @return {?}\n         */\n        RadioControlValueAccessor.prototype._throwNameError = function () {\n            throw new Error(\"\\n      If you define both a name and a formControlName attribute on your radio button, their values\\n      must match. Ex: <input type=\\\"radio\\\" formControlName=\\\"food\\\" name=\\\"food\\\">\\n    \");\n        };\n        RadioControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n                        host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n                        providers: [RADIO_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        RadioControlValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n            { type: RadioControlRegistry, },\n            { type: _angular_core.Injector, },\n        ]; };\n        RadioControlValueAccessor.propDecorators = {\n            'name': [{ type: _angular_core.Input },],\n            'formControlName': [{ type: _angular_core.Input },],\n            'value': [{ type: _angular_core.Input },],\n        };\n        return RadioControlValueAccessor;\n    }());\n\n    var /** @type {?} */ RANGE_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return RangeValueAccessor; }),\n        multi: true\n    };\n    /**\n     *  The accessor for writing a range value and listening to changes that is used by the\n      * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n      * *\n      * ### Example\n      * ```\n      * <input type=\"range\" [(ngModel)]=\"age\" >\n      * ```\n     */\n    var RangeValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         */\n        function RangeValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        RangeValueAccessor.prototype.writeValue = function (value) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        RangeValueAccessor.prototype.registerOnChange = function (fn) {\n            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        RangeValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        RangeValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        RangeValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n                        host: {\n                            '(change)': 'onChange($event.target.value)',\n                            '(input)': 'onChange($event.target.value)',\n                            '(blur)': 'onTouched()'\n                        },\n                        providers: [RANGE_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        RangeValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ]; };\n        return RangeValueAccessor;\n    }());\n\n    var /** @type {?} */ SELECT_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return SelectControlValueAccessor; }),\n        multi: true\n    };\n    /**\n     * @param {?} id\n     * @param {?} value\n     * @return {?}\n     */\n    function _buildValueString(id, value) {\n        if (id == null)\n            return \"\" + value;\n        if (!isPrimitive(value))\n            value = 'Object';\n        return (id + \": \" + value).slice(0, 50);\n    }\n    /**\n     * @param {?} valueString\n     * @return {?}\n     */\n    function _extractId(valueString) {\n        return valueString.split(':')[0];\n    }\n    /**\n     *  *\n      * Used by {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName}\n      * to keep the view synced with the {@link FormControl} model.\n      * *\n      * *\n      * If you have imported the {@link FormsModule} or the {@link ReactiveFormsModule}, this\n      * value accessor will be active on any select control that has a form directive. You do\n      * **not** need to add a special selector to activate it.\n      * *\n      * ### How to use select controls with form directives\n      * *\n      * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n      * attribute to the main `<select>` tag.\n      * *\n      * If your option values are simple strings, you can bind to the normal `value` property\n      * on the option.  If your option values happen to be objects (and you'd like to save the\n      * selection in your form as an object), use `ngValue` instead:\n      * *\n      * {@example forms/ts/selectControl/select_control_example.ts region='Component'}\n      * *\n      * In reactive forms, you'll also want to add your form directive (`formControlName` or\n      * `formControl`) on the main `<select>` tag. Like in the former example, you have the\n      * choice of binding to the  `value` or `ngValue` property on the select's options.\n      * *\n      * {@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n      * *\n      * Note: We listen to the 'change' event because 'input' events aren't fired\n      * for selects in Firefox and IE:\n      * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n      * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n      * *\n      * * **npm package**: `@angular/forms`\n      * *\n     */\n    var SelectControlValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         */\n        function SelectControlValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            /** @internal */\n            this._optionMap = new Map();\n            /** @internal */\n            this._idCounter = 0;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype.writeValue = function (value) {\n            this.value = value;\n            var /** @type {?} */ valueString = _buildValueString(this._getOptionId(value), value);\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype.registerOnChange = function (fn) {\n            var _this = this;\n            this.onChange = function (valueString) {\n                _this.value = valueString;\n                fn(_this._getOptionValue(valueString));\n            };\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        /**\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype._registerOption = function () { return (this._idCounter++).toString(); };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype._getOptionId = function (value) {\n            for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n                var id = _a[_i];\n                if (looseIdentical(this._optionMap.get(id), value))\n                    return id;\n            }\n            return null;\n        };\n        /**\n         * @param {?} valueString\n         * @return {?}\n         */\n        SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {\n            var /** @type {?} */ id = _extractId(valueString);\n            return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n        };\n        SelectControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n                        host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                        providers: [SELECT_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        SelectControlValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ]; };\n        return SelectControlValueAccessor;\n    }());\n    /**\n     *  *\n      * *\n      * See docs for {@link SelectControlValueAccessor} for usage examples.\n      * *\n     */\n    var NgSelectOption = (function () {\n        /**\n         * @param {?} _element\n         * @param {?} _renderer\n         * @param {?} _select\n         */\n        function NgSelectOption(_element, _renderer, _select) {\n            this._element = _element;\n            this._renderer = _renderer;\n            this._select = _select;\n            if (this._select)\n                this.id = this._select._registerOption();\n        }\n        Object.defineProperty(NgSelectOption.prototype, \"ngValue\", {\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            set: function (value) {\n                if (this._select == null)\n                    return;\n                this._select._optionMap.set(this.id, value);\n                this._setElementValue(_buildValueString(this.id, value));\n                this._select.writeValue(this._select.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgSelectOption.prototype, \"value\", {\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            set: function (value) {\n                this._setElementValue(value);\n                if (this._select)\n                    this._select.writeValue(this._select.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        NgSelectOption.prototype._setElementValue = function (value) {\n            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n        };\n        /**\n         * @return {?}\n         */\n        NgSelectOption.prototype.ngOnDestroy = function () {\n            if (this._select) {\n                this._select._optionMap.delete(this.id);\n                this._select.writeValue(this._select.value);\n            }\n        };\n        NgSelectOption.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n        ];\n        /** @nocollapse */\n        NgSelectOption.ctorParameters = function () { return [\n            { type: _angular_core.ElementRef, },\n            { type: _angular_core.Renderer, },\n            { type: SelectControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n        ]; };\n        NgSelectOption.propDecorators = {\n            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n            'value': [{ type: _angular_core.Input, args: ['value',] },],\n        };\n        return NgSelectOption;\n    }());\n\n    var /** @type {?} */ SELECT_MULTIPLE_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return SelectMultipleControlValueAccessor; }),\n        multi: true\n    };\n    /**\n     * @param {?} id\n     * @param {?} value\n     * @return {?}\n     */\n    function _buildValueString$1(id, value) {\n        if (id == null)\n            return \"\" + value;\n        if (typeof value === 'string')\n            value = \"'\" + value + \"'\";\n        if (!isPrimitive(value))\n            value = 'Object';\n        return (id + \": \" + value).slice(0, 50);\n    }\n    /**\n     * @param {?} valueString\n     * @return {?}\n     */\n    function _extractId$1(valueString) {\n        return valueString.split(':')[0];\n    }\n    /**\n     *  The accessor for writing a value and listening to changes on a select element.\n      * *\n     */\n    var SelectMultipleControlValueAccessor = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} _elementRef\n         */\n        function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            /** @internal */\n            this._optionMap = new Map();\n            /** @internal */\n            this._idCounter = 0;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {\n            var _this = this;\n            this.value = value;\n            var /** @type {?} */ optionSelectedStateSetter;\n            if (Array.isArray(value)) {\n                // convert values to ids\n                var /** @type {?} */ ids_1 = value.map(function (v) { return _this._getOptionId(v); });\n                optionSelectedStateSetter = function (opt, o) { opt._setSelected(ids_1.indexOf(o.toString()) > -1); };\n            }\n            else {\n                optionSelectedStateSetter = function (opt, o) { opt._setSelected(false); };\n            }\n            this._optionMap.forEach(optionSelectedStateSetter);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {\n            var _this = this;\n            this.onChange = function (_) {\n                var /** @type {?} */ selected = [];\n                if (_.hasOwnProperty('selectedOptions')) {\n                    var /** @type {?} */ options = _.selectedOptions;\n                    for (var /** @type {?} */ i = 0; i < options.length; i++) {\n                        var /** @type {?} */ opt = options.item(i);\n                        var /** @type {?} */ val = _this._getOptionValue(opt.value);\n                        selected.push(val);\n                    }\n                }\n                else {\n                    var /** @type {?} */ options = (_.options);\n                    for (var /** @type {?} */ i = 0; i < options.length; i++) {\n                        var /** @type {?} */ opt = options.item(i);\n                        if (opt.selected) {\n                            var /** @type {?} */ val = _this._getOptionValue(opt.value);\n                            selected.push(val);\n                        }\n                    }\n                }\n                _this.value = selected;\n                fn(selected);\n            };\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {\n            var /** @type {?} */ id = (this._idCounter++).toString();\n            this._optionMap.set(id, value);\n            return id;\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {\n            for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n                var id = _a[_i];\n                if (looseIdentical(this._optionMap.get(id)._value, value))\n                    return id;\n            }\n            return null;\n        };\n        /**\n         * @param {?} valueString\n         * @return {?}\n         */\n        SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {\n            var /** @type {?} */ id = _extractId$1(valueString);\n            return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;\n        };\n        SelectMultipleControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n                        host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n                        providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        SelectMultipleControlValueAccessor.ctorParameters = function () { return [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ]; };\n        return SelectMultipleControlValueAccessor;\n    }());\n    /**\n     *  Marks `<option>` as dynamic, so Angular can be notified when options change.\n      * *\n      * ### Example\n      * *\n      * ```\n      * <select multiple name=\"city\" ngModel>\n      * <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n      * </select>\n      * ```\n     */\n    var NgSelectMultipleOption = (function () {\n        /**\n         * @param {?} _element\n         * @param {?} _renderer\n         * @param {?} _select\n         */\n        function NgSelectMultipleOption(_element, _renderer, _select) {\n            this._element = _element;\n            this._renderer = _renderer;\n            this._select = _select;\n            if (this._select) {\n                this.id = this._select._registerOption(this);\n            }\n        }\n        Object.defineProperty(NgSelectMultipleOption.prototype, \"ngValue\", {\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            set: function (value) {\n                if (this._select == null)\n                    return;\n                this._value = value;\n                this._setElementValue(_buildValueString$1(this.id, value));\n                this._select.writeValue(this._select.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgSelectMultipleOption.prototype, \"value\", {\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            set: function (value) {\n                if (this._select) {\n                    this._value = value;\n                    this._setElementValue(_buildValueString$1(this.id, value));\n                    this._select.writeValue(this._select.value);\n                }\n                else {\n                    this._setElementValue(value);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        NgSelectMultipleOption.prototype._setElementValue = function (value) {\n            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n        };\n        /**\n         * @param {?} selected\n         * @return {?}\n         */\n        NgSelectMultipleOption.prototype._setSelected = function (selected) {\n            this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);\n        };\n        /**\n         * @return {?}\n         */\n        NgSelectMultipleOption.prototype.ngOnDestroy = function () {\n            if (this._select) {\n                this._select._optionMap.delete(this.id);\n                this._select.writeValue(this._select.value);\n            }\n        };\n        NgSelectMultipleOption.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n        ];\n        /** @nocollapse */\n        NgSelectMultipleOption.ctorParameters = function () { return [\n            { type: _angular_core.ElementRef, },\n            { type: _angular_core.Renderer, },\n            { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n        ]; };\n        NgSelectMultipleOption.propDecorators = {\n            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n            'value': [{ type: _angular_core.Input, args: ['value',] },],\n        };\n        return NgSelectMultipleOption;\n    }());\n\n    /**\n     * @param {?} name\n     * @param {?} parent\n     * @return {?}\n     */\n    function controlPath(name, parent) {\n        return parent.path.concat([name]);\n    }\n    /**\n     * @param {?} control\n     * @param {?} dir\n     * @return {?}\n     */\n    function setUpControl(control, dir) {\n        if (!control)\n            _throwError(dir, 'Cannot find control with');\n        if (!dir.valueAccessor)\n            _throwError(dir, 'No value accessor for form control with');\n        control.validator = Validators.compose([control.validator, dir.validator]);\n        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n        dir.valueAccessor.writeValue(control.value);\n        // view -> model\n        dir.valueAccessor.registerOnChange(function (newValue) {\n            dir.viewToModelUpdate(newValue);\n            control.markAsDirty();\n            control.setValue(newValue, { emitModelToViewChange: false });\n        });\n        // touched\n        dir.valueAccessor.registerOnTouched(function () { return control.markAsTouched(); });\n        control.registerOnChange(function (newValue, emitModelEvent) {\n            // control -> view\n            dir.valueAccessor.writeValue(newValue);\n            // control -> ngModel\n            if (emitModelEvent)\n                dir.viewToModelUpdate(newValue);\n        });\n        if (dir.valueAccessor.setDisabledState) {\n            control.registerOnDisabledChange(function (isDisabled) { dir.valueAccessor.setDisabledState(isDisabled); });\n        }\n        // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n        dir._rawValidators.forEach(function (validator) {\n            if (((validator)).registerOnValidatorChange)\n                ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n        });\n        dir._rawAsyncValidators.forEach(function (validator) {\n            if (((validator)).registerOnValidatorChange)\n                ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n        });\n    }\n    /**\n     * @param {?} control\n     * @param {?} dir\n     * @return {?}\n     */\n    function cleanUpControl(control, dir) {\n        dir.valueAccessor.registerOnChange(function () { return _noControlError(dir); });\n        dir.valueAccessor.registerOnTouched(function () { return _noControlError(dir); });\n        dir._rawValidators.forEach(function (validator) {\n            if (validator.registerOnValidatorChange) {\n                validator.registerOnValidatorChange(null);\n            }\n        });\n        dir._rawAsyncValidators.forEach(function (validator) {\n            if (validator.registerOnValidatorChange) {\n                validator.registerOnValidatorChange(null);\n            }\n        });\n        if (control)\n            control._clearChangeFns();\n    }\n    /**\n     * @param {?} control\n     * @param {?} dir\n     * @return {?}\n     */\n    function setUpFormContainer(control, dir) {\n        if (isBlank(control))\n            _throwError(dir, 'Cannot find control with');\n        control.validator = Validators.compose([control.validator, dir.validator]);\n        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n    }\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function _noControlError(dir) {\n        return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n    }\n    /**\n     * @param {?} dir\n     * @param {?} message\n     * @return {?}\n     */\n    function _throwError(dir, message) {\n        var /** @type {?} */ messageEnd;\n        if (dir.path.length > 1) {\n            messageEnd = \"path: '\" + dir.path.join(' -> ') + \"'\";\n        }\n        else if (dir.path[0]) {\n            messageEnd = \"name: '\" + dir.path + \"'\";\n        }\n        else {\n            messageEnd = 'unspecified name attribute';\n        }\n        throw new Error(message + \" \" + messageEnd);\n    }\n    /**\n     * @param {?} validators\n     * @return {?}\n     */\n    function composeValidators(validators) {\n        return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;\n    }\n    /**\n     * @param {?} validators\n     * @return {?}\n     */\n    function composeAsyncValidators(validators) {\n        return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n            null;\n    }\n    /**\n     * @param {?} changes\n     * @param {?} viewModel\n     * @return {?}\n     */\n    function isPropertyUpdated(changes, viewModel) {\n        if (!changes.hasOwnProperty('model'))\n            return false;\n        var /** @type {?} */ change = changes['model'];\n        if (change.isFirstChange())\n            return true;\n        return !looseIdentical(viewModel, change.currentValue);\n    }\n    var /** @type {?} */ BUILTIN_ACCESSORS = [\n        CheckboxControlValueAccessor,\n        RangeValueAccessor,\n        NumberValueAccessor,\n        SelectControlValueAccessor,\n        SelectMultipleControlValueAccessor,\n        RadioControlValueAccessor,\n    ];\n    /**\n     * @param {?} valueAccessor\n     * @return {?}\n     */\n    function isBuiltInAccessor(valueAccessor) {\n        return BUILTIN_ACCESSORS.some(function (a) { return valueAccessor.constructor === a; });\n    }\n    /**\n     * @param {?} dir\n     * @param {?} valueAccessors\n     * @return {?}\n     */\n    function selectValueAccessor(dir, valueAccessors) {\n        if (!valueAccessors)\n            return null;\n        var /** @type {?} */ defaultAccessor;\n        var /** @type {?} */ builtinAccessor;\n        var /** @type {?} */ customAccessor;\n        valueAccessors.forEach(function (v) {\n            if (v.constructor === DefaultValueAccessor) {\n                defaultAccessor = v;\n            }\n            else if (isBuiltInAccessor(v)) {\n                if (builtinAccessor)\n                    _throwError(dir, 'More than one built-in value accessor matches form control with');\n                builtinAccessor = v;\n            }\n            else {\n                if (customAccessor)\n                    _throwError(dir, 'More than one custom value accessor matches form control with');\n                customAccessor = v;\n            }\n        });\n        if (customAccessor)\n            return customAccessor;\n        if (builtinAccessor)\n            return builtinAccessor;\n        if (defaultAccessor)\n            return defaultAccessor;\n        _throwError(dir, 'No valid value accessor for form control with');\n        return null;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     *  This is a base class for code shared between {@link NgModelGroup} and {@link FormGroupName}.\n      * *\n     */\n    var AbstractFormGroupDirective = (function (_super) {\n        __extends(AbstractFormGroupDirective, _super);\n        function AbstractFormGroupDirective() {\n            _super.apply(this, arguments);\n        }\n        /**\n         * @return {?}\n         */\n        AbstractFormGroupDirective.prototype.ngOnInit = function () {\n            this._checkParentType();\n            this.formDirective.addFormGroup(this);\n        };\n        /**\n         * @return {?}\n         */\n        AbstractFormGroupDirective.prototype.ngOnDestroy = function () {\n            if (this.formDirective) {\n                this.formDirective.removeFormGroup(this);\n            }\n        };\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"control\", {\n            /**\n             *  Get the {@link FormGroup} backing this binding.\n             * @return {?}\n             */\n            get: function () { return this.formDirective.getFormGroup(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"path\", {\n            /**\n             *  Get the path to this control group.\n             * @return {?}\n             */\n            get: function () { return controlPath(this.name, this._parent); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"formDirective\", {\n            /**\n             *  Get the {@link Form} to which this group belongs.\n             * @return {?}\n             */\n            get: function () { return this._parent ? this._parent.formDirective : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"validator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeValidators(this._validators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"asyncValidator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeAsyncValidators(this._asyncValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        AbstractFormGroupDirective.prototype._checkParentType = function () { };\n        return AbstractFormGroupDirective;\n    }(ControlContainer));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$3 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var AbstractControlStatus = (function () {\n        /**\n         * @param {?} cd\n         */\n        function AbstractControlStatus(cd) {\n            this._cd = cd;\n        }\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassUntouched\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.untouched : false; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassTouched\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.touched : false; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPristine\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.pristine : false; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassDirty\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.dirty : false; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassValid\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.valid : false; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassInvalid\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.invalid : false; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPending\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._cd.control ? this._cd.control.pending : false; },\n            enumerable: true,\n            configurable: true\n        });\n        return AbstractControlStatus;\n    }());\n    var /** @type {?} */ ngControlStatusHost = {\n        '[class.ng-untouched]': 'ngClassUntouched',\n        '[class.ng-touched]': 'ngClassTouched',\n        '[class.ng-pristine]': 'ngClassPristine',\n        '[class.ng-dirty]': 'ngClassDirty',\n        '[class.ng-valid]': 'ngClassValid',\n        '[class.ng-invalid]': 'ngClassInvalid',\n        '[class.ng-pending]': 'ngClassPending',\n    };\n    /**\n     *  Directive automatically applied to Angular form controls that sets CSS classes\n      * based on control status (valid/invalid/dirty/etc).\n      * *\n     */\n    var NgControlStatus = (function (_super) {\n        __extends$3(NgControlStatus, _super);\n        /**\n         * @param {?} cd\n         */\n        function NgControlStatus(cd) {\n            _super.call(this, cd);\n        }\n        NgControlStatus.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },\n        ];\n        /** @nocollapse */\n        NgControlStatus.ctorParameters = function () { return [\n            { type: NgControl, decorators: [{ type: _angular_core.Self },] },\n        ]; };\n        return NgControlStatus;\n    }(AbstractControlStatus));\n    /**\n     *  Directive automatically applied to Angular form groups that sets CSS classes\n      * based on control status (valid/invalid/dirty/etc).\n      * *\n     */\n    var NgControlStatusGroup = (function (_super) {\n        __extends$3(NgControlStatusGroup, _super);\n        /**\n         * @param {?} cd\n         */\n        function NgControlStatusGroup(cd) {\n            _super.call(this, cd);\n        }\n        NgControlStatusGroup.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n                        host: ngControlStatusHost\n                    },] },\n        ];\n        /** @nocollapse */\n        NgControlStatusGroup.ctorParameters = function () { return [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Self },] },\n        ]; };\n        return NgControlStatusGroup;\n    }(AbstractControlStatus));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$5 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     *  Use by directives and components to emit custom Events.\n      * *\n      * ### Examples\n      * *\n      * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n      * title gets clicked:\n      * *\n      * ```\n      * selector: 'zippy',\n      * template: `\n      * <div class=\"zippy\">\n      * <div (click)=\"toggle()\">Toggle</div>\n      * <div [hidden]=\"!visible\">\n      * <ng-content></ng-content>\n      * </div>\n      * </div>`})\n      * export class Zippy {\n      * visible: boolean = true;\n      * @Output() open: EventEmitter<any> = new EventEmitter();\n      * @Output() close: EventEmitter<any> = new EventEmitter();\n      * *\n      * toggle() {\n      * this.visible = !this.visible;\n      * if (this.visible) {\n      * this.open.emit(null);\n      * } else {\n      * this.close.emit(null);\n      * }\n      * }\n      * }\n      * ```\n      * *\n      * The events payload can be accessed by the parameter `$event` on the components output event\n      * handler:\n      * *\n      * ```\n      * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n      * ```\n      * *\n      * Uses Rx.Observable but provides an adapter to make it work as specified here:\n      * https://github.com/jhusain/observable-spec\n      * *\n      * Once a reference implementation of the spec is available, switch to it.\n     */\n    var EventEmitter = (function (_super) {\n        __extends$5(EventEmitter, _super);\n        /**\n         *  Creates an instance of [EventEmitter], which depending on [isAsync],\n          * delivers events synchronously or asynchronously.\n         * @param {?=} isAsync\n         */\n        function EventEmitter(isAsync) {\n            if (isAsync === void 0) { isAsync = false; }\n            _super.call(this);\n            this.__isAsync = isAsync;\n        }\n        /**\n         * @param {?=} value\n         * @return {?}\n         */\n        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n        /**\n         * @param {?=} generatorOrNext\n         * @param {?=} error\n         * @param {?=} complete\n         * @return {?}\n         */\n        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n            var /** @type {?} */ schedulerFn;\n            var /** @type {?} */ errorFn = function (err) { return null; };\n            var /** @type {?} */ completeFn = function () { return null; };\n            if (generatorOrNext && typeof generatorOrNext === 'object') {\n                schedulerFn = this.__isAsync ? function (value) {\n                    setTimeout(function () { return generatorOrNext.next(value); });\n                } : function (value) { generatorOrNext.next(value); };\n                if (generatorOrNext.error) {\n                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n                        function (err) { generatorOrNext.error(err); };\n                }\n                if (generatorOrNext.complete) {\n                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n                        function () { generatorOrNext.complete(); };\n                }\n            }\n            else {\n                schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n                    function (value) { generatorOrNext(value); };\n                if (error) {\n                    errorFn =\n                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n                }\n                if (complete) {\n                    completeFn =\n                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n                }\n            }\n            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n        };\n        return EventEmitter;\n    }(rxjs_Subject.Subject));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$6 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n     */\n    var /** @type {?} */ VALID = 'VALID';\n    /**\n     * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n     */\n    var /** @type {?} */ INVALID = 'INVALID';\n    /**\n     * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n     * errors are not yet available for the input value.\n     */\n    var /** @type {?} */ PENDING = 'PENDING';\n    /**\n     * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n     * calculations of validity or value.\n     */\n    var /** @type {?} */ DISABLED = 'DISABLED';\n    /**\n     * @param {?} control\n     * @param {?} path\n     * @param {?} delimiter\n     * @return {?}\n     */\n    function _find(control, path, delimiter) {\n        if (path == null)\n            return null;\n        if (!(path instanceof Array)) {\n            path = ((path)).split(delimiter);\n        }\n        if (path instanceof Array && (path.length === 0))\n            return null;\n        return ((path)).reduce(function (v, name) {\n            if (v instanceof FormGroup) {\n                return v.controls[name] || null;\n            }\n            if (v instanceof FormArray) {\n                return v.at(/** @type {?} */ (name)) || null;\n            }\n            return null;\n        }, control);\n    }\n    /**\n     * @param {?} r\n     * @return {?}\n     */\n    function toObservable(r) {\n        return isPromise(r) ? rxjs_observable_fromPromise.fromPromise(r) : r;\n    }\n    /**\n     * @param {?} validator\n     * @return {?}\n     */\n    function coerceToValidator(validator) {\n        return Array.isArray(validator) ? composeValidators(validator) : validator;\n    }\n    /**\n     * @param {?} asyncValidator\n     * @return {?}\n     */\n    function coerceToAsyncValidator(asyncValidator) {\n        return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;\n    }\n    /**\n     *  {@link FormArray}.\n      * *\n      * It provides some of the shared behavior that all controls and groups of controls have, like\n      * running validators, calculating status, and resetting state. It also defines the properties\n      * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n      * instantiated directly.\n      * *\n     * @abstract\n     */\n    var AbstractControl = (function () {\n        /**\n         * @param {?} validator\n         * @param {?} asyncValidator\n         */\n        function AbstractControl(validator, asyncValidator) {\n            this.validator = validator;\n            this.asyncValidator = asyncValidator;\n            /** @internal */\n            this._onCollectionChange = function () { };\n            this._pristine = true;\n            this._touched = false;\n            /** @internal */\n            this._onDisabledChange = [];\n        }\n        Object.defineProperty(AbstractControl.prototype, \"value\", {\n            /**\n             *  The value of the control.\n             * @return {?}\n             */\n            get: function () { return this._value; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"parent\", {\n            /**\n             *  The parent control.\n             * @return {?}\n             */\n            get: function () { return this._parent; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"status\", {\n            /**\n             *  The validation status of the control. There are four possible\n              * validation statuses:\n              * *\n              * * **VALID**:  control has passed all validation checks\n              * * **INVALID**: control has failed at least one validation check\n              * * **PENDING**: control is in the midst of conducting a validation check\n              * * **DISABLED**: control is exempt from validation checks\n              * *\n              * These statuses are mutually exclusive, so a control cannot be\n              * both valid AND invalid or invalid AND disabled.\n             * @return {?}\n             */\n            get: function () { return this._status; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"valid\", {\n            /**\n             *  A control is `valid` when its `status === VALID`.\n              * *\n              * In order to have this status, the control must have passed all its\n              * validation checks.\n             * @return {?}\n             */\n            get: function () { return this._status === VALID; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"invalid\", {\n            /**\n             *  A control is `invalid` when its `status === INVALID`.\n              * *\n              * In order to have this status, the control must have failed\n              * at least one of its validation checks.\n             * @return {?}\n             */\n            get: function () { return this._status === INVALID; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"pending\", {\n            /**\n             *  A control is `pending` when its `status === PENDING`.\n              * *\n              * In order to have this status, the control must be in the\n              * middle of conducting a validation check.\n             * @return {?}\n             */\n            get: function () { return this._status == PENDING; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"disabled\", {\n            /**\n             *  A control is `disabled` when its `status === DISABLED`.\n              * *\n              * Disabled controls are exempt from validation checks and\n              * are not included in the aggregate value of their ancestor\n              * controls.\n             * @return {?}\n             */\n            get: function () { return this._status === DISABLED; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"enabled\", {\n            /**\n             *  A control is `enabled` as long as its `status !== DISABLED`.\n              * *\n              * In other words, it has a status of `VALID`, `INVALID`, or\n              * `PENDING`.\n             * @return {?}\n             */\n            get: function () { return this._status !== DISABLED; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"errors\", {\n            /**\n             *  Returns any errors generated by failing validation. If there\n              * are no errors, it will return null.\n             * @return {?}\n             */\n            get: function () { return this._errors; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"pristine\", {\n            /**\n             *  A control is `pristine` if the user has not yet changed\n              * the value in the UI.\n              * *\n              * Note that programmatic changes to a control's value will\n              * *not* mark it dirty.\n             * @return {?}\n             */\n            get: function () { return this._pristine; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"dirty\", {\n            /**\n             *  A control is `dirty` if the user has changed the value\n              * in the UI.\n              * *\n              * Note that programmatic changes to a control's value will\n              * *not* mark it dirty.\n             * @return {?}\n             */\n            get: function () { return !this.pristine; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"touched\", {\n            /**\n             *  A control is marked `touched` once the user has triggered\n              * a `blur` event on it.\n             * @return {?}\n             */\n            get: function () { return this._touched; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"untouched\", {\n            /**\n             *  A control is `untouched` if the user has not yet triggered\n              * a `blur` event on it.\n             * @return {?}\n             */\n            get: function () { return !this._touched; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"valueChanges\", {\n            /**\n             *  Emits an event every time the value of the control changes, in\n              * the UI or programmatically.\n             * @return {?}\n             */\n            get: function () { return this._valueChanges; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"statusChanges\", {\n            /**\n             *  Emits an event every time the validation status of the control\n              * is re-calculated.\n             * @return {?}\n             */\n            get: function () { return this._statusChanges; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         *  Sets the synchronous validators that are active on this control.  Calling\n          * this will overwrite any existing sync validators.\n         * @param {?} newValidator\n         * @return {?}\n         */\n        AbstractControl.prototype.setValidators = function (newValidator) {\n            this.validator = coerceToValidator(newValidator);\n        };\n        /**\n         *  Sets the async validators that are active on this control. Calling this\n          * will overwrite any existing async validators.\n         * @param {?} newValidator\n         * @return {?}\n         */\n        AbstractControl.prototype.setAsyncValidators = function (newValidator) {\n            this.asyncValidator = coerceToAsyncValidator(newValidator);\n        };\n        /**\n         *  Empties out the sync validator list.\n         * @return {?}\n         */\n        AbstractControl.prototype.clearValidators = function () { this.validator = null; };\n        /**\n         *  Empties out the async validator list.\n         * @return {?}\n         */\n        AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null; };\n        /**\n         *  Marks the control as `touched`.\n          * *\n          * This will also mark all direct ancestors as `touched` to maintain\n          * the model.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.markAsTouched = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._touched = true;\n            if (this._parent && !onlySelf) {\n                this._parent.markAsTouched({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         *  Marks the control as `untouched`.\n          * *\n          * If the control has any children, it will also mark all children as `untouched`\n          * to maintain the model, and re-calculate the `touched` status of all parent\n          * controls.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.markAsUntouched = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._touched = false;\n            this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });\n            if (this._parent && !onlySelf) {\n                this._parent._updateTouched({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         *  Marks the control as `dirty`.\n          * *\n          * This will also mark all direct ancestors as `dirty` to maintain\n          * the model.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.markAsDirty = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._pristine = false;\n            if (this._parent && !onlySelf) {\n                this._parent.markAsDirty({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         *  Marks the control as `pristine`.\n          * *\n          * If the control has any children, it will also mark all children as `pristine`\n          * to maintain the model, and re-calculate the `pristine` status of all parent\n          * controls.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.markAsPristine = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._pristine = true;\n            this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });\n            if (this._parent && !onlySelf) {\n                this._parent._updatePristine({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         *  Marks the control as `pending`.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.markAsPending = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._status = PENDING;\n            if (this._parent && !onlySelf) {\n                this._parent.markAsPending({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         *  Disables the control. This means the control will be exempt from validation checks and\n          * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n          * *\n          * If the control has children, all children will be disabled to maintain the model.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.disable = function (_a) {\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._status = DISABLED;\n            this._errors = null;\n            this._forEachChild(function (control) { control.disable({ onlySelf: true }); });\n            this._updateValue();\n            if (emitEvent !== false) {\n                this._valueChanges.emit(this._value);\n                this._statusChanges.emit(this._status);\n            }\n            this._updateAncestors(onlySelf);\n            this._onDisabledChange.forEach(function (changeFn) { return changeFn(true); });\n        };\n        /**\n         *  Enables the control. This means the control will be included in validation checks and\n          * the aggregate value of its parent. Its status is re-calculated based on its value and\n          * its validators.\n          * *\n          * If the control has children, all children will be enabled.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.enable = function (_a) {\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._status = VALID;\n            this._forEachChild(function (control) { control.enable({ onlySelf: true }); });\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n            this._updateAncestors(onlySelf);\n            this._onDisabledChange.forEach(function (changeFn) { return changeFn(false); });\n        };\n        /**\n         * @param {?} onlySelf\n         * @return {?}\n         */\n        AbstractControl.prototype._updateAncestors = function (onlySelf) {\n            if (this._parent && !onlySelf) {\n                this._parent.updateValueAndValidity();\n                this._parent._updatePristine();\n                this._parent._updateTouched();\n            }\n        };\n        /**\n         * @param {?} parent\n         * @return {?}\n         */\n        AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };\n        /**\n         *  Sets the value of the control. Abstract method (implemented in sub-classes).\n         * @abstract\n         * @param {?} value\n         * @param {?=} options\n         * @return {?}\n         */\n        AbstractControl.prototype.setValue = function (value, options) { };\n        /**\n         *  Patches the value of the control. Abstract method (implemented in sub-classes).\n         * @abstract\n         * @param {?} value\n         * @param {?=} options\n         * @return {?}\n         */\n        AbstractControl.prototype.patchValue = function (value, options) { };\n        /**\n         *  Resets the control. Abstract method (implemented in sub-classes).\n         * @abstract\n         * @param {?=} value\n         * @param {?=} options\n         * @return {?}\n         */\n        AbstractControl.prototype.reset = function (value, options) { };\n        /**\n         *  Re-calculates the value and validation status of the control.\n          * *\n          * By default, it will also update the value and validity of its ancestors.\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype.updateValueAndValidity = function (_a) {\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._setInitialStatus();\n            this._updateValue();\n            if (this.enabled) {\n                this._errors = this._runValidator();\n                this._status = this._calculateStatus();\n                if (this._status === VALID || this._status === PENDING) {\n                    this._runAsyncValidator(emitEvent);\n                }\n            }\n            if (emitEvent !== false) {\n                this._valueChanges.emit(this._value);\n                this._statusChanges.emit(this._status);\n            }\n            if (this._parent && !onlySelf) {\n                this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n            }\n        };\n        /**\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype._updateTreeValidity = function (_a) {\n            var emitEvent = (_a === void 0 ? { emitEvent: true } : _a).emitEvent;\n            this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity({ emitEvent: emitEvent }); });\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n        };\n        /**\n         * @return {?}\n         */\n        AbstractControl.prototype._setInitialStatus = function () { this._status = this._allControlsDisabled() ? DISABLED : VALID; };\n        /**\n         * @return {?}\n         */\n        AbstractControl.prototype._runValidator = function () {\n            return this.validator ? this.validator(this) : null;\n        };\n        /**\n         * @param {?} emitEvent\n         * @return {?}\n         */\n        AbstractControl.prototype._runAsyncValidator = function (emitEvent) {\n            var _this = this;\n            if (this.asyncValidator) {\n                this._status = PENDING;\n                this._cancelExistingSubscription();\n                var /** @type {?} */ obs = toObservable(this.asyncValidator(this));\n                this._asyncValidationSubscription =\n                    obs.subscribe({ next: function (res) { return _this.setErrors(res, { emitEvent: emitEvent }); } });\n            }\n        };\n        /**\n         * @return {?}\n         */\n        AbstractControl.prototype._cancelExistingSubscription = function () {\n            if (this._asyncValidationSubscription) {\n                this._asyncValidationSubscription.unsubscribe();\n            }\n        };\n        /**\n         *  Sets errors on a form control.\n          * *\n          * This is used when validations are run manually by the user, rather than automatically.\n          * *\n          * Calling `setErrors` will also update the validity of the parent control.\n          * *\n          * ### Example\n          * *\n          * ```\n          * const login = new FormControl(\"someLogin\");\n          * login.setErrors({\n          * \"notUnique\": true\n          * });\n          * *\n          * expect(login.valid).toEqual(false);\n          * expect(login.errors).toEqual({\"notUnique\": true});\n          * *\n          * login.setValue(\"someOtherLogin\");\n          * *\n          * expect(login.valid).toEqual(true);\n          * ```\n         * @param {?} errors\n         * @param {?=} __1\n         * @return {?}\n         */\n        AbstractControl.prototype.setErrors = function (errors, _a) {\n            var emitEvent = (_a === void 0 ? {} : _a).emitEvent;\n            this._errors = errors;\n            this._updateControlsErrors(emitEvent !== false);\n        };\n        /**\n         *  Retrieves a child control given the control's name or path.\n          * *\n          * Paths can be passed in as an array or a string delimited by a dot.\n          * *\n          * To get a control nested within a `person` sub-group:\n          * *\n          * * `this.form.get('person.name');`\n          * *\n          * -OR-\n          * *\n          * * `this.form.get(['person', 'name']);`\n         * @param {?} path\n         * @return {?}\n         */\n        AbstractControl.prototype.get = function (path) { return _find(this, path, '.'); };\n        /**\n         *  Returns true if the control with the given path has the error specified. Otherwise\n          * returns null or undefined.\n          * *\n          * If no path is given, it checks for the error on the present control.\n         * @param {?} errorCode\n         * @param {?=} path\n         * @return {?}\n         */\n        AbstractControl.prototype.getError = function (errorCode, path) {\n            if (path === void 0) { path = null; }\n            var /** @type {?} */ control = path ? this.get(path) : this;\n            return control && control._errors ? control._errors[errorCode] : null;\n        };\n        /**\n         *  Returns true if the control with the given path has the error specified. Otherwise\n          * returns false.\n          * *\n          * If no path is given, it checks for the error on the present control.\n         * @param {?} errorCode\n         * @param {?=} path\n         * @return {?}\n         */\n        AbstractControl.prototype.hasError = function (errorCode, path) {\n            if (path === void 0) { path = null; }\n            return !!this.getError(errorCode, path);\n        };\n        Object.defineProperty(AbstractControl.prototype, \"root\", {\n            /**\n             *  Retrieves the top-level ancestor of this control.\n             * @return {?}\n             */\n            get: function () {\n                var /** @type {?} */ x = this;\n                while (x._parent) {\n                    x = x._parent;\n                }\n                return x;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} emitEvent\n         * @return {?}\n         */\n        AbstractControl.prototype._updateControlsErrors = function (emitEvent) {\n            this._status = this._calculateStatus();\n            if (emitEvent) {\n                this._statusChanges.emit(this._status);\n            }\n            if (this._parent) {\n                this._parent._updateControlsErrors(emitEvent);\n            }\n        };\n        /**\n         * @return {?}\n         */\n        AbstractControl.prototype._initObservables = function () {\n            this._valueChanges = new EventEmitter();\n            this._statusChanges = new EventEmitter();\n        };\n        /**\n         * @return {?}\n         */\n        AbstractControl.prototype._calculateStatus = function () {\n            if (this._allControlsDisabled())\n                return DISABLED;\n            if (this._errors)\n                return INVALID;\n            if (this._anyControlsHaveStatus(PENDING))\n                return PENDING;\n            if (this._anyControlsHaveStatus(INVALID))\n                return INVALID;\n            return VALID;\n        };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AbstractControl.prototype._updateValue = function () { };\n        /**\n         * @abstract\n         * @param {?} cb\n         * @return {?}\n         */\n        AbstractControl.prototype._forEachChild = function (cb) { };\n        /**\n         * @abstract\n         * @param {?} condition\n         * @return {?}\n         */\n        AbstractControl.prototype._anyControls = function (condition) { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AbstractControl.prototype._allControlsDisabled = function () { };\n        /**\n         * @param {?} status\n         * @return {?}\n         */\n        AbstractControl.prototype._anyControlsHaveStatus = function (status) {\n            return this._anyControls(function (control) { return control.status === status; });\n        };\n        /**\n         * @return {?}\n         */\n        AbstractControl.prototype._anyControlsDirty = function () {\n            return this._anyControls(function (control) { return control.dirty; });\n        };\n        /**\n         * @return {?}\n         */\n        AbstractControl.prototype._anyControlsTouched = function () {\n            return this._anyControls(function (control) { return control.touched; });\n        };\n        /**\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype._updatePristine = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._pristine = !this._anyControlsDirty();\n            if (this._parent && !onlySelf) {\n                this._parent._updatePristine({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * @param {?=} __0\n         * @return {?}\n         */\n        AbstractControl.prototype._updateTouched = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._touched = this._anyControlsTouched();\n            if (this._parent && !onlySelf) {\n                this._parent._updateTouched({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * @param {?} formState\n         * @return {?}\n         */\n        AbstractControl.prototype._isBoxedValue = function (formState) {\n            return typeof formState === 'object' && formState !== null &&\n                Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        AbstractControl.prototype._registerOnCollectionChange = function (fn) { this._onCollectionChange = fn; };\n        return AbstractControl;\n    }());\n    /**\n     *  *\n      * It is one of the three fundamental building blocks of Angular forms, along with\n      * {@link FormGroup} and {@link FormArray}.\n      * *\n      * *\n      * When instantiating a {@link FormControl}, you can pass in an initial value as the\n      * first argument. Example:\n      * *\n      * ```ts\n      * const ctrl = new FormControl('some value');\n      * console.log(ctrl.value);     // 'some value'\n      * *```\n      * *\n      * You can also initialize the control with a form state object on instantiation,\n      * which includes both the value and whether or not the control is disabled.\n      * You can't use the value key without the disabled key; both are required\n      * to use this way of initialization.\n      * *\n      * ```ts\n      * const ctrl = new FormControl({value: 'n/a', disabled: true});\n      * console.log(ctrl.value);     // 'n/a'\n      * console.log(ctrl.status);   // 'DISABLED'\n      * ```\n      * *\n      * To include a sync validator (or an array of sync validators) with the control,\n      * pass it in as the second argument. Async validators are also supported, but\n      * have to be passed in separately as the third arg.\n      * *\n      * ```ts\n      * const ctrl = new FormControl('', Validators.required);\n      * console.log(ctrl.value);     // ''\n      * console.log(ctrl.status);   // 'INVALID'\n      * ```\n      * *\n      * See its superclass, {@link AbstractControl}, for more properties and methods.\n      * *\n      * * **npm package**: `@angular/forms`\n      * *\n     */\n    var FormControl = (function (_super) {\n        __extends$6(FormControl, _super);\n        /**\n         * @param {?=} formState\n         * @param {?=} validator\n         * @param {?=} asyncValidator\n         */\n        function FormControl(formState, validator, asyncValidator) {\n            if (formState === void 0) { formState = null; }\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));\n            /** @internal */\n            this._onChange = [];\n            this._applyFormState(formState);\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n            this._initObservables();\n        }\n        /**\n         *  Set the value of the form control to `value`.\n          * *\n          * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n          * and not its parent component. This defaults to false.\n          * *\n          * If `emitEvent` is `true`, this\n          * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n          * to true (as it falls through to `updateValueAndValidity`).\n          * *\n          * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n          * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n          * specified.\n          * *\n          * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n          * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n         * @param {?} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormControl.prototype.setValue = function (value, _a) {\n            var _this = this;\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange;\n            this._value = value;\n            if (this._onChange.length && emitModelToViewChange !== false) {\n                this._onChange.forEach(function (changeFn) { return changeFn(_this._value, emitViewToModelChange !== false); });\n            }\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         *  Patches the value of a control.\n          * *\n          * This function is functionally the same as {@link FormControl.setValue} at this level.\n          * It exists for symmetry with {@link FormGroup.patchValue} on `FormGroups` and `FormArrays`,\n          * where it does behave differently.\n         * @param {?} value\n         * @param {?=} options\n         * @return {?}\n         */\n        FormControl.prototype.patchValue = function (value, options) {\n            if (options === void 0) { options = {}; }\n            this.setValue(value, options);\n        };\n        /**\n         *  Resets the form control. This means by default:\n          * *\n          * * it is marked as `pristine`\n          * * it is marked as `untouched`\n          * * value is set to null\n          * *\n          * You can also reset to a specific form state by passing through a standalone\n          * value or a form state object that contains both a value and a disabled state\n          * (these are the only two properties that cannot be calculated).\n          * *\n          * Ex:\n          * *\n          * ```ts\n          * this.control.reset('Nancy');\n          * *\n          * console.log(this.control.value);  // 'Nancy'\n          * ```\n          * *\n          * OR\n          * *\n          * ```\n          * this.control.reset({value: 'Nancy', disabled: true});\n          * *\n          * console.log(this.control.value);  // 'Nancy'\n          * console.log(this.control.status);  // 'DISABLED'\n          * ```\n         * @param {?=} formState\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormControl.prototype.reset = function (formState, _a) {\n            if (formState === void 0) { formState = null; }\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._applyFormState(formState);\n            this.markAsPristine({ onlySelf: onlySelf });\n            this.markAsUntouched({ onlySelf: onlySelf });\n            this.setValue(this._value, { onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         * @return {?}\n         */\n        FormControl.prototype._updateValue = function () { };\n        /**\n         * @param {?} condition\n         * @return {?}\n         */\n        FormControl.prototype._anyControls = function (condition) { return false; };\n        /**\n         * @return {?}\n         */\n        FormControl.prototype._allControlsDisabled = function () { return this.disabled; };\n        /**\n         *  Register a listener for change events.\n         * @param {?} fn\n         * @return {?}\n         */\n        FormControl.prototype.registerOnChange = function (fn) { this._onChange.push(fn); };\n        /**\n         * @return {?}\n         */\n        FormControl.prototype._clearChangeFns = function () {\n            this._onChange = [];\n            this._onDisabledChange = [];\n            this._onCollectionChange = function () { };\n        };\n        /**\n         *  Register a listener for disabled events.\n         * @param {?} fn\n         * @return {?}\n         */\n        FormControl.prototype.registerOnDisabledChange = function (fn) {\n            this._onDisabledChange.push(fn);\n        };\n        /**\n         * @param {?} cb\n         * @return {?}\n         */\n        FormControl.prototype._forEachChild = function (cb) { };\n        /**\n         * @param {?} formState\n         * @return {?}\n         */\n        FormControl.prototype._applyFormState = function (formState) {\n            if (this._isBoxedValue(formState)) {\n                this._value = formState.value;\n                formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n                    this.enable({ onlySelf: true, emitEvent: false });\n            }\n            else {\n                this._value = formState;\n            }\n        };\n        return FormControl;\n    }(AbstractControl));\n    /**\n     *  instances.\n      * *\n      * A `FormGroup` aggregates the values of each child {@link FormControl} into one object,\n      * with each control name as the key.  It calculates its status by reducing the statuses\n      * of its children. For example, if one of the controls in a group is invalid, the entire\n      * group becomes invalid.\n      * *\n      * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n      * along with {@link FormControl} and {@link FormArray}.\n      * *\n      * *\n      * When instantiating a {@link FormGroup}, pass in a collection of child controls as the first\n      * argument. The key for each child will be the name under which it is registered.\n      * *\n      * ### Example\n      * *\n      * ```\n      * const form = new FormGroup({\n      * first: new FormControl('Nancy', Validators.minLength(2)),\n      * last: new FormControl('Drew'),\n      * });\n      * *\n      * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n      * console.log(form.status);  // 'VALID'\n      * ```\n      * *\n      * You can also include group-level validators as the second arg, or group-level async\n      * validators as the third arg. These come in handy when you want to perform validation\n      * that considers the value of more than one child control.\n      * *\n      * ### Example\n      * *\n      * ```\n      * const form = new FormGroup({\n      * password: new FormControl('', Validators.minLength(2)),\n      * passwordConfirm: new FormControl('', Validators.minLength(2)),\n      * }, passwordMatchValidator);\n      * *\n      * *\n      * function passwordMatchValidator(g: FormGroup) {\n      * return g.get('password').value === g.get('passwordConfirm').value\n      * ? null : {'mismatch': true};\n      * }\n      * ```\n      * *\n      * * **npm package**: `@angular/forms`\n      * *\n     */\n    var FormGroup = (function (_super) {\n        __extends$6(FormGroup, _super);\n        /**\n         * @param {?} controls\n         * @param {?=} validator\n         * @param {?=} asyncValidator\n         */\n        function FormGroup(controls, validator, asyncValidator) {\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            _super.call(this, validator, asyncValidator);\n            this.controls = controls;\n            this._initObservables();\n            this._setUpControls();\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        }\n        /**\n         *  Registers a control with the group's list of controls.\n          * *\n          * This method does not update value or validity of the control, so for\n          * most cases you'll want to use {@link FormGroup.addControl} instead.\n         * @param {?} name\n         * @param {?} control\n         * @return {?}\n         */\n        FormGroup.prototype.registerControl = function (name, control) {\n            if (this.controls[name])\n                return this.controls[name];\n            this.controls[name] = control;\n            control.setParent(this);\n            control._registerOnCollectionChange(this._onCollectionChange);\n            return control;\n        };\n        /**\n         *  Add a control to this group.\n         * @param {?} name\n         * @param {?} control\n         * @return {?}\n         */\n        FormGroup.prototype.addControl = function (name, control) {\n            this.registerControl(name, control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         *  Remove a control from this group.\n         * @param {?} name\n         * @return {?}\n         */\n        FormGroup.prototype.removeControl = function (name) {\n            if (this.controls[name])\n                this.controls[name]._registerOnCollectionChange(function () { });\n            delete (this.controls[name]);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         *  Replace an existing control.\n         * @param {?} name\n         * @param {?} control\n         * @return {?}\n         */\n        FormGroup.prototype.setControl = function (name, control) {\n            if (this.controls[name])\n                this.controls[name]._registerOnCollectionChange(function () { });\n            delete (this.controls[name]);\n            if (control)\n                this.registerControl(name, control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         *  Check whether there is an enabled control with the given name in the group.\n          * *\n          * It will return false for disabled controls. If you'd like to check for\n          * existence in the group only, use {@link AbstractControl.get} instead.\n         * @param {?} controlName\n         * @return {?}\n         */\n        FormGroup.prototype.contains = function (controlName) {\n            return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n        };\n        /**\n         *  Sets the value of the {@link FormGroup}. It accepts an object that matches\n          * the structure of the group, with control names as keys.\n          * *\n          * This method performs strict checks, so it will throw an error if you try\n          * to set the value of a control that doesn't exist or if you exclude the\n          * value of a control.\n          * *\n          * ### Example\n          * *\n          * ```\n          * const form = new FormGroup({\n          * first: new FormControl(),\n          * last: new FormControl()\n          * });\n          * console.log(form.value);   // {first: null, last: null}\n          * *\n          * form.setValue({first: 'Nancy', last: 'Drew'});\n          * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n          * *\n          * ```\n         * @param {?} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormGroup.prototype.setValue = function (value, _a) {\n            var _this = this;\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._checkAllValuesPresent(value);\n            Object.keys(value).forEach(function (name) {\n                _this._throwIfControlMissing(name);\n                _this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: emitEvent });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         *  Patches the value of the {@link FormGroup}. It accepts an object with control\n          * names as keys, and will do its best to match the values to the correct controls\n          * in the group.\n          * *\n          * It accepts both super-sets and sub-sets of the group without throwing an error.\n          * *\n          * ### Example\n          * *\n          * ```\n          * const form = new FormGroup({\n          * first: new FormControl(),\n          * last: new FormControl()\n          * });\n          * console.log(form.value);   // {first: null, last: null}\n          * *\n          * form.patchValue({first: 'Nancy'});\n          * console.log(form.value);   // {first: 'Nancy', last: null}\n          * *\n          * ```\n         * @param {?} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormGroup.prototype.patchValue = function (value, _a) {\n            var _this = this;\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            Object.keys(value).forEach(function (name) {\n                if (_this.controls[name]) {\n                    _this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: emitEvent });\n                }\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         *  Resets the {@link FormGroup}. This means by default:\n          * *\n          * * The group and all descendants are marked `pristine`\n          * * The group and all descendants are marked `untouched`\n          * * The value of all descendants will be null or null maps\n          * *\n          * You can also reset to a specific form state by passing in a map of states\n          * that matches the structure of your form, with control names as keys. The state\n          * can be a standalone value or a form state object with both a value and a disabled\n          * status.\n          * *\n          * ### Example\n          * *\n          * ```ts\n          * this.form.reset({first: 'name', last: 'last name'});\n          * *\n          * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n          * ```\n          * *\n          * - OR -\n          * *\n          * ```\n          * this.form.reset({\n          * first: {value: 'name', disabled: true},\n          * last: 'last'\n          * });\n          * *\n          * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n          * console.log(this.form.get('first').status);  // 'DISABLED'\n          * ```\n         * @param {?=} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormGroup.prototype.reset = function (value, _a) {\n            if (value === void 0) { value = {}; }\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._forEachChild(function (control, name) {\n                control.reset(value[name], { onlySelf: true, emitEvent: emitEvent });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n            this._updatePristine({ onlySelf: onlySelf });\n            this._updateTouched({ onlySelf: onlySelf });\n        };\n        /**\n         *  The aggregate value of the {@link FormGroup}, including any disabled controls.\n          * *\n          * If you'd like to include all values regardless of disabled status, use this method.\n          * Otherwise, the `value` property is the best way to get the value of the group.\n         * @return {?}\n         */\n        FormGroup.prototype.getRawValue = function () {\n            return this._reduceChildren({}, function (acc, control, name) {\n                acc[name] = control.value;\n                return acc;\n            });\n        };\n        /**\n         * @param {?} name\n         * @return {?}\n         */\n        FormGroup.prototype._throwIfControlMissing = function (name) {\n            if (!Object.keys(this.controls).length) {\n                throw new Error(\"\\n        There are no form controls registered with this group yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n            }\n            if (!this.controls[name]) {\n                throw new Error(\"Cannot find form control with name: \" + name + \".\");\n            }\n        };\n        /**\n         * @param {?} cb\n         * @return {?}\n         */\n        FormGroup.prototype._forEachChild = function (cb) {\n            var _this = this;\n            Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k); });\n        };\n        /**\n         * @return {?}\n         */\n        FormGroup.prototype._setUpControls = function () {\n            var _this = this;\n            this._forEachChild(function (control) {\n                control.setParent(_this);\n                control._registerOnCollectionChange(_this._onCollectionChange);\n            });\n        };\n        /**\n         * @return {?}\n         */\n        FormGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };\n        /**\n         * @param {?} condition\n         * @return {?}\n         */\n        FormGroup.prototype._anyControls = function (condition) {\n            var _this = this;\n            var /** @type {?} */ res = false;\n            this._forEachChild(function (control, name) {\n                res = res || (_this.contains(name) && condition(control));\n            });\n            return res;\n        };\n        /**\n         * @return {?}\n         */\n        FormGroup.prototype._reduceValue = function () {\n            var _this = this;\n            return this._reduceChildren({}, function (acc, control, name) {\n                if (control.enabled || _this.disabled) {\n                    acc[name] = control.value;\n                }\n                return acc;\n            });\n        };\n        /**\n         * @param {?} initValue\n         * @param {?} fn\n         * @return {?}\n         */\n        FormGroup.prototype._reduceChildren = function (initValue, fn) {\n            var /** @type {?} */ res = initValue;\n            this._forEachChild(function (control, name) { res = fn(res, control, name); });\n            return res;\n        };\n        /**\n         * @return {?}\n         */\n        FormGroup.prototype._allControlsDisabled = function () {\n            for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {\n                var controlName = _a[_i];\n                if (this.controls[controlName].enabled) {\n                    return false;\n                }\n            }\n            return Object.keys(this.controls).length > 0 || this.disabled;\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        FormGroup.prototype._checkAllValuesPresent = function (value) {\n            this._forEachChild(function (control, name) {\n                if (value[name] === undefined) {\n                    throw new Error(\"Must supply a value for form control with name: '\" + name + \"'.\");\n                }\n            });\n        };\n        return FormGroup;\n    }(AbstractControl));\n    /**\n     *  instances.\n      * *\n      * A `FormArray` aggregates the values of each child {@link FormControl} into an array.\n      * It calculates its status by reducing the statuses of its children. For example, if one of\n      * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n      * *\n      * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n      * along with {@link FormControl} and {@link FormGroup}.\n      * *\n      * *\n      * When instantiating a {@link FormArray}, pass in an array of child controls as the first\n      * argument.\n      * *\n      * ### Example\n      * *\n      * ```\n      * const arr = new FormArray([\n      * new FormControl('Nancy', Validators.minLength(2)),\n      * new FormControl('Drew'),\n      * ]);\n      * *\n      * console.log(arr.value);   // ['Nancy', 'Drew']\n      * console.log(arr.status);  // 'VALID'\n      * ```\n      * *\n      * You can also include array-level validators as the second arg, or array-level async\n      * validators as the third arg. These come in handy when you want to perform validation\n      * that considers the value of more than one child control.\n      * *\n      * ### Adding or removing controls\n      * *\n      * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n      * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n      * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n      * the `FormArray` directly, as that will result in strange and unexpected behavior such\n      * as broken change detection.\n      * *\n      * * **npm package**: `@angular/forms`\n      * *\n     */\n    var FormArray = (function (_super) {\n        __extends$6(FormArray, _super);\n        /**\n         * @param {?} controls\n         * @param {?=} validator\n         * @param {?=} asyncValidator\n         */\n        function FormArray(controls, validator, asyncValidator) {\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            _super.call(this, validator, asyncValidator);\n            this.controls = controls;\n            this._initObservables();\n            this._setUpControls();\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        }\n        /**\n         *  Get the {@link AbstractControl} at the given `index` in the array.\n         * @param {?} index\n         * @return {?}\n         */\n        FormArray.prototype.at = function (index) { return this.controls[index]; };\n        /**\n         *  Insert a new {@link AbstractControl} at the end of the array.\n         * @param {?} control\n         * @return {?}\n         */\n        FormArray.prototype.push = function (control) {\n            this.controls.push(control);\n            this._registerControl(control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         *  Insert a new {@link AbstractControl} at the given `index` in the array.\n         * @param {?} index\n         * @param {?} control\n         * @return {?}\n         */\n        FormArray.prototype.insert = function (index, control) {\n            this.controls.splice(index, 0, control);\n            this._registerControl(control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         *  Remove the control at the given `index` in the array.\n         * @param {?} index\n         * @return {?}\n         */\n        FormArray.prototype.removeAt = function (index) {\n            if (this.controls[index])\n                this.controls[index]._registerOnCollectionChange(function () { });\n            this.controls.splice(index, 1);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         *  Replace an existing control.\n         * @param {?} index\n         * @param {?} control\n         * @return {?}\n         */\n        FormArray.prototype.setControl = function (index, control) {\n            if (this.controls[index])\n                this.controls[index]._registerOnCollectionChange(function () { });\n            this.controls.splice(index, 1);\n            if (control) {\n                this.controls.splice(index, 0, control);\n                this._registerControl(control);\n            }\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        Object.defineProperty(FormArray.prototype, \"length\", {\n            /**\n             *  Length of the control array.\n             * @return {?}\n             */\n            get: function () { return this.controls.length; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         *  Sets the value of the {@link FormArray}. It accepts an array that matches\n          * the structure of the control.\n          * *\n          * This method performs strict checks, so it will throw an error if you try\n          * to set the value of a control that doesn't exist or if you exclude the\n          * value of a control.\n          * *\n          * ### Example\n          * *\n          * ```\n          * const arr = new FormArray([\n          * new FormControl(),\n          * new FormControl()\n          * ]);\n          * console.log(arr.value);   // [null, null]\n          * *\n          * arr.setValue(['Nancy', 'Drew']);\n          * console.log(arr.value);   // ['Nancy', 'Drew']\n          * ```\n         * @param {?} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormArray.prototype.setValue = function (value, _a) {\n            var _this = this;\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._checkAllValuesPresent(value);\n            value.forEach(function (newValue, index) {\n                _this._throwIfControlMissing(index);\n                _this.at(index).setValue(newValue, { onlySelf: true, emitEvent: emitEvent });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         *  Patches the value of the {@link FormArray}. It accepts an array that matches the\n          * structure of the control, and will do its best to match the values to the correct\n          * controls in the group.\n          * *\n          * It accepts both super-sets and sub-sets of the array without throwing an error.\n          * *\n          * ### Example\n          * *\n          * ```\n          * const arr = new FormArray([\n          * new FormControl(),\n          * new FormControl()\n          * ]);\n          * console.log(arr.value);   // [null, null]\n          * *\n          * arr.patchValue(['Nancy']);\n          * console.log(arr.value);   // ['Nancy', null]\n          * ```\n         * @param {?} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormArray.prototype.patchValue = function (value, _a) {\n            var _this = this;\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            value.forEach(function (newValue, index) {\n                if (_this.at(index)) {\n                    _this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: emitEvent });\n                }\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         *  Resets the {@link FormArray}. This means by default:\n          * *\n          * * The array and all descendants are marked `pristine`\n          * * The array and all descendants are marked `untouched`\n          * * The value of all descendants will be null or null maps\n          * *\n          * You can also reset to a specific form state by passing in an array of states\n          * that matches the structure of the control. The state can be a standalone value\n          * or a form state object with both a value and a disabled status.\n          * *\n          * ### Example\n          * *\n          * ```ts\n          * this.arr.reset(['name', 'last name']);\n          * *\n          * console.log(this.arr.value);  // ['name', 'last name']\n          * ```\n          * *\n          * - OR -\n          * *\n          * ```\n          * this.arr.reset([\n          * {value: 'name', disabled: true},\n          * 'last'\n          * ]);\n          * *\n          * console.log(this.arr.value);  // ['name', 'last name']\n          * console.log(this.arr.get(0).status);  // 'DISABLED'\n          * ```\n         * @param {?=} value\n         * @param {?=} __1\n         * @return {?}\n         */\n        FormArray.prototype.reset = function (value, _a) {\n            if (value === void 0) { value = []; }\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._forEachChild(function (control, index) {\n                control.reset(value[index], { onlySelf: true, emitEvent: emitEvent });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n            this._updatePristine({ onlySelf: onlySelf });\n            this._updateTouched({ onlySelf: onlySelf });\n        };\n        /**\n         *  The aggregate value of the array, including any disabled controls.\n          * *\n          * If you'd like to include all values regardless of disabled status, use this method.\n          * Otherwise, the `value` property is the best way to get the value of the array.\n         * @return {?}\n         */\n        FormArray.prototype.getRawValue = function () { return this.controls.map(function (control) { return control.value; }); };\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n        FormArray.prototype._throwIfControlMissing = function (index) {\n            if (!this.controls.length) {\n                throw new Error(\"\\n        There are no form controls registered with this array yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n            }\n            if (!this.at(index)) {\n                throw new Error(\"Cannot find form control at index \" + index);\n            }\n        };\n        /**\n         * @param {?} cb\n         * @return {?}\n         */\n        FormArray.prototype._forEachChild = function (cb) {\n            this.controls.forEach(function (control, index) { cb(control, index); });\n        };\n        /**\n         * @return {?}\n         */\n        FormArray.prototype._updateValue = function () {\n            var _this = this;\n            this._value = this.controls.filter(function (control) { return control.enabled || _this.disabled; })\n                .map(function (control) { return control.value; });\n        };\n        /**\n         * @param {?} condition\n         * @return {?}\n         */\n        FormArray.prototype._anyControls = function (condition) {\n            return this.controls.some(function (control) { return control.enabled && condition(control); });\n        };\n        /**\n         * @return {?}\n         */\n        FormArray.prototype._setUpControls = function () {\n            var _this = this;\n            this._forEachChild(function (control) { return _this._registerControl(control); });\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        FormArray.prototype._checkAllValuesPresent = function (value) {\n            this._forEachChild(function (control, i) {\n                if (value[i] === undefined) {\n                    throw new Error(\"Must supply a value for form control at index: \" + i + \".\");\n                }\n            });\n        };\n        /**\n         * @return {?}\n         */\n        FormArray.prototype._allControlsDisabled = function () {\n            for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {\n                var control = _a[_i];\n                if (control.enabled)\n                    return false;\n            }\n            return this.controls.length > 0 || this.disabled;\n        };\n        /**\n         * @param {?} control\n         * @return {?}\n         */\n        FormArray.prototype._registerControl = function (control) {\n            control.setParent(this);\n            control._registerOnCollectionChange(this._onCollectionChange);\n        };\n        return FormArray;\n    }(AbstractControl));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$4 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ formDirectiveProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return NgForm; })\n    };\n    var /** @type {?} */ resolvedPromise = Promise.resolve(null);\n    /**\n     *  to track aggregate form value and validation status.\n      * *\n      * *\n      * As soon as you import the `FormsModule`, this directive becomes active by default on\n      * all `<form>` tags.  You don't need to add a special selector.\n      * *\n      * You can export the directive into a local template variable using `ngForm` as the key\n      * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n      * {@link FormGroup} instance are duplicated on the directive itself, so a reference to it\n      * will give you access to the aggregate value and validity status of the form, as well as\n      * user interaction properties like `dirty` and `touched`.\n      * *\n      * To register child controls with the form, you'll want to use {@link NgModel} with a\n      * `name` attribute.  You can also use {@link NgModelGroup} if you'd like to create\n      * sub-groups within the form.\n      * *\n      * You can listen to the directive's `ngSubmit` event to be notified when the user has\n      * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n      * submission event.\n      * *\n      * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n      * *\n      * * **npm package**: `@angular/forms`\n      * *\n      * * **NgModule**: `FormsModule`\n      * *\n      * @stable\n     */\n    var NgForm = (function (_super) {\n        __extends$4(NgForm, _super);\n        /**\n         * @param {?} validators\n         * @param {?} asyncValidators\n         */\n        function NgForm(validators, asyncValidators) {\n            _super.call(this);\n            this._submitted = false;\n            this.ngSubmit = new EventEmitter();\n            this.form =\n                new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n        }\n        Object.defineProperty(NgForm.prototype, \"submitted\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._submitted; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"formDirective\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.form; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return []; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"controls\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.form.controls; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        NgForm.prototype.addControl = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var /** @type {?} */ container = _this._findContainer(dir.path);\n                dir._control = (container.registerControl(dir.name, dir.control));\n                setUpControl(dir.control, dir);\n                dir.control.updateValueAndValidity({ emitEvent: false });\n            });\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        NgForm.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        NgForm.prototype.removeControl = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var /** @type {?} */ container = _this._findContainer(dir.path);\n                if (container) {\n                    container.removeControl(dir.name);\n                }\n            });\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        NgForm.prototype.addFormGroup = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var /** @type {?} */ container = _this._findContainer(dir.path);\n                var /** @type {?} */ group = new FormGroup({});\n                setUpFormContainer(group, dir);\n                container.registerControl(dir.name, group);\n                group.updateValueAndValidity({ emitEvent: false });\n            });\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        NgForm.prototype.removeFormGroup = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var /** @type {?} */ container = _this._findContainer(dir.path);\n                if (container) {\n                    container.removeControl(dir.name);\n                }\n            });\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        NgForm.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };\n        /**\n         * @param {?} dir\n         * @param {?} value\n         * @return {?}\n         */\n        NgForm.prototype.updateModel = function (dir, value) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var /** @type {?} */ ctrl = (_this.form.get(dir.path));\n                ctrl.setValue(value);\n            });\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        NgForm.prototype.setValue = function (value) { this.control.setValue(value); };\n        /**\n         * @param {?} $event\n         * @return {?}\n         */\n        NgForm.prototype.onSubmit = function ($event) {\n            this._submitted = true;\n            this.ngSubmit.emit($event);\n            return false;\n        };\n        /**\n         * @return {?}\n         */\n        NgForm.prototype.onReset = function () { this.resetForm(); };\n        /**\n         * @param {?=} value\n         * @return {?}\n         */\n        NgForm.prototype.resetForm = function (value) {\n            if (value === void 0) { value = undefined; }\n            this.form.reset(value);\n            this._submitted = false;\n        };\n        /**\n         * @param {?} path\n         * @return {?}\n         */\n        NgForm.prototype._findContainer = function (path) {\n            path.pop();\n            return path.length ? (this.form.get(path)) : this.form;\n        };\n        NgForm.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n                        providers: [formDirectiveProvider],\n                        host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                        outputs: ['ngSubmit'],\n                        exportAs: 'ngForm'\n                    },] },\n        ];\n        /** @nocollapse */\n        NgForm.ctorParameters = function () { return [\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ]; };\n        return NgForm;\n    }(ControlContainer));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var /** @type {?} */ Examples = {\n        formControlName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <input formControlName=\\\"firstName\\\">\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       firstName: new FormControl()\\n    });\",\n        formGroupName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <div formGroupName=\\\"person\\\">\\n          <input formControlName=\\\"firstName\\\">\\n       </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       person: new FormGroup({ firstName: new FormControl() })\\n    });\",\n        formArrayName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <div formArrayName=\\\"cities\\\">\\n        <div *ngFor=\\\"let city of cityArray.controls; let i=index\\\">\\n          <input [formControlName]=\\\"i\\\">\\n        </div>\\n      </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.cityArray = new FormArray([new FormControl('SF')]);\\n    this.myGroup = new FormGroup({\\n      cities: this.cityArray\\n    });\",\n        ngModelGroup: \"\\n    <form>\\n       <div ngModelGroup=\\\"person\\\">\\n          <input [(ngModel)]=\\\"person.name\\\" name=\\\"firstName\\\">\\n       </div>\\n    </form>\",\n        ngModelWithFormGroup: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <input formControlName=\\\"firstName\\\">\\n       <input [(ngModel)]=\\\"showMoreControls\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n    </div>\\n  \"\n    };\n\n    var TemplateDrivenErrors = (function () {\n        function TemplateDrivenErrors() {\n        }\n        /**\n         * @return {?}\n         */\n        TemplateDrivenErrors.modelParentException = function () {\n            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\\n      formGroup's partner directive \\\"formControlName\\\" instead.  Example:\\n\\n      \" + Examples.formControlName + \"\\n\\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\\n\\n      Example:\\n\\n      \" + Examples.ngModelWithFormGroup);\n        };\n        /**\n         * @return {?}\n         */\n        TemplateDrivenErrors.formGroupNameException = function () {\n            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\\n\\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n        };\n        /**\n         * @return {?}\n         */\n        TemplateDrivenErrors.missingNameException = function () {\n            throw new Error(\"If ngModel is used within a form tag, either the name attribute must be set or the form\\n      control must be defined as 'standalone' in ngModelOptions.\\n\\n      Example 1: <input [(ngModel)]=\\\"person.firstName\\\" name=\\\"first\\\">\\n      Example 2: <input [(ngModel)]=\\\"person.firstName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\");\n        };\n        /**\n         * @return {?}\n         */\n        TemplateDrivenErrors.modelGroupParentException = function () {\n            throw new Error(\"\\n      ngModelGroup cannot be used with a parent formGroup directive.\\n\\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n        };\n        return TemplateDrivenErrors;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$8 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ modelGroupProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return NgModelGroup; })\n    };\n    /**\n     *  *\n      * *\n      * This directive can only be used as a child of {@link NgForm} (or in other words,\n      * within `<form>` tags).\n      * *\n      * Use this directive if you'd like to create a sub-group within a form. This can\n      * come in handy if you want to validate a sub-group of your form separately from\n      * the rest of your form, or if some values in your domain model make more sense to\n      * consume together in a nested object.\n      * *\n      * Pass in the name you'd like this sub-group to have and it will become the key\n      * for the sub-group in the form's full value. You can also export the directive into\n      * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n      * *\n      * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n      * *\n      * * **npm package**: `@angular/forms`\n      * *\n      * * **NgModule**: `FormsModule`\n      * *\n     */\n    var NgModelGroup = (function (_super) {\n        __extends$8(NgModelGroup, _super);\n        /**\n         * @param {?} parent\n         * @param {?} validators\n         * @param {?} asyncValidators\n         */\n        function NgModelGroup(parent, validators, asyncValidators) {\n            _super.call(this);\n            this._parent = parent;\n            this._validators = validators;\n            this._asyncValidators = asyncValidators;\n        }\n        /**\n         * @return {?}\n         */\n        NgModelGroup.prototype._checkParentType = function () {\n            if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                TemplateDrivenErrors.modelGroupParentException();\n            }\n        };\n        NgModelGroup.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },\n        ];\n        /** @nocollapse */\n        NgModelGroup.ctorParameters = function () { return [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ]; };\n        NgModelGroup.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['ngModelGroup',] },],\n        };\n        return NgModelGroup;\n    }(AbstractFormGroupDirective));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$7 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ formControlBinding = {\n        provide: NgControl,\n        useExisting: _angular_core.forwardRef(function () { return NgModel; })\n    };\n    /**\n     * `ngModel` forces an additional change detection run when its inputs change:\n     * E.g.:\n     * ```\n     * <div>{{myModel.valid}}</div>\n     * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n     * ```\n     * I.e. `ngModel` can export itself on the element and then be used in the template.\n     * Normally, this would result in expressions before the `input` that use the exported directive\n     * to have and old value as they have been\n     * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n     * detection run.\n     *\n     * Notes:\n     * - this is just one extra run no matter how many `ngModel` have been changed.\n     * - this is a general problem when using `exportAs` for directives!\n     */\n    var /** @type {?} */ resolvedPromise$1 = Promise.resolve(null);\n    /**\n     *  to a form control element.\n      * *\n      * The {@link FormControl} instance will track the value, user interaction, and\n      * validation status of the control and keep the view synced with the model. If used\n      * within a parent form, the directive will also register itself with the form as a child\n      * control.\n      * *\n      * *\n      * This directive can be used by itself or as part of a larger form. All you need is the\n      * `ngModel` selector to activate it.\n      * *\n      * It accepts a domain model as an optional {@link @Input}. If you have a one-way binding\n      * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n      * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n      * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n      * the domain model in your class as well.\n      * *\n      * If you wish to inspect the properties of the associated {@link FormControl} (like\n      * validity state), you can also export the directive into a local template variable using\n      * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n      * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n      * will fall through to the control anyway, so you can access them directly. You can see a\n      * full list of properties directly available in {@link AbstractControlDirective}.\n      * *\n      * The following is an example of a simple standalone control using `ngModel`:\n      * *\n      * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n      * *\n      * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n      * so that the control can be registered with the parent form under that name.\n      * *\n      * It's worth noting that in the context of a parent form, you often can skip one-way or\n      * two-way binding because the parent form will sync the value for you. You can access\n      * its properties by exporting it into a local template variable using `ngForm` (ex:\n      * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n      * *\n      * If you do need to populate initial values into your form, using a one-way binding for\n      * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n      * than the domain model's value on submit.\n      * *\n      * Take a look at an example of using `ngModel` within a form:\n      * *\n      * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n      * *\n      * To see `ngModel` examples with different form control types, see:\n      * *\n      * * Radio buttons: {@link RadioControlValueAccessor}\n      * * Selects: {@link SelectControlValueAccessor}\n      * *\n      * **npm package**: `@angular/forms`\n      * *\n      * **NgModule**: `FormsModule`\n      * *\n      * @stable\n     */\n    var NgModel = (function (_super) {\n        __extends$7(NgModel, _super);\n        /**\n         * @param {?} parent\n         * @param {?} validators\n         * @param {?} asyncValidators\n         * @param {?} valueAccessors\n         */\n        function NgModel(parent, validators, asyncValidators, valueAccessors) {\n            _super.call(this);\n            /** @internal */\n            this._control = new FormControl();\n            /** @internal */\n            this._registered = false;\n            this.update = new EventEmitter();\n            this._parent = parent;\n            this._rawValidators = validators || [];\n            this._rawAsyncValidators = asyncValidators || [];\n            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n        }\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        NgModel.prototype.ngOnChanges = function (changes) {\n            this._checkForErrors();\n            if (!this._registered)\n                this._setUpControl();\n            if ('isDisabled' in changes) {\n                this._updateDisabled(changes);\n            }\n            if (isPropertyUpdated(changes, this.viewModel)) {\n                this._updateValue(this.model);\n                this.viewModel = this.model;\n            }\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this); };\n        Object.defineProperty(NgModel.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._control; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return this._parent ? controlPath(this.name, this._parent) : [this.name];\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"formDirective\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._parent ? this._parent.formDirective : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"validator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeValidators(this._rawValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"asyncValidator\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return composeAsyncValidators(this._rawAsyncValidators);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        NgModel.prototype.viewToModelUpdate = function (newValue) {\n            this.viewModel = newValue;\n            this.update.emit(newValue);\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype._setUpControl = function () {\n            this._isStandalone() ? this._setUpStandalone() :\n                this.formDirective.addControl(this);\n            this._registered = true;\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype._isStandalone = function () {\n            return !this._parent || (this.options && this.options.standalone);\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype._setUpStandalone = function () {\n            setUpControl(this._control, this);\n            this._control.updateValueAndValidity({ emitEvent: false });\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype._checkForErrors = function () {\n            if (!this._isStandalone()) {\n                this._checkParentType();\n            }\n            this._checkName();\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype._checkParentType = function () {\n            if (!(this._parent instanceof NgModelGroup) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                TemplateDrivenErrors.formGroupNameException();\n            }\n            else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                TemplateDrivenErrors.modelParentException();\n            }\n        };\n        /**\n         * @return {?}\n         */\n        NgModel.prototype._checkName = function () {\n            if (this.options && this.options.name)\n                this.name = this.options.name;\n            if (!this._isStandalone() && !this.name) {\n                TemplateDrivenErrors.missingNameException();\n            }\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        NgModel.prototype._updateValue = function (value) {\n            var _this = this;\n            resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });\n        };\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        NgModel.prototype._updateDisabled = function (changes) {\n            var _this = this;\n            var /** @type {?} */ disabledValue = changes['isDisabled'].currentValue;\n            var /** @type {?} */ isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');\n            resolvedPromise$1.then(function () {\n                if (isDisabled && !_this.control.disabled) {\n                    _this.control.disable();\n                }\n                else if (!isDisabled && _this.control.disabled) {\n                    _this.control.enable();\n                }\n            });\n        };\n        NgModel.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[ngModel]:not([formControlName]):not([formControl])',\n                        providers: [formControlBinding],\n                        exportAs: 'ngModel'\n                    },] },\n        ];\n        /** @nocollapse */\n        NgModel.ctorParameters = function () { return [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n        ]; };\n        NgModel.propDecorators = {\n            'name': [{ type: _angular_core.Input },],\n            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n            'options': [{ type: _angular_core.Input, args: ['ngModelOptions',] },],\n            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n        };\n        return NgModel;\n    }(NgControl));\n\n    var ReactiveErrors = (function () {\n        function ReactiveErrors() {\n        }\n        /**\n         * @return {?}\n         */\n        ReactiveErrors.controlParentException = function () {\n            throw new Error(\"formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formControlName);\n        };\n        /**\n         * @return {?}\n         */\n        ReactiveErrors.ngModelGroupException = function () {\n            throw new Error(\"formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\\n       that also have a \\\"form\\\" prefix: formGroupName, formArrayName, or formGroup.\\n\\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\\n\\n        \" + Examples.formGroupName + \"\\n\\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\\n\\n        \" + Examples.ngModelGroup);\n        };\n        /**\n         * @return {?}\n         */\n        ReactiveErrors.missingFormException = function () {\n            throw new Error(\"formGroup expects a FormGroup instance. Please pass one in.\\n\\n       Example:\\n\\n       \" + Examples.formControlName);\n        };\n        /**\n         * @return {?}\n         */\n        ReactiveErrors.groupParentException = function () {\n            throw new Error(\"formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n      directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formGroupName);\n        };\n        /**\n         * @return {?}\n         */\n        ReactiveErrors.arrayParentException = function () {\n            throw new Error(\"formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n        Example:\\n\\n        \" + Examples.formArrayName);\n        };\n        /**\n         * @return {?}\n         */\n        ReactiveErrors.disabledAttrWarning = function () {\n            console.warn(\"\\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\\n      you. We recommend using this approach to avoid 'changed after checked' errors.\\n       \\n      Example: \\n      form = new FormGroup({\\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\\n        last: new FormControl('Drew', Validators.required)\\n      });\\n    \");\n        };\n        return ReactiveErrors;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$9 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ formControlBinding$1 = {\n        provide: NgControl,\n        useExisting: _angular_core.forwardRef(function () { return FormControlDirective; })\n    };\n    /**\n     *  *\n      * In other words, this directive ensures that any values written to the {@link FormControl}\n      * instance programmatically will be written to the DOM element (model -> view). Conversely,\n      * any values written to the DOM element through user input will be reflected in the\n      * {@link FormControl} instance (view -> model).\n      * *\n      * *\n      * Use this directive if you'd like to create and manage a {@link FormControl} instance directly.\n      * Simply create a {@link FormControl}, save it to your component class, and pass it into the\n      * {@link FormControlDirective}.\n      * *\n      * This directive is designed to be used as a standalone control.  Unlike {@link FormControlName},\n      * it does not require that your {@link FormControl} instance be part of any parent\n      * {@link FormGroup}, and it won't be registered to any {@link FormGroupDirective} that\n      * exists above it.\n      * *\n      * **Get the value**: the `value` property is always synced and available on the\n      * {@link FormControl} instance. See a full list of available properties in\n      * {@link AbstractControl}.\n      * *\n      * **Set the value**: You can pass in an initial value when instantiating the {@link FormControl},\n      * or you can set it programmatically later using {@link AbstractControl.setValue} or\n      * {@link AbstractControl.patchValue}.\n      * *\n      * **Listen to value**: If you want to listen to changes in the value of the control, you can\n      * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n      * {@link AbstractControl.statusChanges} to be notified when the validation status is\n      * re-calculated.\n      * *\n      * ### Example\n      * *\n      * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n      * *\n      * * **npm package**: `@angular/forms`\n      * *\n      * * **NgModule**: `ReactiveFormsModule`\n      * *\n      * @stable\n     */\n    var FormControlDirective = (function (_super) {\n        __extends$9(FormControlDirective, _super);\n        /**\n         * @param {?} validators\n         * @param {?} asyncValidators\n         * @param {?} valueAccessors\n         */\n        function FormControlDirective(validators, asyncValidators, valueAccessors) {\n            _super.call(this);\n            this.update = new EventEmitter();\n            this._rawValidators = validators || [];\n            this._rawAsyncValidators = asyncValidators || [];\n            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n        }\n        Object.defineProperty(FormControlDirective.prototype, \"isDisabled\", {\n            /**\n             * @param {?} isDisabled\n             * @return {?}\n             */\n            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        FormControlDirective.prototype.ngOnChanges = function (changes) {\n            if (this._isControlChanged(changes)) {\n                setUpControl(this.form, this);\n                if (this.control.disabled && this.valueAccessor.setDisabledState) {\n                    this.valueAccessor.setDisabledState(true);\n                }\n                this.form.updateValueAndValidity({ emitEvent: false });\n            }\n            if (isPropertyUpdated(changes, this.viewModel)) {\n                this.form.setValue(this.model);\n                this.viewModel = this.model;\n            }\n        };\n        Object.defineProperty(FormControlDirective.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return []; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlDirective.prototype, \"validator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeValidators(this._rawValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlDirective.prototype, \"asyncValidator\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return composeAsyncValidators(this._rawAsyncValidators);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlDirective.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.form; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        FormControlDirective.prototype.viewToModelUpdate = function (newValue) {\n            this.viewModel = newValue;\n            this.update.emit(newValue);\n        };\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        FormControlDirective.prototype._isControlChanged = function (changes) {\n            return changes.hasOwnProperty('form');\n        };\n        FormControlDirective.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },\n        ];\n        /** @nocollapse */\n        FormControlDirective.ctorParameters = function () { return [\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n        ]; };\n        FormControlDirective.propDecorators = {\n            'form': [{ type: _angular_core.Input, args: ['formControl',] },],\n            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n        };\n        return FormControlDirective;\n    }(NgControl));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$11 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ formDirectiveProvider$1 = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return FormGroupDirective; })\n    };\n    /**\n     *  *\n      * *\n      * This directive accepts an existing {@link FormGroup} instance. It will then use this\n      * {@link FormGroup} instance to match any child {@link FormControl}, {@link FormGroup},\n      * and {@link FormArray} instances to child {@link FormControlName}, {@link FormGroupName},\n      * and {@link FormArrayName} directives.\n      * *\n      * **Set value**: You can set the form's initial value when instantiating the\n      * {@link FormGroup}, or you can set it programmatically later using the {@link FormGroup}'s\n      * {@link AbstractControl.setValue} or {@link AbstractControl.patchValue} methods.\n      * *\n      * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n      * to the {@link FormGroup}'s {@link AbstractControl.valueChanges} event.  You can also listen to\n      * its {@link AbstractControl.statusChanges} event to be notified when the validation status is\n      * re-calculated.\n      * *\n      * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has\n      * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n      * submission event.\n      * *\n      * ### Example\n      * *\n      * In this example, we create form controls for first name and last name.\n      * *\n      * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n      * *\n      * **npm package**: `@angular/forms`\n      * *\n      * **NgModule**: {@link ReactiveFormsModule}\n      * *\n      * @stable\n     */\n    var FormGroupDirective = (function (_super) {\n        __extends$11(FormGroupDirective, _super);\n        /**\n         * @param {?} _validators\n         * @param {?} _asyncValidators\n         */\n        function FormGroupDirective(_validators, _asyncValidators) {\n            _super.call(this);\n            this._validators = _validators;\n            this._asyncValidators = _asyncValidators;\n            this._submitted = false;\n            this.directives = [];\n            this.form = null;\n            this.ngSubmit = new EventEmitter();\n        }\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        FormGroupDirective.prototype.ngOnChanges = function (changes) {\n            this._checkFormPresent();\n            if (changes.hasOwnProperty('form')) {\n                this._updateValidators();\n                this._updateDomValue();\n                this._updateRegistrations();\n            }\n        };\n        Object.defineProperty(FormGroupDirective.prototype, \"submitted\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._submitted; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormGroupDirective.prototype, \"formDirective\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormGroupDirective.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.form; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormGroupDirective.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return []; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.addControl = function (dir) {\n            var /** @type {?} */ ctrl = this.form.get(dir.path);\n            setUpControl(ctrl, dir);\n            ctrl.updateValueAndValidity({ emitEvent: false });\n            this.directives.push(dir);\n            return ctrl;\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.removeControl = function (dir) { ListWrapper.remove(this.directives, dir); };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.addFormGroup = function (dir) {\n            var /** @type {?} */ ctrl = this.form.get(dir.path);\n            setUpFormContainer(ctrl, dir);\n            ctrl.updateValueAndValidity({ emitEvent: false });\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.removeFormGroup = function (dir) { };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.addFormArray = function (dir) {\n            var /** @type {?} */ ctrl = this.form.get(dir.path);\n            setUpFormContainer(ctrl, dir);\n            ctrl.updateValueAndValidity({ emitEvent: false });\n        };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.removeFormArray = function (dir) { };\n        /**\n         * @param {?} dir\n         * @return {?}\n         */\n        FormGroupDirective.prototype.getFormArray = function (dir) { return (this.form.get(dir.path)); };\n        /**\n         * @param {?} dir\n         * @param {?} value\n         * @return {?}\n         */\n        FormGroupDirective.prototype.updateModel = function (dir, value) {\n            var /** @type {?} */ ctrl = (this.form.get(dir.path));\n            ctrl.setValue(value);\n        };\n        /**\n         * @param {?} $event\n         * @return {?}\n         */\n        FormGroupDirective.prototype.onSubmit = function ($event) {\n            this._submitted = true;\n            this.ngSubmit.emit($event);\n            return false;\n        };\n        /**\n         * @return {?}\n         */\n        FormGroupDirective.prototype.onReset = function () { this.resetForm(); };\n        /**\n         * @param {?=} value\n         * @return {?}\n         */\n        FormGroupDirective.prototype.resetForm = function (value) {\n            if (value === void 0) { value = undefined; }\n            this.form.reset(value);\n            this._submitted = false;\n        };\n        /**\n         * @return {?}\n         */\n        FormGroupDirective.prototype._updateDomValue = function () {\n            var _this = this;\n            this.directives.forEach(function (dir) {\n                var /** @type {?} */ newCtrl = _this.form.get(dir.path);\n                if (dir._control !== newCtrl) {\n                    cleanUpControl(dir._control, dir);\n                    if (newCtrl)\n                        setUpControl(newCtrl, dir);\n                    dir._control = newCtrl;\n                }\n            });\n            this.form._updateTreeValidity({ emitEvent: false });\n        };\n        /**\n         * @return {?}\n         */\n        FormGroupDirective.prototype._updateRegistrations = function () {\n            var _this = this;\n            this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });\n            if (this._oldForm)\n                this._oldForm._registerOnCollectionChange(function () { });\n            this._oldForm = this.form;\n        };\n        /**\n         * @return {?}\n         */\n        FormGroupDirective.prototype._updateValidators = function () {\n            var /** @type {?} */ sync = composeValidators(this._validators);\n            this.form.validator = Validators.compose([this.form.validator, sync]);\n            var /** @type {?} */ async = composeAsyncValidators(this._asyncValidators);\n            this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);\n        };\n        /**\n         * @return {?}\n         */\n        FormGroupDirective.prototype._checkFormPresent = function () {\n            if (!this.form) {\n                ReactiveErrors.missingFormException();\n            }\n        };\n        FormGroupDirective.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[formGroup]',\n                        providers: [formDirectiveProvider$1],\n                        host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                        exportAs: 'ngForm'\n                    },] },\n        ];\n        /** @nocollapse */\n        FormGroupDirective.ctorParameters = function () { return [\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ]; };\n        FormGroupDirective.propDecorators = {\n            'form': [{ type: _angular_core.Input, args: ['formGroup',] },],\n            'ngSubmit': [{ type: _angular_core.Output },],\n        };\n        return FormGroupDirective;\n    }(ControlContainer));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$12 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ formGroupNameProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return FormGroupName; })\n    };\n    /**\n     *  *\n      * *\n      * This directive can only be used with a parent {@link FormGroupDirective} (selector:\n      * `[formGroup]`).\n      * *\n      * It accepts the string name of the nested {@link FormGroup} you want to link, and\n      * will look for a {@link FormGroup} registered with that name in the parent\n      * {@link FormGroup} instance you passed into {@link FormGroupDirective}.\n      * *\n      * Nested form groups can come in handy when you want to validate a sub-group of a\n      * form separately from the rest or when you'd like to group the values of certain\n      * controls into their own nested object.\n      * *\n      * **Access the group**: You can access the associated {@link FormGroup} using the\n      * {@link AbstractControl.get} method. Ex: `this.form.get('name')`.\n      * *\n      * You can also access individual controls within the group using dot syntax.\n      * Ex: `this.form.get('name.first')`\n      * *\n      * **Get the value**: the `value` property is always synced and available on the\n      * {@link FormGroup}. See a full list of available properties in {@link AbstractControl}.\n      * *\n      * **Set the value**: You can set an initial value for each child control when instantiating\n      * the {@link FormGroup}, or you can set it programmatically later using\n      * {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}.\n      * *\n      * **Listen to value**: If you want to listen to changes in the value of the group, you can\n      * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n      * {@link AbstractControl.statusChanges} to be notified when the validation status is\n      * re-calculated.\n      * *\n      * ### Example\n      * *\n      * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n      * *\n      * * **npm package**: `@angular/forms`\n      * *\n      * * **NgModule**: `ReactiveFormsModule`\n      * *\n     */\n    var FormGroupName = (function (_super) {\n        __extends$12(FormGroupName, _super);\n        /**\n         * @param {?} parent\n         * @param {?} validators\n         * @param {?} asyncValidators\n         */\n        function FormGroupName(parent, validators, asyncValidators) {\n            _super.call(this);\n            this._parent = parent;\n            this._validators = validators;\n            this._asyncValidators = asyncValidators;\n        }\n        /**\n         * @return {?}\n         */\n        FormGroupName.prototype._checkParentType = function () {\n            if (_hasInvalidParent(this._parent)) {\n                ReactiveErrors.groupParentException();\n            }\n        };\n        FormGroupName.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },\n        ];\n        /** @nocollapse */\n        FormGroupName.ctorParameters = function () { return [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ]; };\n        FormGroupName.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['formGroupName',] },],\n        };\n        return FormGroupName;\n    }(AbstractFormGroupDirective));\n    var /** @type {?} */ formArrayNameProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return FormArrayName; })\n    };\n    /**\n     *  *\n      * *\n      * This directive is designed to be used with a parent {@link FormGroupDirective} (selector:\n      * `[formGroup]`).\n      * *\n      * It accepts the string name of the nested {@link FormArray} you want to link, and\n      * will look for a {@link FormArray} registered with that name in the parent\n      * {@link FormGroup} instance you passed into {@link FormGroupDirective}.\n      * *\n      * Nested form arrays can come in handy when you have a group of form controls but\n      * you're not sure how many there will be. Form arrays allow you to create new\n      * form controls dynamically.\n      * *\n      * **Access the array**: You can access the associated {@link FormArray} using the\n      * {@link AbstractControl.get} method on the parent {@link FormGroup}.\n      * Ex: `this.form.get('cities')`.\n      * *\n      * **Get the value**: the `value` property is always synced and available on the\n      * {@link FormArray}. See a full list of available properties in {@link AbstractControl}.\n      * *\n      * **Set the value**: You can set an initial value for each child control when instantiating\n      * the {@link FormArray}, or you can set the value programmatically later using the\n      * {@link FormArray}'s {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}\n      * methods.\n      * *\n      * **Listen to value**: If you want to listen to changes in the value of the array, you can\n      * subscribe to the {@link FormArray}'s {@link AbstractControl.valueChanges} event.  You can also\n      * listen to its {@link AbstractControl.statusChanges} event to be notified when the validation\n      * status is re-calculated.\n      * *\n      * **Add new controls**: You can add new controls to the {@link FormArray} dynamically by\n      * calling its {@link FormArray.push} method.\n      * Ex: `this.form.get('cities').push(new FormControl());`\n      * *\n      * ### Example\n      * *\n      * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n      * *\n      * * **npm package**: `@angular/forms`\n      * *\n      * * **NgModule**: `ReactiveFormsModule`\n      * *\n     */\n    var FormArrayName = (function (_super) {\n        __extends$12(FormArrayName, _super);\n        /**\n         * @param {?} parent\n         * @param {?} validators\n         * @param {?} asyncValidators\n         */\n        function FormArrayName(parent, validators, asyncValidators) {\n            _super.call(this);\n            this._parent = parent;\n            this._validators = validators;\n            this._asyncValidators = asyncValidators;\n        }\n        /**\n         * @return {?}\n         */\n        FormArrayName.prototype.ngOnInit = function () {\n            this._checkParentType();\n            this.formDirective.addFormArray(this);\n        };\n        /**\n         * @return {?}\n         */\n        FormArrayName.prototype.ngOnDestroy = function () {\n            if (this.formDirective) {\n                this.formDirective.removeFormArray(this);\n            }\n        };\n        Object.defineProperty(FormArrayName.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.formDirective.getFormArray(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"formDirective\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return this._parent ? (this._parent.formDirective) : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return controlPath(this.name, this._parent); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"validator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeValidators(this._validators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"asyncValidator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeAsyncValidators(this._asyncValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        FormArrayName.prototype._checkParentType = function () {\n            if (_hasInvalidParent(this._parent)) {\n                ReactiveErrors.arrayParentException();\n            }\n        };\n        FormArrayName.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },\n        ];\n        /** @nocollapse */\n        FormArrayName.ctorParameters = function () { return [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ]; };\n        FormArrayName.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['formArrayName',] },],\n        };\n        return FormArrayName;\n    }(ControlContainer));\n    /**\n     * @param {?} parent\n     * @return {?}\n     */\n    function _hasInvalidParent(parent) {\n        return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n            !(parent instanceof FormArrayName);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$10 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ controlNameBinding = {\n        provide: NgControl,\n        useExisting: _angular_core.forwardRef(function () { return FormControlName; })\n    };\n    /**\n     *  element by name.\n      * *\n      * In other words, this directive ensures that any values written to the {@link FormControl}\n      * instance programmatically will be written to the DOM element (model -> view). Conversely,\n      * any values written to the DOM element through user input will be reflected in the\n      * {@link FormControl} instance (view -> model).\n      * *\n      * *\n      * This directive is designed to be used with a parent {@link FormGroupDirective} (selector:\n      * `[formGroup]`).\n      * *\n      * It accepts the string name of the {@link FormControl} instance you want to\n      * link, and will look for a {@link FormControl} registered with that name in the\n      * closest {@link FormGroup} or {@link FormArray} above it.\n      * *\n      * **Access the control**: You can access the {@link FormControl} associated with\n      * this directive by using the {@link AbstractControl.get} method.\n      * Ex: `this.form.get('first');`\n      * *\n      * **Get value**: the `value` property is always synced and available on the {@link FormControl}.\n      * See a full list of available properties in {@link AbstractControl}.\n      * *\n      * **Set value**: You can set an initial value for the control when instantiating the\n      * {@link FormControl}, or you can set it programmatically later using\n      * {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}.\n      * *\n      * **Listen to value**: If you want to listen to changes in the value of the control, you can\n      * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n      * {@link AbstractControl.statusChanges} to be notified when the validation status is\n      * re-calculated.\n      * *\n      * ### Example\n      * *\n      * In this example, we create form controls for first name and last name.\n      * *\n      * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n      * *\n      * To see `formControlName` examples with different form control types, see:\n      * *\n      * * Radio buttons: {@link RadioControlValueAccessor}\n      * * Selects: {@link SelectControlValueAccessor}\n      * *\n      * **npm package**: `@angular/forms`\n      * *\n      * **NgModule**: {@link ReactiveFormsModule}\n      * *\n      * @stable\n     */\n    var FormControlName = (function (_super) {\n        __extends$10(FormControlName, _super);\n        /**\n         * @param {?} parent\n         * @param {?} validators\n         * @param {?} asyncValidators\n         * @param {?} valueAccessors\n         */\n        function FormControlName(parent, validators, asyncValidators, valueAccessors) {\n            _super.call(this);\n            this._added = false;\n            this.update = new EventEmitter();\n            this._parent = parent;\n            this._rawValidators = validators || [];\n            this._rawAsyncValidators = asyncValidators || [];\n            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n        }\n        Object.defineProperty(FormControlName.prototype, \"isDisabled\", {\n            /**\n             * @param {?} isDisabled\n             * @return {?}\n             */\n            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        FormControlName.prototype.ngOnChanges = function (changes) {\n            if (!this._added)\n                this._setUpControl();\n            if (isPropertyUpdated(changes, this.viewModel)) {\n                this.viewModel = this.model;\n                this.formDirective.updateModel(this, this.model);\n            }\n        };\n        /**\n         * @return {?}\n         */\n        FormControlName.prototype.ngOnDestroy = function () {\n            if (this.formDirective) {\n                this.formDirective.removeControl(this);\n            }\n        };\n        /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        FormControlName.prototype.viewToModelUpdate = function (newValue) {\n            this.viewModel = newValue;\n            this.update.emit(newValue);\n        };\n        Object.defineProperty(FormControlName.prototype, \"path\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return controlPath(this.name, this._parent); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"formDirective\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._parent ? this._parent.formDirective : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"validator\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return composeValidators(this._rawValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"asyncValidator\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return composeAsyncValidators(this._rawAsyncValidators);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"control\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._control; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        FormControlName.prototype._checkParentType = function () {\n            if (!(this._parent instanceof FormGroupName) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                ReactiveErrors.ngModelGroupException();\n            }\n            else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n                !(this._parent instanceof FormArrayName)) {\n                ReactiveErrors.controlParentException();\n            }\n        };\n        /**\n         * @return {?}\n         */\n        FormControlName.prototype._setUpControl = function () {\n            this._checkParentType();\n            this._control = this.formDirective.addControl(this);\n            if (this.control.disabled && this.valueAccessor.setDisabledState) {\n                this.valueAccessor.setDisabledState(true);\n            }\n            this._added = true;\n        };\n        FormControlName.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },\n        ];\n        /** @nocollapse */\n        FormControlName.ctorParameters = function () { return [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n        ]; };\n        FormControlName.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['formControlName',] },],\n            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n        };\n        return FormControlName;\n    }(NgControl));\n\n    var __extends$13 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ REQUIRED_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return RequiredValidator; }),\n        multi: true\n    };\n    var /** @type {?} */ CHECKBOX_REQUIRED_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return CheckboxRequiredValidator; }),\n        multi: true\n    };\n    /**\n     *  A Directive that adds the `required` validator to any controls marked with the\n      * `required` attribute, via the {@link NG_VALIDATORS} binding.\n      * *\n      * ### Example\n      * *\n      * ```\n      * <input name=\"fullName\" ngModel required>\n      * ```\n      * *\n     */\n    var RequiredValidator = (function () {\n        function RequiredValidator() {\n        }\n        Object.defineProperty(RequiredValidator.prototype, \"required\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._required; },\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            set: function (value) {\n                this._required = value != null && value !== false && \"\" + value !== 'false';\n                if (this._onChange)\n                    this._onChange();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} c\n         * @return {?}\n         */\n        RequiredValidator.prototype.validate = function (c) {\n            return this.required ? Validators.required(c) : null;\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        RequiredValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        RequiredValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n                        providers: [REQUIRED_VALIDATOR],\n                        host: { '[attr.required]': 'required ? \"\" : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        RequiredValidator.ctorParameters = function () { return []; };\n        RequiredValidator.propDecorators = {\n            'required': [{ type: _angular_core.Input },],\n        };\n        return RequiredValidator;\n    }());\n    /**\n     *  A Directive that adds the `required` validator to checkbox controls marked with the\n      * `required` attribute, via the {@link NG_VALIDATORS} binding.\n      * *\n      * ### Example\n      * *\n      * ```\n      * <input type=\"checkbox\" name=\"active\" ngModel required>\n      * ```\n      * *\n     */\n    var CheckboxRequiredValidator = (function (_super) {\n        __extends$13(CheckboxRequiredValidator, _super);\n        function CheckboxRequiredValidator() {\n            _super.apply(this, arguments);\n        }\n        /**\n         * @param {?} c\n         * @return {?}\n         */\n        CheckboxRequiredValidator.prototype.validate = function (c) {\n            return this.required ? Validators.requiredTrue(c) : null;\n        };\n        CheckboxRequiredValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n                        providers: [CHECKBOX_REQUIRED_VALIDATOR],\n                        host: { '[attr.required]': 'required ? \"\" : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        CheckboxRequiredValidator.ctorParameters = function () { return []; };\n        return CheckboxRequiredValidator;\n    }(RequiredValidator));\n    /**\n     * Provider which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.\n     *\n     * ## Example:\n     *\n     * {@example common/forms/ts/validators/validators.ts region='min'}\n     */\n    var /** @type {?} */ MIN_LENGTH_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return MinLengthValidator; }),\n        multi: true\n    };\n    /**\n     *  A directive which installs the {@link MinLengthValidator} for any `formControlName`,\n      * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n      * *\n     */\n    var MinLengthValidator = (function () {\n        function MinLengthValidator() {\n        }\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        MinLengthValidator.prototype.ngOnChanges = function (changes) {\n            if ('minlength' in changes) {\n                this._createValidator();\n                if (this._onChange)\n                    this._onChange();\n            }\n        };\n        /**\n         * @param {?} c\n         * @return {?}\n         */\n        MinLengthValidator.prototype.validate = function (c) {\n            return this.minlength == null ? null : this._validator(c);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        MinLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        /**\n         * @return {?}\n         */\n        MinLengthValidator.prototype._createValidator = function () {\n            this._validator = Validators.minLength(parseInt(this.minlength, 10));\n        };\n        MinLengthValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n                        providers: [MIN_LENGTH_VALIDATOR],\n                        host: { '[attr.minlength]': 'minlength ? minlength : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        MinLengthValidator.ctorParameters = function () { return []; };\n        MinLengthValidator.propDecorators = {\n            'minlength': [{ type: _angular_core.Input },],\n        };\n        return MinLengthValidator;\n    }());\n    /**\n     * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.\n     *\n     * ## Example:\n     *\n     * {@example common/forms/ts/validators/validators.ts region='max'}\n     */\n    var /** @type {?} */ MAX_LENGTH_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return MaxLengthValidator; }),\n        multi: true\n    };\n    /**\n     *  A directive which installs the {@link MaxLengthValidator} for any `formControlName,\n      * `formControl`,\n      * or control with `ngModel` that also has a `maxlength` attribute.\n      * *\n     */\n    var MaxLengthValidator = (function () {\n        function MaxLengthValidator() {\n        }\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        MaxLengthValidator.prototype.ngOnChanges = function (changes) {\n            if ('maxlength' in changes) {\n                this._createValidator();\n                if (this._onChange)\n                    this._onChange();\n            }\n        };\n        /**\n         * @param {?} c\n         * @return {?}\n         */\n        MaxLengthValidator.prototype.validate = function (c) {\n            return this.maxlength != null ? this._validator(c) : null;\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        /**\n         * @return {?}\n         */\n        MaxLengthValidator.prototype._createValidator = function () {\n            this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n        };\n        MaxLengthValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n                        providers: [MAX_LENGTH_VALIDATOR],\n                        host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        MaxLengthValidator.ctorParameters = function () { return []; };\n        MaxLengthValidator.propDecorators = {\n            'maxlength': [{ type: _angular_core.Input },],\n        };\n        return MaxLengthValidator;\n    }());\n    var /** @type {?} */ PATTERN_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return PatternValidator; }),\n        multi: true\n    };\n    /**\n     *  A Directive that adds the `pattern` validator to any controls marked with the\n      * `pattern` attribute, via the {@link NG_VALIDATORS} binding. Uses attribute value\n      * as the regex to validate Control value against.  Follows pattern attribute\n      * semantics; i.e. regex must match entire Control value.\n      * *\n      * ### Example\n      * *\n      * ```\n      * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n      * ```\n     */\n    var PatternValidator = (function () {\n        function PatternValidator() {\n        }\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        PatternValidator.prototype.ngOnChanges = function (changes) {\n            if ('pattern' in changes) {\n                this._createValidator();\n                if (this._onChange)\n                    this._onChange();\n            }\n        };\n        /**\n         * @param {?} c\n         * @return {?}\n         */\n        PatternValidator.prototype.validate = function (c) { return this._validator(c); };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        PatternValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        /**\n         * @return {?}\n         */\n        PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern); };\n        PatternValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n                        providers: [PATTERN_VALIDATOR],\n                        host: { '[attr.pattern]': 'pattern ? pattern : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        PatternValidator.ctorParameters = function () { return []; };\n        PatternValidator.propDecorators = {\n            'pattern': [{ type: _angular_core.Input },],\n        };\n        return PatternValidator;\n    }());\n\n    /**\n     *  *\n      * It is essentially syntactic sugar that shortens the `new FormGroup()`,\n      * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\n      * forms.\n      * *\n      * *\n      * To use, inject `FormBuilder` into your component class. You can then call its methods\n      * directly.\n      * *\n      * {@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\n      * *\n      * * **npm package**: `@angular/forms`\n      * *\n      * * **NgModule**: {@link ReactiveFormsModule}\n      * *\n     */\n    var FormBuilder = (function () {\n        function FormBuilder() {\n        }\n        /**\n         *  Construct a new {@link FormGroup} with the given map of configuration.\n          * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n          * *\n          * See the {@link FormGroup} constructor for more details.\n         * @param {?} controlsConfig\n         * @param {?=} extra\n         * @return {?}\n         */\n        FormBuilder.prototype.group = function (controlsConfig, extra) {\n            if (extra === void 0) { extra = null; }\n            var /** @type {?} */ controls = this._reduceControls(controlsConfig);\n            var /** @type {?} */ validator = isPresent(extra) ? extra['validator'] : null;\n            var /** @type {?} */ asyncValidator = isPresent(extra) ? extra['asyncValidator'] : null;\n            return new FormGroup(controls, validator, asyncValidator);\n        };\n        /**\n         *  Construct a new {@link FormControl} with the given `formState`,`validator`, and\n          * `asyncValidator`.\n          * *\n          * `formState` can either be a standalone value for the form control or an object\n          * that contains both a value and a disabled status.\n          * *\n         * @param {?} formState\n         * @param {?=} validator\n         * @param {?=} asyncValidator\n         * @return {?}\n         */\n        FormBuilder.prototype.control = function (formState, validator, asyncValidator) {\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            return new FormControl(formState, validator, asyncValidator);\n        };\n        /**\n         *  Construct a {@link FormArray} from the given `controlsConfig` array of\n          * configuration, with the given optional `validator` and `asyncValidator`.\n         * @param {?} controlsConfig\n         * @param {?=} validator\n         * @param {?=} asyncValidator\n         * @return {?}\n         */\n        FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {\n            var _this = this;\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            var /** @type {?} */ controls = controlsConfig.map(function (c) { return _this._createControl(c); });\n            return new FormArray(controls, validator, asyncValidator);\n        };\n        /**\n         * @param {?} controlsConfig\n         * @return {?}\n         */\n        FormBuilder.prototype._reduceControls = function (controlsConfig) {\n            var _this = this;\n            var /** @type {?} */ controls = {};\n            Object.keys(controlsConfig).forEach(function (controlName) {\n                controls[controlName] = _this._createControl(controlsConfig[controlName]);\n            });\n            return controls;\n        };\n        /**\n         * @param {?} controlConfig\n         * @return {?}\n         */\n        FormBuilder.prototype._createControl = function (controlConfig) {\n            if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n                controlConfig instanceof FormArray) {\n                return controlConfig;\n            }\n            else if (Array.isArray(controlConfig)) {\n                var /** @type {?} */ value = controlConfig[0];\n                var /** @type {?} */ validator = controlConfig.length > 1 ? controlConfig[1] : null;\n                var /** @type {?} */ asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n                return this.control(value, validator, asyncValidator);\n            }\n            else {\n                return this.control(controlConfig);\n            }\n        };\n        FormBuilder.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        FormBuilder.ctorParameters = function () { return []; };\n        return FormBuilder;\n    }());\n\n    /**\n     * @stable\n     */\n    var /** @type {?} */ VERSION = new _angular_core.Version('2.4.2');\n\n    var /** @type {?} */ SHARED_FORM_DIRECTIVES = [\n        NgSelectOption,\n        NgSelectMultipleOption,\n        DefaultValueAccessor,\n        NumberValueAccessor,\n        RangeValueAccessor,\n        CheckboxControlValueAccessor,\n        SelectControlValueAccessor,\n        SelectMultipleControlValueAccessor,\n        RadioControlValueAccessor,\n        NgControlStatus,\n        NgControlStatusGroup,\n        RequiredValidator,\n        MinLengthValidator,\n        MaxLengthValidator,\n        PatternValidator,\n        CheckboxRequiredValidator,\n    ];\n    var /** @type {?} */ TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\n    var /** @type {?} */ REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n    /**\n     *  Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n     */\n    var InternalFormsSharedModule = (function () {\n        function InternalFormsSharedModule() {\n        }\n        InternalFormsSharedModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        declarations: SHARED_FORM_DIRECTIVES,\n                        exports: SHARED_FORM_DIRECTIVES,\n                    },] },\n        ];\n        /** @nocollapse */\n        InternalFormsSharedModule.ctorParameters = function () { return []; };\n        return InternalFormsSharedModule;\n    }());\n\n    /**\n     *  The ng module for forms.\n     */\n    var FormsModule = (function () {\n        function FormsModule() {\n        }\n        FormsModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n                        providers: [RadioControlRegistry],\n                        exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n                    },] },\n        ];\n        /** @nocollapse */\n        FormsModule.ctorParameters = function () { return []; };\n        return FormsModule;\n    }());\n    /**\n     *  The ng module for reactive forms.\n     */\n    var ReactiveFormsModule = (function () {\n        function ReactiveFormsModule() {\n        }\n        ReactiveFormsModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n                        providers: [FormBuilder, RadioControlRegistry],\n                        exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n                    },] },\n        ];\n        /** @nocollapse */\n        ReactiveFormsModule.ctorParameters = function () { return []; };\n        return ReactiveFormsModule;\n    }());\n\n    exports.AbstractControlDirective = AbstractControlDirective;\n    exports.AbstractFormGroupDirective = AbstractFormGroupDirective;\n    exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;\n    exports.ControlContainer = ControlContainer;\n    exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR;\n    exports.DefaultValueAccessor = DefaultValueAccessor;\n    exports.NgControl = NgControl;\n    exports.NgControlStatus = NgControlStatus;\n    exports.NgControlStatusGroup = NgControlStatusGroup;\n    exports.NgForm = NgForm;\n    exports.NgModel = NgModel;\n    exports.NgModelGroup = NgModelGroup;\n    exports.RadioControlValueAccessor = RadioControlValueAccessor;\n    exports.FormControlDirective = FormControlDirective;\n    exports.FormControlName = FormControlName;\n    exports.FormGroupDirective = FormGroupDirective;\n    exports.FormArrayName = FormArrayName;\n    exports.FormGroupName = FormGroupName;\n    exports.NgSelectOption = NgSelectOption;\n    exports.SelectControlValueAccessor = SelectControlValueAccessor;\n    exports.SelectMultipleControlValueAccessor = SelectMultipleControlValueAccessor;\n    exports.CheckboxRequiredValidator = CheckboxRequiredValidator;\n    exports.MaxLengthValidator = MaxLengthValidator;\n    exports.MinLengthValidator = MinLengthValidator;\n    exports.PatternValidator = PatternValidator;\n    exports.RequiredValidator = RequiredValidator;\n    exports.FormBuilder = FormBuilder;\n    exports.AbstractControl = AbstractControl;\n    exports.FormArray = FormArray;\n    exports.FormControl = FormControl;\n    exports.FormGroup = FormGroup;\n    exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS;\n    exports.NG_VALIDATORS = NG_VALIDATORS;\n    exports.Validators = Validators;\n    exports.VERSION = VERSION;\n    exports.FormsModule = FormsModule;\n    exports.ReactiveFormsModule = ReactiveFormsModule;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/@angular/forms/bundles/forms.umd.js\n// module id = 26\n// module chunks = 0","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/http'), require('rxjs/Observable'), require('rxjs/add/operator/delay')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/http', 'rxjs/Observable', 'rxjs/add/operator/delay'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.inMemoryWebApi = global.ng.inMemoryWebApi || {}),global.ng.core,global.ng.http,global.Rx,global.Rx));\n}(this, (function (exports,_angular_core,_angular_http,rxjs_Observable,rxjs_add_operator_delay) { 'use strict';\n\nvar STATUS = {\r\n    CONTINUE: 100,\r\n    SWITCHING_PROTOCOLS: 101,\r\n    OK: 200,\r\n    CREATED: 201,\r\n    ACCEPTED: 202,\r\n    NON_AUTHORITATIVE_INFORMATION: 203,\r\n    NO_CONTENT: 204,\r\n    RESET_CONTENT: 205,\r\n    PARTIAL_CONTENT: 206,\r\n    MULTIPLE_CHOICES: 300,\r\n    MOVED_PERMANTENTLY: 301,\r\n    FOUND: 302,\r\n    SEE_OTHER: 303,\r\n    NOT_MODIFIED: 304,\r\n    USE_PROXY: 305,\r\n    TEMPORARY_REDIRECT: 307,\r\n    BAD_REQUEST: 400,\r\n    UNAUTHORIZED: 401,\r\n    PAYMENT_REQUIRED: 402,\r\n    FORBIDDEN: 403,\r\n    NOT_FOUND: 404,\r\n    METHOD_NOT_ALLOWED: 405,\r\n    NOT_ACCEPTABLE: 406,\r\n    PROXY_AUTHENTICATION_REQUIRED: 407,\r\n    REQUEST_TIMEOUT: 408,\r\n    CONFLICT: 409,\r\n    GONE: 410,\r\n    LENGTH_REQUIRED: 411,\r\n    PRECONDITION_FAILED: 412,\r\n    PAYLOAD_TO_LARGE: 413,\r\n    URI_TOO_LONG: 414,\r\n    UNSUPPORTED_MEDIA_TYPE: 415,\r\n    RANGE_NOT_SATISFIABLE: 416,\r\n    EXPECTATION_FAILED: 417,\r\n    IM_A_TEAPOT: 418,\r\n    UPGRADE_REQUIRED: 426,\r\n    INTERNAL_SERVER_ERROR: 500,\r\n    NOT_IMPLEMENTED: 501,\r\n    BAD_GATEWAY: 502,\r\n    SERVICE_UNAVAILABLE: 503,\r\n    GATEWAY_TIMEOUT: 504,\r\n    HTTP_VERSION_NOT_SUPPORTED: 505,\r\n    PROCESSING: 102,\r\n    MULTI_STATUS: 207,\r\n    IM_USED: 226,\r\n    PERMANENT_REDIRECT: 308,\r\n    UNPROCESSABLE_ENTRY: 422,\r\n    LOCKED: 423,\r\n    FAILED_DEPENDENCY: 424,\r\n    PRECONDITION_REQUIRED: 428,\r\n    TOO_MANY_REQUESTS: 429,\r\n    REQUEST_HEADER_FIELDS_TOO_LARGE: 431,\r\n    UNAVAILABLE_FOR_LEGAL_REASONS: 451,\r\n    VARIANT_ALSO_NEGOTIATES: 506,\r\n    INSUFFICIENT_STORAGE: 507,\r\n    NETWORK_AUTHENTICATION_REQUIRED: 511\r\n};\r\n/*tslint:disable:quotemark max-line-length one-line */\r\nvar STATUS_CODE_INFO = {\r\n    '100': {\r\n        'code': 100,\r\n        'text': 'Continue',\r\n        'description': '\\\"The initial part of a request has been received and has not yet been rejected by the server.\\\"',\r\n        'spec_title': 'RFC7231#6.2.1',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.2.1'\r\n    },\r\n    '101': {\r\n        'code': 101,\r\n        'text': 'Switching Protocols',\r\n        'description': '\\\"The server understands and is willing to comply with the client\\'s request, via the Upgrade header field, for a change in the application protocol being used on this connection.\\\"',\r\n        'spec_title': 'RFC7231#6.2.2',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.2.2'\r\n    },\r\n    '200': {\r\n        'code': 200,\r\n        'text': 'OK',\r\n        'description': '\\\"The request has succeeded.\\\"',\r\n        'spec_title': 'RFC7231#6.3.1',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.3.1'\r\n    },\r\n    '201': {\r\n        'code': 201,\r\n        'text': 'Created',\r\n        'description': '\\\"The request has been fulfilled and has resulted in one or more new resources being created.\\\"',\r\n        'spec_title': 'RFC7231#6.3.2',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.3.2'\r\n    },\r\n    '202': {\r\n        'code': 202,\r\n        'text': 'Accepted',\r\n        'description': '\\\"The request has been accepted for processing, but the processing has not been completed.\\\"',\r\n        'spec_title': 'RFC7231#6.3.3',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.3.3'\r\n    },\r\n    '203': {\r\n        'code': 203,\r\n        'text': 'Non-Authoritative Information',\r\n        'description': '\\\"The request was successful but the enclosed payload has been modified from that of the origin server\\'s 200 (OK) response by a transforming proxy.\\\"',\r\n        'spec_title': 'RFC7231#6.3.4',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.3.4'\r\n    },\r\n    '204': {\r\n        'code': 204,\r\n        'text': 'No Content',\r\n        'description': '\\\"The server has successfully fulfilled the request and that there is no additional content to send in the response payload body.\\\"',\r\n        'spec_title': 'RFC7231#6.3.5',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.3.5'\r\n    },\r\n    '205': {\r\n        'code': 205,\r\n        'text': 'Reset Content',\r\n        'description': '\\\"The server has fulfilled the request and desires that the user agent reset the \\\"document view\\\", which caused the request to be sent, to its original state as received from the origin server.\\\"',\r\n        'spec_title': 'RFC7231#6.3.6',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.3.6'\r\n    },\r\n    '206': {\r\n        'code': 206,\r\n        'text': 'Partial Content',\r\n        'description': '\\\"The server is successfully fulfilling a range request for the target resource by transferring one or more parts of the selected representation that correspond to the satisfiable ranges found in the requests\\'s Range header field.\\\"',\r\n        'spec_title': 'RFC7233#4.1',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7233#section-4.1'\r\n    },\r\n    '300': {\r\n        'code': 300,\r\n        'text': 'Multiple Choices',\r\n        'description': '\\\"The target resource has more than one representation, each with its own more specific identifier, and information about the alternatives is being provided so that the user (or user agent) can select a preferred representation by redirecting its request to one or more of those identifiers.\\\"',\r\n        'spec_title': 'RFC7231#6.4.1',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.4.1'\r\n    },\r\n    '301': {\r\n        'code': 301,\r\n        'text': 'Moved Permanently',\r\n        'description': '\\\"The target resource has been assigned a new permanent URI and any future references to this resource ought to use one of the enclosed URIs.\\\"',\r\n        'spec_title': 'RFC7231#6.4.2',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.4.2'\r\n    },\r\n    '302': {\r\n        'code': 302,\r\n        'text': 'Found',\r\n        'description': '\\\"The target resource resides temporarily under a different URI.\\\"',\r\n        'spec_title': 'RFC7231#6.4.3',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.4.3'\r\n    },\r\n    '303': {\r\n        'code': 303,\r\n        'text': 'See Other',\r\n        'description': '\\\"The server is redirecting the user agent to a different resource, as indicated by a URI in the Location header field, that is intended to provide an indirect response to the original request.\\\"',\r\n        'spec_title': 'RFC7231#6.4.4',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.4.4'\r\n    },\r\n    '304': {\r\n        'code': 304,\r\n        'text': 'Not Modified',\r\n        'description': '\\\"A conditional GET request has been received and would have resulted in a 200 (OK) response if it were not for the fact that the condition has evaluated to false.\\\"',\r\n        'spec_title': 'RFC7232#4.1',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7232#section-4.1'\r\n    },\r\n    '305': {\r\n        'code': 305,\r\n        'text': 'Use Proxy',\r\n        'description': '*deprecated*',\r\n        'spec_title': 'RFC7231#6.4.5',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.4.5'\r\n    },\r\n    '307': {\r\n        'code': 307,\r\n        'text': 'Temporary Redirect',\r\n        'description': '\\\"The target resource resides temporarily under a different URI and the user agent MUST NOT change the request method if it performs an automatic redirection to that URI.\\\"',\r\n        'spec_title': 'RFC7231#6.4.7',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.4.7'\r\n    },\r\n    '400': {\r\n        'code': 400,\r\n        'text': 'Bad Request',\r\n        'description': '\\\"The server cannot or will not process the request because the received syntax is invalid, nonsensical, or exceeds some limitation on what the server is willing to process.\\\"',\r\n        'spec_title': 'RFC7231#6.5.1',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.1'\r\n    },\r\n    '401': {\r\n        'code': 401,\r\n        'text': 'Unauthorized',\r\n        'description': '\\\"The request has not been applied because it lacks valid authentication credentials for the target resource.\\\"',\r\n        'spec_title': 'RFC7235#6.3.1',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7235#section-3.1'\r\n    },\r\n    '402': {\r\n        'code': 402,\r\n        'text': 'Payment Required',\r\n        'description': '*reserved*',\r\n        'spec_title': 'RFC7231#6.5.2',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.2'\r\n    },\r\n    '403': {\r\n        'code': 403,\r\n        'text': 'Forbidden',\r\n        'description': '\\\"The server understood the request but refuses to authorize it.\\\"',\r\n        'spec_title': 'RFC7231#6.5.3',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.3'\r\n    },\r\n    '404': {\r\n        'code': 404,\r\n        'text': 'Not Found',\r\n        'description': '\\\"The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\\\"',\r\n        'spec_title': 'RFC7231#6.5.4',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.4'\r\n    },\r\n    '405': {\r\n        'code': 405,\r\n        'text': 'Method Not Allowed',\r\n        'description': '\\\"The method specified in the request-line is known by the origin server but not supported by the target resource.\\\"',\r\n        'spec_title': 'RFC7231#6.5.5',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.5'\r\n    },\r\n    '406': {\r\n        'code': 406,\r\n        'text': 'Not Acceptable',\r\n        'description': '\\\"The target resource does not have a current representation that would be acceptable to the user agent, according to the proactive negotiation header fields received in the request, and the server is unwilling to supply a default representation.\\\"',\r\n        'spec_title': 'RFC7231#6.5.6',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.6'\r\n    },\r\n    '407': {\r\n        'code': 407,\r\n        'text': 'Proxy Authentication Required',\r\n        'description': '\\\"The client needs to authenticate itself in order to use a proxy.\\\"',\r\n        'spec_title': 'RFC7231#6.3.2',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.3.2'\r\n    },\r\n    '408': {\r\n        'code': 408,\r\n        'text': 'Request Timeout',\r\n        'description': '\\\"The server did not receive a complete request message within the time that it was prepared to wait.\\\"',\r\n        'spec_title': 'RFC7231#6.5.7',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.7'\r\n    },\r\n    '409': {\r\n        'code': 409,\r\n        'text': 'Conflict',\r\n        'description': '\\\"The request could not be completed due to a conflict with the current state of the resource.\\\"',\r\n        'spec_title': 'RFC7231#6.5.8',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.8'\r\n    },\r\n    '410': {\r\n        'code': 410,\r\n        'text': 'Gone',\r\n        'description': '\\\"Access to the target resource is no longer available at the origin server and that this condition is likely to be permanent.\\\"',\r\n        'spec_title': 'RFC7231#6.5.9',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.9'\r\n    },\r\n    '411': {\r\n        'code': 411,\r\n        'text': 'Length Required',\r\n        'description': '\\\"The server refuses to accept the request without a defined Content-Length.\\\"',\r\n        'spec_title': 'RFC7231#6.5.10',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.10'\r\n    },\r\n    '412': {\r\n        'code': 412,\r\n        'text': 'Precondition Failed',\r\n        'description': '\\\"One or more preconditions given in the request header fields evaluated to false when tested on the server.\\\"',\r\n        'spec_title': 'RFC7232#4.2',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7232#section-4.2'\r\n    },\r\n    '413': {\r\n        'code': 413,\r\n        'text': 'Payload Too Large',\r\n        'description': '\\\"The server is refusing to process a request because the request payload is larger than the server is willing or able to process.\\\"',\r\n        'spec_title': 'RFC7231#6.5.11',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.11'\r\n    },\r\n    '414': {\r\n        'code': 414,\r\n        'text': 'URI Too Long',\r\n        'description': '\\\"The server is refusing to service the request because the request-target is longer than the server is willing to interpret.\\\"',\r\n        'spec_title': 'RFC7231#6.5.12',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.12'\r\n    },\r\n    '415': {\r\n        'code': 415,\r\n        'text': 'Unsupported Media Type',\r\n        'description': '\\\"The origin server is refusing to service the request because the payload is in a format not supported by the target resource for this method.\\\"',\r\n        'spec_title': 'RFC7231#6.5.13',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.13'\r\n    },\r\n    '416': {\r\n        'code': 416,\r\n        'text': 'Range Not Satisfiable',\r\n        'description': '\\\"None of the ranges in the request\\'s Range header field overlap the current extent of the selected resource or that the set of ranges requested has been rejected due to invalid ranges or an excessive request of small or overlapping ranges.\\\"',\r\n        'spec_title': 'RFC7233#4.4',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7233#section-4.4'\r\n    },\r\n    '417': {\r\n        'code': 417,\r\n        'text': 'Expectation Failed',\r\n        'description': '\\\"The expectation given in the request\\'s Expect header field could not be met by at least one of the inbound servers.\\\"',\r\n        'spec_title': 'RFC7231#6.5.14',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.14'\r\n    },\r\n    '418': {\r\n        'code': 418,\r\n        'text': 'I\\'m a teapot',\r\n        'description': '\\\"1988 April Fools Joke. Returned by tea pots requested to brew coffee.\\\"',\r\n        'spec_title': 'RFC 2324',\r\n        'spec_href': 'https://tools.ietf.org/html/rfc2324'\r\n    },\r\n    '426': {\r\n        'code': 426,\r\n        'text': 'Upgrade Required',\r\n        'description': '\\\"The server refuses to perform the request using the current protocol but might be willing to do so after the client upgrades to a different protocol.\\\"',\r\n        'spec_title': 'RFC7231#6.5.15',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.5.15'\r\n    },\r\n    '500': {\r\n        'code': 500,\r\n        'text': 'Internal Server Error',\r\n        'description': '\\\"The server encountered an unexpected condition that prevented it from fulfilling the request.\\\"',\r\n        'spec_title': 'RFC7231#6.6.1',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.6.1'\r\n    },\r\n    '501': {\r\n        'code': 501,\r\n        'text': 'Not Implemented',\r\n        'description': '\\\"The server does not support the functionality required to fulfill the request.\\\"',\r\n        'spec_title': 'RFC7231#6.6.2',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.6.2'\r\n    },\r\n    '502': {\r\n        'code': 502,\r\n        'text': 'Bad Gateway',\r\n        'description': '\\\"The server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request.\\\"',\r\n        'spec_title': 'RFC7231#6.6.3',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.6.3'\r\n    },\r\n    '503': {\r\n        'code': 503,\r\n        'text': 'Service Unavailable',\r\n        'description': '\\\"The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.\\\"',\r\n        'spec_title': 'RFC7231#6.6.4',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.6.4'\r\n    },\r\n    '504': {\r\n        'code': 504,\r\n        'text': 'Gateway Time-out',\r\n        'description': '\\\"The server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request.\\\"',\r\n        'spec_title': 'RFC7231#6.6.5',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.6.5'\r\n    },\r\n    '505': {\r\n        'code': 505,\r\n        'text': 'HTTP Version Not Supported',\r\n        'description': '\\\"The server does not support, or refuses to support, the protocol version that was used in the request message.\\\"',\r\n        'spec_title': 'RFC7231#6.6.6',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7231#section-6.6.6'\r\n    },\r\n    '102': {\r\n        'code': 102,\r\n        'text': 'Processing',\r\n        'description': '\\\"An interim response to inform the client that the server has accepted the complete request, but has not yet completed it.\\\"',\r\n        'spec_title': 'RFC5218#10.1',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc2518#section-10.1'\r\n    },\r\n    '207': {\r\n        'code': 207,\r\n        'text': 'Multi-Status',\r\n        'description': '\\\"Status for multiple independent operations.\\\"',\r\n        'spec_title': 'RFC5218#10.2',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc2518#section-10.2'\r\n    },\r\n    '226': {\r\n        'code': 226,\r\n        'text': 'IM Used',\r\n        'description': '\\\"The server has fulfilled a GET request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance.\\\"',\r\n        'spec_title': 'RFC3229#10.4.1',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc3229#section-10.4.1'\r\n    },\r\n    '308': {\r\n        'code': 308,\r\n        'text': 'Permanent Redirect',\r\n        'description': '\\\"The target resource has been assigned a new permanent URI and any future references to this resource SHOULD use one of the returned URIs. [...] This status code is similar to 301 Moved Permanently (Section 7.3.2 of rfc7231), except that it does not allow rewriting the request method from POST to GET.\\\"',\r\n        'spec_title': 'RFC7238',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc7238'\r\n    },\r\n    '422': {\r\n        'code': 422,\r\n        'text': 'Unprocessable Entity',\r\n        'description': '\\\"The server understands the content type of the request entity (hence a 415(Unsupported Media Type) status code is inappropriate), and the syntax of the request entity is correct (thus a 400 (Bad Request) status code is inappropriate) but was unable to process the contained instructions.\\\"',\r\n        'spec_title': 'RFC5218#10.3',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc2518#section-10.3'\r\n    },\r\n    '423': {\r\n        'code': 423,\r\n        'text': 'Locked',\r\n        'description': '\\\"The source or destination resource of a method is locked.\\\"',\r\n        'spec_title': 'RFC5218#10.4',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc2518#section-10.4'\r\n    },\r\n    '424': {\r\n        'code': 424,\r\n        'text': 'Failed Dependency',\r\n        'description': '\\\"The method could not be performed on the resource because the requested action depended on another action and that action failed.\\\"',\r\n        'spec_title': 'RFC5218#10.5',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc2518#section-10.5'\r\n    },\r\n    '428': {\r\n        'code': 428,\r\n        'text': 'Precondition Required',\r\n        'description': '\\\"The origin server requires the request to be conditional.\\\"',\r\n        'spec_title': 'RFC6585#3',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc6585#section-3'\r\n    },\r\n    '429': {\r\n        'code': 429,\r\n        'text': 'Too Many Requests',\r\n        'description': '\\\"The user has sent too many requests in a given amount of time (\\\"rate limiting\\\").\\\"',\r\n        'spec_title': 'RFC6585#4',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc6585#section-4'\r\n    },\r\n    '431': {\r\n        'code': 431,\r\n        'text': 'Request Header Fields Too Large',\r\n        'description': '\\\"The server is unwilling to process the request because its header fields are too large.\\\"',\r\n        'spec_title': 'RFC6585#5',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc6585#section-5'\r\n    },\r\n    '451': {\r\n        'code': 451,\r\n        'text': 'Unavailable For Legal Reasons',\r\n        'description': '\\\"The server is denying access to the resource in response to a legal demand.\\\"',\r\n        'spec_title': 'draft-ietf-httpbis-legally-restricted-status',\r\n        'spec_href': 'http://tools.ietf.org/html/draft-ietf-httpbis-legally-restricted-status'\r\n    },\r\n    '506': {\r\n        'code': 506,\r\n        'text': 'Variant Also Negotiates',\r\n        'description': '\\\"The server has an internal configuration error: the chosen variant resource is configured to engage in transparent content negotiation itself, and is therefore not a proper end point in the negotiation process.\\\"',\r\n        'spec_title': 'RFC2295#8.1',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc2295#section-8.1'\r\n    },\r\n    '507': {\r\n        'code': 507,\r\n        'text': 'Insufficient Storage',\r\n        'description': '\\The method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request.\\\"',\r\n        'spec_title': 'RFC5218#10.6',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc2518#section-10.6'\r\n    },\r\n    '511': {\r\n        'code': 511,\r\n        'text': 'Network Authentication Required',\r\n        'description': '\\\"The client needs to authenticate to gain network access.\\\"',\r\n        'spec_title': 'RFC6585#6',\r\n        'spec_href': 'http://tools.ietf.org/html/rfc6585#section-6'\r\n    }\r\n};\n\n////////////  HELPERS ///////////\r\n/**\r\n * Create an error Response from an HTTP status code and error message\r\n */\r\nfunction createErrorResponse(req, status, message) {\r\n    return new _angular_http.ResponseOptions({\r\n        body: { 'error': \"\" + message },\r\n        url: req.url,\r\n        headers: new _angular_http.Headers({ 'Content-Type': 'application/json' }),\r\n        status: status\r\n    });\r\n}\r\n/**\r\n * Create an Observable response from response options.\r\n */\r\nfunction createObservableResponse(req, resOptions) {\r\n    return new rxjs_Observable.Observable(function (responseObserver) {\r\n        emitResponse(responseObserver, req, resOptions);\r\n        return function () { }; // unsubscribe function\r\n    });\r\n}\r\n/**\r\n * Create a response from response options\r\n * and tell \"ResponseObserver\" (an `Observer<Response>`) to emit it.\r\n * The observer's observable is either completed or in error state after call.\r\n */\r\nfunction emitResponse(responseObserver, req, resOptions) {\r\n    resOptions.url = resOptions.url || req.url; // make sure url is set\r\n    resOptions = setStatusText(resOptions);\r\n    var res = new _angular_http.Response(resOptions);\r\n    if (isSuccess(res.status)) {\r\n        responseObserver.next(res);\r\n        responseObserver.complete();\r\n    }\r\n    else {\r\n        responseObserver.error(res);\r\n    }\r\n}\r\n/**\r\n* Interface for a class that creates an in-memory database\r\n*\r\n* Its `createDb` method creates a hash of named collections that represents the database\r\n*\r\n* For maximum flexibility, the service may define HTTP method overrides.\r\n* Such methods must match the spelling of an HTTP method in lower case (e.g, \"get\").\r\n* If a request has a matching method, it will be called as in\r\n* `get(info: requestInfo, db: {})` where `db` is the database object described above.\r\n*/\r\nvar InMemoryDbService = (function () {\r\n    function InMemoryDbService() {\r\n    }\r\n    return InMemoryDbService;\r\n}());\r\n/**\r\n* Interface for InMemoryBackend configuration options\r\n*/\r\nvar InMemoryBackendConfigArgs = (function () {\r\n    function InMemoryBackendConfigArgs() {\r\n    }\r\n    return InMemoryBackendConfigArgs;\r\n}());\r\nfunction removeTrailingSlash(path) {\r\n    return path.replace(/\\/$/, '');\r\n}\r\n/////////////////////////////////\r\n/**\r\n*  InMemoryBackendService configuration options\r\n*  Usage:\r\n*    InMemoryWebApiModule.forRoot(InMemHeroService, {delay: 600})\r\n*\r\n*  or if providing separately:\r\n*    provide(InMemoryBackendConfig, {useValue: {delay: 600}}),\r\n*/\r\nvar InMemoryBackendConfig = (function () {\r\n    function InMemoryBackendConfig(config) {\r\n        if (config === void 0) { config = {}; }\r\n        Object.assign(this, {\r\n            // default config:\r\n            caseSensitiveSearch: false,\r\n            defaultResponseOptions: new _angular_http.BaseResponseOptions(),\r\n            delay: 500,\r\n            delete404: false,\r\n            passThruUnknownUrl: false,\r\n            post204: true,\r\n            put204: true,\r\n            apiBase: undefined,\r\n            host: undefined,\r\n            rootPath: undefined // default value is actually set in InMemoryBackendService ctor\r\n        }, config);\r\n    }\r\n    InMemoryBackendConfig.decorators = [\r\n        { type: _angular_core.Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    InMemoryBackendConfig.ctorParameters = function () { return [\r\n        { type: InMemoryBackendConfigArgs, },\r\n    ]; };\r\n    return InMemoryBackendConfig;\r\n}());\r\n/**\r\n * Returns true if the the Http Status Code is 200-299 (success)\r\n */\r\nfunction isSuccess(status) { return status >= 200 && status < 300; }\r\n\r\n/**\r\n * Set the status text in a response:\r\n */\r\nfunction setStatusText(options) {\r\n    try {\r\n        var statusCode = STATUS_CODE_INFO[options.status];\r\n        options['statusText'] = statusCode ? statusCode.text : 'Unknown Status';\r\n        return options;\r\n    }\r\n    catch (err) {\r\n        return new _angular_http.ResponseOptions({\r\n            status: STATUS.INTERNAL_SERVER_ERROR,\r\n            statusText: 'Invalid Server Operation'\r\n        });\r\n    }\r\n}\r\n////////////  InMemoryBackendService ///////////\r\n/**\r\n * Simulate the behavior of a RESTy web api\r\n * backed by the simple in-memory data store provided by the injected InMemoryDataService service.\r\n * Conforms mostly to behavior described here:\r\n * http://www.restapitutorial.com/lessons/httpmethods.html\r\n *\r\n * ### Usage\r\n *\r\n * Create `InMemoryDataService` class that implements `InMemoryDataService`.\r\n * Call `forRoot` static method with this service class and optional configuration object:\r\n * ```\r\n * // other imports\r\n * import { HttpModule }           from '@angular/http';\r\n * import { InMemoryWebApiModule } from 'angular-in-memory-web-api';\r\n *\r\n * import { InMemHeroService, inMemConfig } from '../api/in-memory-hero.service';\r\n * @NgModule({\r\n *  imports: [\r\n *    HttpModule,\r\n *    InMemoryWebApiModule.forRoot(InMemHeroService, inMemConfig),\r\n *    ...\r\n *  ],\r\n *  ...\r\n * })\r\n * export class AppModule { ... }\r\n * ```\r\n */\r\nvar InMemoryBackendService = (function () {\r\n    function InMemoryBackendService(injector, inMemDbService, config) {\r\n        this.injector = injector;\r\n        this.inMemDbService = inMemDbService;\r\n        this.config = new InMemoryBackendConfig();\r\n        this.resetDb();\r\n        var loc = this.getLocation('./');\r\n        this.config.host = loc.host; // default to app web server host\r\n        this.config.rootPath = loc.pathname; // default to path when app is served (e.g.'/')\r\n        Object.assign(this.config, config || {});\r\n        this.setPassThruBackend();\r\n    }\r\n    InMemoryBackendService.prototype.createConnection = function (req) {\r\n        var response;\r\n        try {\r\n            response = this.handleRequest(req);\r\n        }\r\n        catch (error) {\r\n            var err = error.message || error;\r\n            var options = createErrorResponse(req, STATUS.INTERNAL_SERVER_ERROR, \"\" + err);\r\n            response = this.addDelay(createObservableResponse(req, options));\r\n        }\r\n        return {\r\n            readyState: _angular_http.ReadyState.Done,\r\n            request: req,\r\n            response: response\r\n        };\r\n    };\r\n    ////  protected /////\r\n    /**\r\n     * Process Request and return an Observable of Http Response object\r\n     * in the manner of a RESTy web api.\r\n     *\r\n     * Expect URI pattern in the form :base/:collectionName/:id?\r\n     * Examples:\r\n     *   // for store with a 'customers' collection\r\n     *   GET api/customers          // all customers\r\n     *   GET api/customers/42       // the character with id=42\r\n     *   GET api/customers?name=^j  // 'j' is a regex; returns customers whose name starts with 'j' or 'J'\r\n     *   GET api/customers.json/42  // ignores the \".json\"\r\n     *\r\n     * Also accepts direct commands to the service in which the last segment of the apiBase is the word \"commands\"\r\n     * Examples:\r\n     *     POST commands/resetDb,\r\n     *     GET/POST commands/config - get or (re)set the config\r\n     *\r\n     *   HTTP overrides:\r\n     *     If the injected inMemDbService defines an HTTP method (lowercase)\r\n     *     The request is forwarded to that method as in\r\n     *     `inMemDbService.get(httpMethodInterceptorArgs)`\r\n     *     which must return an `Observable<Response>`\r\n     */\r\n    InMemoryBackendService.prototype.handleRequest = function (req) {\r\n        var parsed = this.inMemDbService['parseUrl'] ?\r\n            // parse with override method\r\n            this.inMemDbService['parseUrl'](req.url) :\r\n            // parse with default url parser\r\n            this.parseUrl(req.url);\r\n        var base = parsed.base, collectionName = parsed.collectionName, id = parsed.id, query = parsed.query, resourceUrl = parsed.resourceUrl;\r\n        var collection = this.db[collectionName];\r\n        var reqInfo = {\r\n            req: req,\r\n            base: base,\r\n            collection: collection,\r\n            collectionName: collectionName,\r\n            headers: new _angular_http.Headers({ 'Content-Type': 'application/json' }),\r\n            id: this.parseId(collection, id),\r\n            query: query,\r\n            resourceUrl: resourceUrl\r\n        };\r\n        var reqMethodName = _angular_http.RequestMethod[req.method || 0].toLowerCase();\r\n        var resOptions;\r\n        if (/commands\\/$/i.test(reqInfo.base)) {\r\n            return this.commands(reqInfo);\r\n        }\r\n        else if (this.inMemDbService[reqMethodName]) {\r\n            // InMemoryDbService has an overriding interceptor for this HTTP method; call it\r\n            // The interceptor result must be an Observable<Response>\r\n            var interceptorArgs = {\r\n                requestInfo: reqInfo,\r\n                db: this.db,\r\n                config: this.config,\r\n                passThruBackend: this.passThruBackend\r\n            };\r\n            var interceptorResponse = this.inMemDbService[reqMethodName](interceptorArgs);\r\n            return this.addDelay(interceptorResponse);\r\n        }\r\n        else if (reqInfo.collection) {\r\n            // request is for a collection created by the InMemoryDbService\r\n            return this.addDelay(this.collectionHandler(reqInfo));\r\n        }\r\n        else if (this.passThruBackend) {\r\n            // Passes request thru to a \"real\" backend which returns an Observable<Response>\r\n            // BAIL OUT with this Observable<Response>\r\n            return this.passThruBackend.createConnection(req).response;\r\n        }\r\n        else {\r\n            // can't handle this request\r\n            resOptions = createErrorResponse(req, STATUS.NOT_FOUND, \"Collection '\" + collectionName + \"' not found\");\r\n            return this.addDelay(createObservableResponse(req, resOptions));\r\n        }\r\n    };\r\n    /**\r\n     * Add configured delay to response observable unless delay === 0\r\n     */\r\n    InMemoryBackendService.prototype.addDelay = function (response) {\r\n        var delay = this.config.delay;\r\n        return delay === 0 ? response : response.delay(delay || 500);\r\n    };\r\n    /**\r\n     * Apply query/search parameters as a filter over the collection\r\n     * This impl only supports RegExp queries on string properties of the collection\r\n     * ANDs the conditions together\r\n     */\r\n    InMemoryBackendService.prototype.applyQuery = function (collection, query) {\r\n        // extract filtering conditions - {propertyName, RegExps) - from query/search parameters\r\n        var conditions = [];\r\n        var caseSensitive = this.config.caseSensitiveSearch ? undefined : 'i';\r\n        query.paramsMap.forEach(function (value, name) {\r\n            value.forEach(function (v) { return conditions.push({ name: name, rx: new RegExp(decodeURI(v), caseSensitive) }); });\r\n        });\r\n        var len = conditions.length;\r\n        if (!len) {\r\n            return collection;\r\n        }\r\n        // AND the RegExp conditions\r\n        return collection.filter(function (row) {\r\n            var ok = true;\r\n            var i = len;\r\n            while (ok && i) {\r\n                i -= 1;\r\n                var cond = conditions[i];\r\n                ok = cond.rx.test(row[cond.name]);\r\n            }\r\n            return ok;\r\n        });\r\n    };\r\n    InMemoryBackendService.prototype.clone = function (data) {\r\n        return JSON.parse(JSON.stringify(data));\r\n    };\r\n    InMemoryBackendService.prototype.collectionHandler = function (reqInfo) {\r\n        var _this = this;\r\n        var req = reqInfo.req;\r\n        return new rxjs_Observable.Observable(function (responseObserver) {\r\n            var resOptions;\r\n            switch (req.method) {\r\n                case _angular_http.RequestMethod.Get:\r\n                    resOptions = _this.get(reqInfo);\r\n                    break;\r\n                case _angular_http.RequestMethod.Post:\r\n                    resOptions = _this.post(reqInfo);\r\n                    break;\r\n                case _angular_http.RequestMethod.Put:\r\n                    resOptions = _this.put(reqInfo);\r\n                    break;\r\n                case _angular_http.RequestMethod.Delete:\r\n                    resOptions = _this.delete(reqInfo);\r\n                    break;\r\n                default:\r\n                    resOptions = createErrorResponse(req, STATUS.METHOD_NOT_ALLOWED, 'Method not allowed');\r\n                    break;\r\n            }\r\n            // If `inMemDbService.responseInterceptor` exists, let it morph the response options\r\n            if (_this.inMemDbService['responseInterceptor']) {\r\n                resOptions = _this.inMemDbService['responseInterceptor'](resOptions, reqInfo);\r\n            }\r\n            emitResponse(responseObserver, reqInfo.req, resOptions);\r\n            return function () { }; // unsubscribe function\r\n        });\r\n    };\r\n    /**\r\n     * When the last segment of the `base` path is \"commands\", the `collectionName` is the command\r\n     * Example URLs:\r\n     *   commands/resetdb   // Reset the \"database\" to its original state\r\n     *   commands/config (GET) // Return this service's config object\r\n     *   commands/config (!GET) // Update the config (e.g. delay)\r\n     *\r\n     * Commands are \"hot\", meaning they are always executed immediately\r\n     * whether or not someone subscribes to the returned observable\r\n     *\r\n     * Usage:\r\n     *   http.post('commands/resetdb', undefined);\r\n     *   http.get('commands/config');\r\n     *   http.post('commands/config', '{\"delay\":1000}');\r\n     */\r\n    InMemoryBackendService.prototype.commands = function (reqInfo) {\r\n        var command = reqInfo.collectionName.toLowerCase();\r\n        var method = reqInfo.req.method;\r\n        var resOptions;\r\n        switch (command) {\r\n            case 'resetdb':\r\n                this.resetDb();\r\n                resOptions = new _angular_http.ResponseOptions({ status: STATUS.OK });\r\n                break;\r\n            case 'config':\r\n                if (method === _angular_http.RequestMethod.Get) {\r\n                    resOptions = new _angular_http.ResponseOptions({\r\n                        body: this.clone(this.config),\r\n                        status: STATUS.OK\r\n                    });\r\n                }\r\n                else {\r\n                    // Be nice ... any other method is a config update\r\n                    var body = JSON.parse(reqInfo.req.text() || '{}');\r\n                    Object.assign(this.config, body);\r\n                    this.setPassThruBackend();\r\n                    resOptions = new _angular_http.ResponseOptions({ status: STATUS.NO_CONTENT });\r\n                }\r\n                break;\r\n            default:\r\n                resOptions = createErrorResponse(reqInfo.req, STATUS.INTERNAL_SERVER_ERROR, \"Unknown command \\\"\" + command + \"\\\"\");\r\n        }\r\n        return createObservableResponse(reqInfo.req, resOptions);\r\n    };\r\n    InMemoryBackendService.prototype.delete = function (_a) {\r\n        var id = _a.id, collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, req = _a.req;\r\n        if (!id) {\r\n            return createErrorResponse(req, STATUS.NOT_FOUND, \"Missing \\\"\" + collectionName + \"\\\" id\");\r\n        }\r\n        var exists = this.removeById(collection, id);\r\n        return new _angular_http.ResponseOptions({\r\n            headers: headers,\r\n            status: (exists || !this.config.delete404) ? STATUS.NO_CONTENT : STATUS.NOT_FOUND\r\n        });\r\n    };\r\n    InMemoryBackendService.prototype.findById = function (collection, id) {\r\n        return collection.find(function (item) { return item.id === id; });\r\n    };\r\n    InMemoryBackendService.prototype.genId = function (collection) {\r\n        // assumes numeric ids\r\n        var maxId = 0;\r\n        collection.reduce(function (prev, item) {\r\n            maxId = Math.max(maxId, typeof item.id === 'number' ? item.id : maxId);\r\n        }, undefined);\r\n        return maxId + 1;\r\n    };\r\n    InMemoryBackendService.prototype.get = function (_a) {\r\n        var id = _a.id, query = _a.query, collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, req = _a.req;\r\n        var data = collection;\r\n        if (id) {\r\n            data = this.findById(collection, id);\r\n        }\r\n        else if (query) {\r\n            data = this.applyQuery(collection, query);\r\n        }\r\n        if (!data) {\r\n            return createErrorResponse(req, STATUS.NOT_FOUND, \"'\" + collectionName + \"' with id='\" + id + \"' not found\");\r\n        }\r\n        return new _angular_http.ResponseOptions({\r\n            body: { data: this.clone(data) },\r\n            headers: headers,\r\n            status: STATUS.OK\r\n        });\r\n    };\r\n    InMemoryBackendService.prototype.getLocation = function (href) {\r\n        var l = document.createElement('a');\r\n        l.href = href;\r\n        return l;\r\n    };\r\n    \r\n    InMemoryBackendService.prototype.indexOf = function (collection, id) {\r\n        return collection.findIndex(function (item) { return item.id === id; });\r\n    };\r\n    // tries to parse id as number if collection item.id is a number.\r\n    // returns the original param id otherwise.\r\n    InMemoryBackendService.prototype.parseId = function (collection, id) {\r\n        // tslint:disable-next-line:triple-equals\r\n        if (!collection || id == undefined) {\r\n            return undefined;\r\n        }\r\n        var isNumberId = collection[0] && typeof collection[0].id === 'number';\r\n        if (isNumberId) {\r\n            var idNum = parseFloat(id);\r\n            return isNaN(idNum) ? id : idNum;\r\n        }\r\n        return id;\r\n    };\r\n    /**\r\n     * Parses the request URL into a `ParsedUrl` object.\r\n     * Parsing depends upon certain values of `config`: `apiBase`, `host`, and `urlRoot`.\r\n     *\r\n     * Configuring the `apiBase` yields the most interesting changes to `parseUrl` behavior:\r\n     *   When apiBase=undefined and url='http://localhost/api/collection/42'\r\n     *     {base: 'api/', collectionName: 'collection', id: '42', ...}\r\n     *   When apiBase='some/api/root/' and url='http://localhost/some/api/root/collection'\r\n     *     {base: 'some/api/root/', collectionName: 'collection', id: undefined, ...}\r\n     *   When apiBase='/' and url='http://localhost/collection'\r\n     *     {base: '/', collectionName: 'collection', id: undefined, ...}\r\n     *\r\n     * The actual api base segment values are ignored. Only the number of segments matters.\r\n     * The following api base strings are considered identical: 'a/b' ~ 'some/api/' ~ `two/segments'\r\n     *\r\n     * To replace this default method, assign your alternative to your InMemDbService['parseUrl']\r\n     */\r\n    InMemoryBackendService.prototype.parseUrl = function (url) {\r\n        try {\r\n            var loc = this.getLocation(url);\r\n            var drop = this.config.rootPath.length;\r\n            var urlRoot = '';\r\n            if (loc.host !== this.config.host) {\r\n                // url for a server on a different host!\r\n                // assume it's collection is actually here too.\r\n                drop = 1; // the leading slash\r\n                urlRoot = loc.protocol + '//' + loc.host + '/';\r\n            }\r\n            var path = loc.pathname.substring(drop);\r\n            var pathSegments = path.split('/');\r\n            var segmentIx = 0;\r\n            // apiBase: the front part of the path devoted to getting to the api route\r\n            // Assumes first path segment if no config.apiBase\r\n            // else ignores as many path segments as are in config.apiBase\r\n            // Does NOT care what the api base chars actually are.\r\n            var apiBase = void 0;\r\n            // tslint:disable-next-line:triple-equals\r\n            if (this.config.apiBase == undefined) {\r\n                apiBase = pathSegments[segmentIx++];\r\n            }\r\n            else {\r\n                apiBase = removeTrailingSlash(this.config.apiBase.trim());\r\n                if (apiBase) {\r\n                    segmentIx = apiBase.split('/').length;\r\n                }\r\n                else {\r\n                    segmentIx = 0; // no api base at all; unwise but allowed.\r\n                }\r\n            }\r\n            apiBase = apiBase + '/';\r\n            var collectionName = pathSegments[segmentIx++];\r\n            // ignore anything after a '.' (e.g.,the \"json\" in \"customers.json\")\r\n            collectionName = collectionName && collectionName.split('.')[0];\r\n            var id = pathSegments[segmentIx++];\r\n            var query = loc.search && new _angular_http.URLSearchParams(loc.search.substr(1));\r\n            var resourceUrl = urlRoot + apiBase + collectionName + '/';\r\n            return { base: apiBase, collectionName: collectionName, id: id, query: query, resourceUrl: resourceUrl };\r\n        }\r\n        catch (err) {\r\n            var msg = \"unable to parse url '\" + url + \"'; original error: \" + err.message;\r\n            throw new Error(msg);\r\n        }\r\n    };\r\n    InMemoryBackendService.prototype.post = function (_a) {\r\n        var collection = _a.collection, headers = _a.headers, id = _a.id, req = _a.req, resourceUrl = _a.resourceUrl;\r\n        var item = JSON.parse(req.text());\r\n        // tslint:disable-next-line:triple-equals\r\n        if (item.id == undefined) {\r\n            item.id = id || this.genId(collection);\r\n        }\r\n        // ignore the request id, if any. Alternatively,\r\n        // could reject request if id differs from item.id\r\n        id = item.id;\r\n        var existingIx = this.indexOf(collection, id);\r\n        var body = { data: this.clone(item) };\r\n        if (existingIx > -1) {\r\n            collection[existingIx] = item;\r\n            var res = this.config.post204 ?\r\n                { headers: headers, status: STATUS.NO_CONTENT } :\r\n                { headers: headers, body: body, status: STATUS.OK }; // successful; return entity\r\n            return new _angular_http.ResponseOptions(res);\r\n        }\r\n        else {\r\n            collection.push(item);\r\n            headers.set('Location', resourceUrl + '/' + id);\r\n            return new _angular_http.ResponseOptions({ headers: headers, body: body, status: STATUS.CREATED });\r\n        }\r\n    };\r\n    InMemoryBackendService.prototype.put = function (_a) {\r\n        var id = _a.id, collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, req = _a.req;\r\n        var item = JSON.parse(req.text());\r\n        // tslint:disable-next-line:triple-equals\r\n        if (item.id == undefined) {\r\n            return createErrorResponse(req, STATUS.NOT_FOUND, \"Missing '\" + collectionName + \"' id\");\r\n        }\r\n        if (id !== item.id) {\r\n            return createErrorResponse(req, STATUS.BAD_REQUEST, \"\\\"\" + collectionName + \"\\\" id does not match item.id\");\r\n        }\r\n        var existingIx = this.indexOf(collection, id);\r\n        var body = { data: this.clone(item) };\r\n        if (existingIx > -1) {\r\n            collection[existingIx] = item;\r\n            var res = this.config.put204 ?\r\n                { headers: headers, status: STATUS.NO_CONTENT } :\r\n                { headers: headers, body: body, status: STATUS.OK }; // successful; return entity\r\n            return new _angular_http.ResponseOptions(res);\r\n        }\r\n        else {\r\n            collection.push(item);\r\n            return new _angular_http.ResponseOptions({ headers: headers, body: body, status: STATUS.CREATED });\r\n        }\r\n    };\r\n    InMemoryBackendService.prototype.removeById = function (collection, id) {\r\n        var ix = this.indexOf(collection, id);\r\n        if (ix > -1) {\r\n            collection.splice(ix, 1);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Reset the \"database\" to its original state\r\n     */\r\n    InMemoryBackendService.prototype.resetDb = function () {\r\n        this.db = this.inMemDbService.createDb();\r\n    };\r\n    InMemoryBackendService.prototype.setPassThruBackend = function () {\r\n        this.passThruBackend = undefined;\r\n        if (this.config.passThruUnknownUrl) {\r\n            try {\r\n                // copied from @angular/http/backends/xhr_backend\r\n                var browserXhr = this.injector.get(_angular_http.BrowserXhr);\r\n                var baseResponseOptions = this.injector.get(_angular_http.ResponseOptions);\r\n                var xsrfStrategy = this.injector.get(_angular_http.XSRFStrategy);\r\n                this.passThruBackend = new _angular_http.XHRBackend(browserXhr, baseResponseOptions, xsrfStrategy);\r\n            }\r\n            catch (ex) {\r\n                ex.message = 'Cannot create passThru404 backend; ' + (ex.message || '');\r\n                throw ex;\r\n            }\r\n        }\r\n    };\r\n    InMemoryBackendService.decorators = [\r\n        { type: _angular_core.Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    InMemoryBackendService.ctorParameters = function () { return [\r\n        { type: _angular_core.Injector, },\r\n        { type: InMemoryDbService, },\r\n        { type: InMemoryBackendConfigArgs, decorators: [{ type: _angular_core.Inject, args: [InMemoryBackendConfig,] }, { type: _angular_core.Optional },] },\r\n    ]; };\r\n    return InMemoryBackendService;\r\n}());\n\n// AoT requires factory to be exported\r\nfunction inMemoryBackendServiceFactory(injector, dbService, options) {\r\n    var backend = new InMemoryBackendService(injector, dbService, options);\r\n    return backend;\r\n}\r\nvar InMemoryWebApiModule = (function () {\r\n    function InMemoryWebApiModule() {\r\n    }\r\n    /**\r\n    *  Prepare in-memory-web-api in the root/boot application module\r\n    *  with class that implements InMemoryDbService and creates an in-memory database.\r\n    *\r\n    * @param {Type} dbCreator - Class that creates seed data for in-memory database. Must implement InMemoryDbService.\r\n    * @param {InMemoryBackendConfigArgs} [options]\r\n    *\r\n    * @example\r\n    * InMemoryWebApiModule.forRoot(dbCreator);\r\n    * InMemoryWebApiModule.forRoot(dbCreator, {useValue: {delay:600}});\r\n    */\r\n    InMemoryWebApiModule.forRoot = function (dbCreator, options) {\r\n        return {\r\n            ngModule: InMemoryWebApiModule,\r\n            providers: [\r\n                { provide: InMemoryDbService, useClass: dbCreator },\r\n                { provide: InMemoryBackendConfig, useValue: options },\r\n            ]\r\n        };\r\n    };\r\n    InMemoryWebApiModule.decorators = [\r\n        { type: _angular_core.NgModule, args: [{\r\n                    // Must useFactory for AoT\r\n                    // https://github.com/angular/angular/issues/11178\r\n                    providers: [{ provide: _angular_http.XHRBackend,\r\n                            useFactory: inMemoryBackendServiceFactory,\r\n                            deps: [_angular_core.Injector, InMemoryDbService, InMemoryBackendConfig] }]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    InMemoryWebApiModule.ctorParameters = function () { return []; };\r\n    return InMemoryWebApiModule;\r\n}());\n\nexports.STATUS = STATUS;\nexports.STATUS_CODE_INFO = STATUS_CODE_INFO;\nexports.createErrorResponse = createErrorResponse;\nexports.createObservableResponse = createObservableResponse;\nexports.emitResponse = emitResponse;\nexports.InMemoryDbService = InMemoryDbService;\nexports.InMemoryBackendConfigArgs = InMemoryBackendConfigArgs;\nexports.removeTrailingSlash = removeTrailingSlash;\nexports.InMemoryBackendConfig = InMemoryBackendConfig;\nexports.isSuccess = isSuccess;\nexports.setStatusText = setStatusText;\nexports.InMemoryBackendService = InMemoryBackendService;\nexports.inMemoryBackendServiceFactory = inMemoryBackendServiceFactory;\nexports.InMemoryWebApiModule = InMemoryWebApiModule;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/angular-in-memory-web-api/bundles/in-memory-web-api.umd.js\n// module id = 30\n// module chunks = 0","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    template: require('./app.component.html'),\n    styles: [require('./app.component.css')]\n})\nexport class AppComponent {\n    emoji = ['🎉', '😍', '😜', '👍'];\n    activeEmoji: string;\n    changeEmoji() {\n        this.activeEmoji = this.emoji[Math.floor(Math.random() * this.emoji.length)];\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ../~/angular2-template-loader!./app/app.component.ts","module.exports = \"<app-entry-list></app-entry-list>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/app.component.html\n// module id = 41\n// module chunks = 0","module.exports = \"h2 {\\n    font-family: sans-serif;\\n    font-size: 1.2em;\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/app.component.css\n// module id = 42\n// module chunks = 0","export * from './shared/entry.service';\nexport * from './entry-list/entry-list.component';\nexport * from './entry/entry.component';\nexport * from './entry/entry-comment-form.component';\n\n\n// WEBPACK FOOTER //\n// ../~/angular2-template-loader!./app/entries/index.ts","import { Entry } from './entry.model';\nimport { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\n\n@Injectable()\nexport class EntryService {\n\n    constructor(private http: Http) {\n\n    }\n\n    addComment(entryId: number, comment: { name: string; comment: string; }) {\n        return this.http.post(`/app/entries/${entryId}/comments`, comment)\n            .toPromise();\n    }\n\n    getEntries(): Promise<Entry[]> {\n        return this.http.get('/app/entries')\n                .toPromise()\n                .then(response => response.json().data as Entry[]);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ../~/angular2-template-loader!./app/entries/shared/entry.service.ts","import { Component, OnInit } from '@angular/core';\nimport { EntryService } from '../shared/entry.service';\nimport { Entry } from '../shared/entry.model';\n\n@Component({\n    selector: 'app-entry-list',\n    template: require('./entry-list.component.html'),\n    styles: [require('./entry-list.component.css')]\n})\n\nexport class EntryListComponent implements OnInit {\n    entries: Entry[];\n\n    constructor(private entryService: EntryService) {\n        \n    }\n\n    ngOnInit() {\n        this.entryService\n                .getEntries()\n                .then(entries => this.entries = entries);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ../~/angular2-template-loader!./app/entries/entry-list/entry-list.component.ts","module.exports = \"<app-entry *ngFor=\\\"let entry of entries\\\" [entry]=\\\"entry\\\"></app-entry>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/entries/entry-list/entry-list.component.html\n// module id = 46\n// module chunks = 0","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/entries/entry-list/entry-list.component.css\n// module id = 47\n// module chunks = 0","import { Component, Input } from '@angular/core';\nimport { Entry } from '../shared/entry.model';\n\n@Component({\n    selector: 'app-entry',\n    template: require('./entry.component.html'),\n    styles: [require('./entry.component.css')]\n})\n\nexport class EntryComponent {\n    @Input() entry: Entry;\n\n    onCommentAdded(comment: {name: string; comment: string;}) {\n        this.entry.comments.push(comment);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ../~/angular2-template-loader!./app/entries/entry/entry.component.ts","export class Entry {\n    title: string;\n    photo: string;\n    description: string;\n    comments: any[];\n}\n\n\n// WEBPACK FOOTER //\n// ../~/angular2-template-loader!./app/entries/shared/entry.model.ts","module.exports = \"<h2>{{entry.title}}</h2>\\n<figure>\\n    <img src=\\\"{{entry.photo}}\\\">\\n    <figcaption>{{entry.description}}</figcaption>\\n</figure>\\n<div class=\\\"actions\\\">\\n    <button type=\\\"button\\\" (click)=\\\"isLiked = !isLiked\\\" [ngClass]=\\\"{liked: isLiked}\\\">❤</button>\\n    <button type=\\\"button\\\" (click)=\\\"showComments = !showComments\\\">Comments ({{entry.comments.length}})</button>\\n</div>\\n<div class=\\\"comments\\\" *ngIf=\\\"showComments\\\">\\n    <div class=\\\"comment\\\" *ngFor=\\\"let comment of entry.comments\\\">\\n        <p><strong>{{comment.name}}</strong> {{comment.comment}}</p>\\n    </div>\\n    <app-entry-comment-form (onCommentAdded)=\\\"onCommentAdded($event)\\\" [entryId]=\\\"entry.id\\\"></app-entry-comment-form>\\n</div>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/entries/entry/entry.component.html\n// module id = 50\n// module chunks = 0","module.exports = \"figure {\\n    margin: 0;\\n    border: 1px solid #000;\\n    position: relative;\\n}\\n\\nfigcaption {\\n    background-color: rgba(0, 0, 0, 0.5);\\n    color: #fff;\\n    font-size: 1.2em;\\n    padding: 10px;\\n    position: absolute;\\n    bottom: 0;\\n    left: 0;\\n    right: 0;\\n}\\n\\nimg {\\n    display: block;\\n    width: 100%;\\n    height: auto;\\n}\\n\\n:host {\\n    padding: 1em;\\n    display: block;\\n}\\n\\n.actions {\\n    padding: 1em 0;\\n}\\n\\n.liked {\\n    color: red;\\n}\\n\\n\\n\\n\\n\\n\\n\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/entries/entry/entry.component.css\n// module id = 51\n// module chunks = 0","import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { EntryService } from '../shared/entry.service';\n\n@Component({\n    selector: 'app-entry-comment-form',\n    template: require('./entry-comment-form.component.html')\n})\n\nexport class EntryCommentFormComponent {\n    name: string = \"\";\n    comment: string = \"\";\n    @Input() entryId: number;\n    @Output() onCommentAdded = new EventEmitter<{name: string; comment:string;}>();\n    @ViewChild('commentForm') commentForm: NgForm;\n    \n    constructor(private entryService: EntryService) {\n\n    }\n    \n    onSubmit(commentForm: NgForm) {\n        if (this.commentForm.invalid) return;\n        let comment = { name: this.name, comment: this.comment };\n        this.entryService.addComment(this.entryId, comment)\n            .then(() => {\n                this.onCommentAdded.emit(comment);\n                    this.commentForm.resetForm();\n            });\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ../~/angular2-template-loader!./app/entries/entry/entry-comment-form.component.ts","module.exports = \"<form (submit)=\\\"onSubmit()\\\" #commentForm=\\\"ngForm\\\" novalidate>\\n    <div>\\n        <label for=\\\"name\\\">Name</label>\\n        <input type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"name\\\" \\n            required minlength=\\\"3\\\" #nameField=\\\"ngModel\\\" \\n            [ngStyle]=\\\"{'outline-color': nameField.dirty && nameField.valid ? 'green' : undefined }\\\"/>\\n        <div class=\\\"alert alert-danger\\\" *ngIf=\\\"(commentForm.submitted || nameField.touched) && nameField.errors\\\">\\n            <div [hidden]=\\\"!nameField.errors.required\\\">Name is required</div>\\n            <div [hidden]=\\\"!nameField.errors.minlength\\\">Name must be a minimum of 3 characters long</div>\\n        </div>\\n    </div>\\n    <div>\\n        <label for=\\\"comment\\\">Comment</label>\\n        <textarea name=\\\"comment\\\" [(ngModel)]=\\\"comment\\\" \\n            required minlength=\\\"3\\\" #commentField=\\\"ngModel\\\"\\n            [ngStyle]=\\\"{'outline-color': commentField.dirty && commentField.valid ? 'green' : undefined }\\\"></textarea>\\n        <div class=\\\"alert alert-danger\\\" *ngIf=\\\"(commentForm.submitted || commentField.touched) && commentField.errors\\\">\\n            <div [hidden]=\\\"!commentField.errors.required\\\">Comment is required</div>\\n            <div [hidden]=\\\"!commentField.errors.minlength\\\">Comment must be a minimum of 3 characters long</div>\\n        </div>\\n    </div>\\n    <div>\\n        <button>Submit</button>\\n    </div>\\n</form>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/entries/entry/entry-comment-form.component.html\n// module id = 53\n// module chunks = 0","import { InMemoryDbService } from 'angular-in-memory-web-api';\n\ndeclare var file: any;\n\nexport class InMemoryEntryService implements InMemoryDbService {\n    createDb() {\n        let entries = [\n            {\n                id: 1,\n                title: 'Burning Sundown Behind Trees',\n                description: 'A view of the setting sun through trees',\n                photo: require('../../photos/Burning-sundown-behind-trees.jpg'),\n                comments: [\n                    {\n                        id: 1,\n                        name: 'Jane Smith',\n                        comment: 'This is my favorite! I love it!'\n                    }\n                ]\n            },\n            {\n                id: 2,\n                title: 'Water Lilies and Algas',\n                description: 'Still water with floating lilies',\n                photo: require('../../photos/Water-lilies-and-algas.jpg'),\n                comments: [\n                    {\n                        id: 2,\n                        name: 'Kyle Jones',\n                        comment: 'Nice!'\n                    },\n                    {\n                        id: 3,\n                        name: 'Alecia Clark',\n                        comment: 'All the greens make this amazing.'\n                    }\n                ]\n            },\n            {\n                id: 3,\n                title: 'German Steam Engine',\n                description: 'Trains at the station',\n                photo: require('../../photos/German-steam-engine-No.4.jpg'),\n                comments: []\n            },\n            {\n                id: 4,\n                title: 'Red Sun Stripe at Horizon',\n                description: 'Green fields and a glimpse of sunlight',\n                photo: require('../../photos/Red-sun-stripe-at-horizon.jpg'),\n                comments: [\n                    {\n                        id: 4,\n                        name: 'Steve Johnson',\n                        comment: 'It looks like trouble is on the way.'\n                    },\n                    {\n                        id: 5,\n                        name: 'Becky M',\n                        comment: 'I imagine this was a shot of a storm that just passed.'\n                    }\n                ]\n            },\n            {\n                id: 5,\n                title: 'Sundown Behind Fields',\n                description: 'Clouds taking form at sun set',\n                photo: require('../../photos/Sundown-behind-fields.jpg'),\n                comments: [\n                    {\n                        id: 6,\n                        name: 'Lisa Frank',\n                        comment: 'Beautiful!'\n                    }\n                ]\n            }\n        ];\n        return { entries };\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ../~/angular2-template-loader!./app/backend.ts","module.exports = __webpack_public_path__ + \"/assets/Burning-sundown-behind-trees.e021ce0bd0c4b835a803b1cb84bd654d.jpg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../photos/Burning-sundown-behind-trees.jpg\n// module id = 55\n// module chunks = 0","module.exports = __webpack_public_path__ + \"/assets/Water-lilies-and-algas.be15b89f33e23be6195a8a39d59856ce.jpg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../photos/Water-lilies-and-algas.jpg\n// module id = 56\n// module chunks = 0","module.exports = __webpack_public_path__ + \"/assets/German-steam-engine-No.4.f732e5a9a9942cfc6a3592f6df31835a.jpg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../photos/German-steam-engine-No.4.jpg\n// module id = 57\n// module chunks = 0","module.exports = __webpack_public_path__ + \"/assets/Red-sun-stripe-at-horizon.0335b6c2e00bde48d380c5fc0f783210.jpg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../photos/Red-sun-stripe-at-horizon.jpg\n// module id = 58\n// module chunks = 0","module.exports = __webpack_public_path__ + \"/assets/Sundown-behind-fields.519215051a43091704d1ad35184811ef.jpg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../photos/Sundown-behind-fields.jpg\n// module id = 59\n// module chunks = 0"],"sourceRoot":""}